<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Redis6.0.10编译安装配置</title>
      <link href="posts/1c3a.html"/>
      <url>posts/1c3a.html</url>
      
        <content type="html"><![CDATA[<h3 id="下载Redis"><a href="#下载Redis" class="headerlink" title="下载Redis"></a>下载Redis</h3><p>直接登录官网下载你需要的版本<a href="https://redis.io/">https://redis.io/</a></p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装编译依赖gc++</span>$ <span class="token function">sudo</span> yum <span class="token function">install</span> gcc-c++<span class="token comment" spellcheck="true">#下载、编译、安装redis</span>$ <span class="token function">wget</span> http://download.redis.io/releases/redis-6.0.10.tar.gz$ <span class="token function">tar</span> xzf redis-6.0.10.tar.gz$ <span class="token function">cd</span> redis-6.0.10</code></pre><h3 id="安装编译"><a href="#安装编译" class="headerlink" title="安装编译"></a>安装编译</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mkdir</span> -p /usr/local/redis<span class="token comment" spellcheck="true">#编译包并安装到指定目录</span>$ <span class="token function">make</span> PREFIX<span class="token operator">=</span>/usr/local/redis <span class="token function">install</span><span class="token comment" spellcheck="true">#启动服务</span>$ src/redis-server<span class="token comment" spellcheck="true">#运行shell 及 基本操作</span>$ src/redis-cliredis<span class="token operator">></span> <span class="token keyword">set</span> foo barOKredis<span class="token operator">></span> get foo<span class="token string">"bar"</span></code></pre><p>编译后文件</p><p>redis-benchmark（压力测试工具）、redis-check-aof（检查.aof文件完整性的工具）、redis-check-rdb（检查数据文件完整性的工具）、redis-sentinel（监控集群运行状态）、redis-server（服务端）、redis-cli（客户端）</p><h3 id="编译出错"><a href="#编译出错" class="headerlink" title="编译出错"></a>编译出错</h3><p><img src="medias/redis-error.png" alt="编译出错"></p><p>这时我们需要检查 gcc 版本</p><pre class=" language-sh"><code class="language-sh">gcc -v</code></pre><p>配置scl源，升级版本：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">##安装scl源，修改官方源地址</span>yum -y <span class="token function">install</span> centos-release-sclvim CentOS-SCLo-scl-rh.repovim CentOS-SCLo-scl.repo<span class="token comment" spellcheck="true">##安装新版gcc</span>yum -y <span class="token function">install</span> devtoolset-9-gcc devtoolset-9-gcc-c++ devtoolset-9-binutilsscl <span class="token function">enable</span> devtoolset-9 <span class="token function">bash</span><span class="token comment" spellcheck="true">##永久生效</span><span class="token keyword">echo</span> <span class="token string">"source /opt/rh/devtoolset-9/enable"</span> <span class="token operator">>></span>/etc/profileyum <span class="token function">install</span> tcl -y</code></pre><h3 id="修改配置文件"><a href="#修改配置文件" class="headerlink" title="修改配置文件"></a>修改配置文件</h3><p>编辑”/etc/rc.d/init.d/redis”文件，做以下几处修改</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> redis.conf<span class="token comment" spellcheck="true">#!/bin/sh</span><span class="token comment" spellcheck="true"># chkconfig: 2345 90 10</span><span class="token comment" spellcheck="true"># description: Start And Stop Redis</span>protected-mode no <span class="token comment" spellcheck="true"># 关闭保护模式,不然远程还是连接不了</span>daemonize <span class="token function">yes</span>     <span class="token comment" spellcheck="true"># 守护进程模式开启,设为后台运行</span>bind 127.0.0.1    <span class="token comment" spellcheck="true"># 绑定IP按需修改</span>port 6379         <span class="token comment" spellcheck="true"># 端口按需修改</span></code></pre><p>启动 Redis服务端</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/redis/bin/./redis-server /usr/local/redis/redis.conf</code></pre><p>查看监听</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis</code></pre><p>启动Redis客户端</p><pre class=" language-bash"><code class="language-bash">./redis-cli127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">set</span> hello wordOK127.0.0.1:6379<span class="token operator">></span> get hello<span class="token string">"word"</span>127.0.0.1:6379<span class="token operator">></span> <span class="token keyword">exit</span></code></pre><p>关闭Redis服务 查看监听已经关闭</p><pre class=" language-bash"><code class="language-bash">./redis-cli <span class="token function">shutdown</span><span class="token function">ps</span> -ef <span class="token operator">|</span> <span class="token function">grep</span> redis</code></pre><p>设置开机自动启动Redis服务。首先复制启动脚本到资源目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /root/redis-6.0.10/utils/redis_init_script /etc/rc.d/init.d/redis</code></pre><p>修改启动脚本</p><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 755 /etc/rc.d/init.d/redis<span class="token comment" spellcheck="true">##然后将Redis服务加入到系统服务</span><span class="token function">chkconfig</span> --add redis<span class="token comment" spellcheck="true">##最后检查Redis服务设置是否已经生效</span><span class="token function">chkconfig</span> --list redis</code></pre><p>现在就可以使用service命令来启动和停止Redis服务了</p><pre class=" language-bash"><code class="language-bash">systemctl status redis.servicesystemctl start redis.servicesystemctl stop redis.service</code></pre><p>防火墙中放通端口</p><pre class=" language-bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --add-port<span class="token operator">=</span>6379/tcp --permanentfirewall-cmd --reload<span class="token comment" spellcheck="true">##查看端口是否放通</span>firewall-cmd --list-ports </code></pre><p>至此Redis安装完毕</p>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo版本升级指南</title>
      <link href="posts/15ac.html"/>
      <url>posts/15ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>更换了新主题，在hexo g和hexo s的时候总会报如下错误，在主题github issues逛了一圈后，感觉应该是我的hexo版本太老了。</p><pre class=" language-shell"><code class="language-shell">➜ hexo s(node:64285) [DEP0061] DeprecationWarning: fs.SyncWriteStream is deprecated.INFO  Start processingERROR Process failed: layout/archive.ejsSyntaxError: Invalid or unexpected token in "/Users/lanvnal/Files/blog/themes/hexo-theme-matery/layout/archive.ejs"    at new Function (<anonymous>)    at Object.exports.compile (/Users/lanvnal/Files/blog/node_modules/ejs/lib/ejs.js:242:14)    at Function.ejsRenderer.compile (/Users/lanvnal/Files/blog/node_modules/hexo-renderer-ejs/lib/renderer.js:11:14)    at Theme._View.View.View._precompile (/Users/lanvnal/Files/blog/node_modules/hexo/lib/theme/view.js:117:31)</code></pre><p>决定升级hexo版本，但是没找到很明确的升级hexo的文章，遂做一下记录。</p><h2 id="升级"><a href="#升级" class="headerlink" title="升级"></a>升级</h2><p>1、全局升级hexo-cli，先<code>hexo version</code>查看当前版本，然后<code>npm i hexo-cli -g</code>，再次<code>hexo version</code>查看是否升级成功。</p><p>2、使用<code>npm install -g npm-check</code>和<code>npm-check</code>，检查系统中的插件是否有升级的，可以看到自己前面都安装了那些插件</p><p>3、使用<code>npm install -g npm-upgrade</code>和<code>npm-upgrade</code>，升级系统中的插件</p><p>4、使用<code>npm update -g</code>和<code>npm update --save</code></p><p>PS：第四步遇到了错误，错误提示如下：</p><pre class=" language-shell"><code class="language-shell">> fsevents@1.2.11 install /Users/lanvnal/Files/blog/node_modules/hexo/node_modules/fsevents> node-gyp rebuildxcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instancexcode-select: error: tool 'xcodebuild' requires Xcode, but active developer directory '/Library/Developer/CommandLineTools' is a command line tools instanceNo receipt for 'com.apple.pkg.CLTools_Executables' found at '/'.No receipt for 'com.apple.pkg.DeveloperToolsCLILeo' found at '/'.No receipt for 'com.apple.pkg.DeveloperToolsCLI' found at '/'.gyp: No Xcode or CLT version detected!</code></pre><p>其实已经安装过了xcode cli，但是这里还是报错了，估计和苹果新系统有关，重装就好了，操作如下：</p><p>如果像以前一样执行<code>xcode-select --install</code>会有如下报错：</p><pre class=" language-bash"><code class="language-bash">xcode-select: error: <span class="token function">command</span> line tools are already installed, use <span class="token string">"Software Update"</span> to <span class="token function">install</span> updates</code></pre><p>解决办法：</p><pre class=" language-shell"><code class="language-shell">sudo rm -rf /Library/Developer/CommandLineToolsxcode-select --install</code></pre><p>然后再执行第四步，完美升级。</p>]]></content>
      
      
      <categories>
          
          <category> 网站优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7双网卡绑定配置 bonding</title>
      <link href="posts/e3a7.html"/>
      <url>posts/e3a7.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-简介"><a href="#0x01-简介" class="headerlink" title="0x01 简介"></a>0x01 简介</h2><p>当linux系统上有多个单独网卡，又想充分利用这些网卡，同时对外提供一个统一的网络地址，以使得增大网络的吞吐量，同时也提高网络的可用性，这时就需要bond来帮助我们解决这个问题。</p><p>Linux网卡绑定mode共有七种(0~6) bond0、bond1、bond2、bond3、bond4、bond5、bond6，接下来我们一起简单看下这7中模式的工作原理概述。</p><h3 id="bond几种主要模式介绍"><a href="#bond几种主要模式介绍" class="headerlink" title="bond几种主要模式介绍"></a>bond几种主要模式介绍</h3><ul><li>第一种模式：mod=0 ，即：(balance-rr) Round-robin policy（平衡抡循环策略）</li></ul><p>bond0工作原理：</p><p>传输数据包顺序是依次传输（即：第1个包走eth0，下一个包就走eth1….一直循环下去，直到最后一个传输完毕），此模式提供负载平衡和容错能力；但是我们知道如果一个连接或者会话的数据包从不同的接口发出的话，中途再经过不同的链路，在客户端很有可能会出现数据包无序到达的问题，而无序到达的数据包需要重新要求被发送，这样网络的吞吐量就会下降</p><blockquote><p>特点：有高可用 (容错) 和负载均衡的功能, 需要交换机的配置，每块网卡轮询发包 (流量分发比较均衡).</p></blockquote><ul><li>第二种模式：mod=1，即： (active-backup) Active-backup policy（主-备份策略）</li></ul><p>bond1工作原理：</p><p>只有一个设备处于活动状态，当一个宕掉另一个马上由备份转换为主设备。mac地址是外部可见得，从外面看来，bond的MAC地址是唯一的，以避免switch(交换机)发生混乱。此模式只提供了容错能力；由此可见此算法的优点是可以提供高网络连接的可用性，但是它的资源利用率较低，只有一个接口处于工作状态，在有N个网络接口的情况下，资源利用率为1/N</p><blockquote><p>特点：只有高可用 (容错) 功能, 不需要交换机配置, 这种模式只有一块网卡工作, 对外只有一个mac地址。缺点是端口利用率比较低</p></blockquote><ul><li>第三种模式：mod=2，即：(balance-xor) XOR policy（平衡策略）</li></ul><p>bond2工作原理：</p><p>基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力</p><blockquote><p>特点：基于指定的传输HASH策略传输数据包。缺省的策略是：(源MAC地址 XOR 目标MAC地址) % slave数量。其他的传输策略可以通过xmit_hash_policy选项指定，此模式提供负载平衡和容错能力，但不常用</p></blockquote><ul><li>第四种模式：mod=3，即：broadcast（广播策略）</li></ul><p>bond3工作原理：</p><p>在每个slave接口上传输每个数据包，此模式提供了容错能力。</p><blockquote><p> 特点：在每个slave接口上传输每个数据包，此模式提供了容错能力，不常用</p></blockquote><ul><li>第五种模式：mod=4，即：(802.3ad) IEEE 802.3ad Dynamic link aggregation（IEEE 802.3ad 动态链接聚合）</li></ul><p>bond4工作原理：</p><p>创建一个聚合组，它们共享同样的速率和双工设定。根据802.3ad规范将多个slave工作在同一个激活的聚合体下。外出流量的slave选举是基于传输hash策略，该策略可以通过xmit_hash_policy选项从缺省的XOR策略改变到其他策略。需要注意的是，并不是所有的传输策略都是802.3ad适应的，尤其考虑到在802.3ad标准43.2.4章节提及的包乱序问题。不同的实现可能会有不同的适应性。</p><p><em>必要条件：</em></p><ul><li>条件1：ethtool支持获取每个slave的速率和双工设定</li><li> 条件2：switch(交换机)支持IEEE 802.3ad Dynamic link aggregation</li><li> 条件3：大多数switch(交换机)需要经过特定配置才能支持802.3ad模式</li></ul><blockquote><p>特点： IEEE 802.3ad 动态链路聚合，需要交换机支持与配置交换机</p></blockquote><ul><li>第六种模式：mod=5，即：(balance-tlb) Adaptive transmit load balancing（适配器传输负载均衡）</li></ul><p>bond5工作原理：</p><p>不需要任何特别的switch(交换机)支持的通道bonding。在每个slave上根据当前的负载（根据速度计算）分配外出流量。如果正在接受数据的slave出故障了，另一个slave接管失败的slave的MAC地址。</p><p>该模式的必要条件：ethtool支持获取每个slave的速率</p><blockquote><p>特点：该模式的必要条件：ethtool支持获取每个slave的速率。不常用</p></blockquote><ul><li>第七种模式：mod=6，即：(balance-alb) Adaptive load balancing（适配器适应性负载均衡）</li></ul><p>bond6工作原理：</p><p>该模式包含了balance-tlb模式，同时加上针对IPV4流量的接收负载均衡(receive load balance, rlb)，而且不需要任何switch(交换机)的支持。接收负载均衡是通过ARP协商实现的。bonding驱动截获本机发送的ARP应答，并把源硬件地址改写为bond中某个slave的唯一硬件地址，从而使得不同的对端使用不同的硬件地址进行通信。</p><p>来自服务器端的接收流量也会被均衡。当本机发送ARP请求时，bonding驱动把对端的IP信息从ARP包中复制并保存下来。当ARP应答从对端到达时，bonding驱动把它的硬件地址提取出来，并发起一个ARP应答给bond中的某个slave。使用ARP协商进行负载均衡的一个问题是：每次广播ARP请求时都会使用bond的硬件地址，因此对端学习到这个硬件地址后，接收流量将会全部流向当前的slave。这个问题可以通过给所有的对端发送更新 （ARP应答）来解决，应答中包含他们独一无二的硬件地址，从而导致流量重新分布。当新的slave加入到bond中时，或者某个未激活的slave重新 激活时，接收流量也要重新分布。接收的负载被顺序地分布（round robin）在bond中最高速的slave上</p><p>当某个链路被重新接上，或者一个新的slave加入到bond中，接收流量在所有当前激活的slave中全部重新分配，通过使用指定的MAC地址给每个 client发起ARP应答。</p><p>下面介绍的updelay参数必须被设置为某个大于等于switch(交换机)转发延时的值，从而保证发往对端的ARP应答不会被switch(交换机)阻截。</p><p><em>必要条件：</em></p><ul><li>条件1：ethtool支持获取每个slave的速率；</li><li>条件2：底层驱动支持设置某个设备的硬件地址，从而使得总是有个slave(curr_active_slave)使用bond的硬件地址，同时保证每个bond 中的slave都有一个唯一的硬件地址。如果curr_active_slave出故障，它的硬件地址将会被新选出来的 curr_active_slave接管</li></ul><p>其实mod=6与mod=0的区别：mod=6，先把eth0流量占满，再占eth1，….ethX；而mod=0的话，会发现2个口的流量都很稳定，基本一样的带宽。而mod=6，会发现第一个口流量很高，第2个口只占了小部分流量。</p><blockquote><p>特点：有高可用 ( 容错 )和负载均衡的功能，不需要交换机配置 (流量分发到每个接口不是特别均衡)<br>服务器上两张物理网卡em1和em2, 通过绑定成一个逻辑网卡bond0。</p></blockquote><p>注: ip地址配置在bond0上, 物理网卡不需要配置ip地址。</p><h2 id="0x02-配置bond"><a href="#0x02-配置bond" class="headerlink" title="0x02 配置bond"></a>0x02 配置bond</h2><h3 id="关闭和停止NetworkManager服务"><a href="#关闭和停止NetworkManager服务" class="headerlink" title="关闭和停止NetworkManager服务"></a>关闭和停止NetworkManager服务</h3><p>一定要关闭，不关会对做bonding有干扰</p><pre class=" language-bash"><code class="language-bash">systemctl stop NetworkManager.service<span class="token comment" spellcheck="true"># 停止NetworkManager服务</span>systemctl disable NetworkManager.service<span class="token comment" spellcheck="true"># 禁止开机启动NetworkManager服务</span></code></pre><h3 id="加载bonding模块"><a href="#加载bonding模块" class="headerlink" title="加载bonding模块"></a>加载bonding模块</h3><pre class=" language-bash"><code class="language-bash">modprobe --first-time bonding</code></pre><p>没有提示说明加载成功, 如果出现 modprobe: ERROR: could not insert ‘bonding’: Module already in kernel 说明你已经加载了这个模块, 就不用管了</p><p>你也可以使用<code>lsmod | grep bonding</code>查看模块是否被加载</p><pre class=" language-bash"><code class="language-bash">lsmod <span class="token operator">|</span> <span class="token function">grep</span> bonding bonding 136705 0</code></pre><h3 id="创建基于bond0接口的配置文件"><a href="#创建基于bond0接口的配置文件" class="headerlink" title="创建基于bond0接口的配置文件"></a>创建基于bond0接口的配置文件</h3><pre class=" language-bash"><code class="language-bash">/etc/sysconfig/network-scripts/ifcfg-bond0<span class="token comment" spellcheck="true">#修改成如下，根据你的情况:</span>DEVICE<span class="token operator">=</span>bond0TYPE<span class="token operator">=</span>BondIPADDR<span class="token operator">=</span>172.16.0.183NETMASK<span class="token operator">=</span>255.255.255.0GATEWAY<span class="token operator">=</span>172.16.0.1DNS1<span class="token operator">=</span>114.114.114.114USERCTL<span class="token operator">=</span>noBOOTPROTO<span class="token operator">=</span>noneONBOOT<span class="token operator">=</span>yesBONDING_MASTER<span class="token operator">=</span>yesBONDING_OPTS<span class="token operator">=</span><span class="token string">"miimon=100 mode=4 xmit_hash_policy=layer3+4"</span><span class="token comment" spellcheck="true">#上面这个参数如已配置mode在系统文件中可注释</span></code></pre><h3 id="将需求mode配置在系统文件中"><a href="#将需求mode配置在系统文件中" class="headerlink" title="将需求mode配置在系统文件中"></a>将需求mode配置在系统文件中</h3><p>如在bond0接口上已配置不再须要配置</p><pre class=" language-bash"><code class="language-bash">vim /etc/modprobe.d/bond.conf<span class="token comment" spellcheck="true">#添加以下内容：</span><span class="token function">alias</span> bond0 bondingoptions bond0 miimon<span class="token operator">=</span>100 mode<span class="token operator">=</span>4 xmit_hash_policy<span class="token operator">=</span>layer3+4</code></pre><h3 id="修改em1接口的配置文件"><a href="#修改em1接口的配置文件" class="headerlink" title="修改em1接口的配置文件"></a>修改em1接口的配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /etc/sysconfig/network-scripts/ifcfg-em1<span class="token comment" spellcheck="true">#修改成如下:</span>DEVICE<span class="token operator">=</span>em1USERCTL<span class="token operator">=</span>noONBOOT<span class="token operator">=</span>yesMASTER<span class="token operator">=</span>bond0<span class="token comment" spellcheck="true"># 需要和上面的ifcfg-bond0配置文件中的DEVICE的值对应</span>SLAVE<span class="token operator">=</span>yesBOOTPROTO<span class="token operator">=</span>none</code></pre><h3 id="修改em2接口的配置文件"><a href="#修改em2接口的配置文件" class="headerlink" title="修改em2接口的配置文件"></a>修改em2接口的配置文件</h3><pre class=" language-bash"><code class="language-bash">vim /etc/sysconfig/network-scripts/ifcfg-em2<span class="token comment" spellcheck="true">#修改成如下:</span>DEVICE<span class="token operator">=</span>em2USERCTL<span class="token operator">=</span>noONBOOT<span class="token operator">=</span>yesMASTER<span class="token operator">=</span>bond0<span class="token comment" spellcheck="true"># 与 ifcfg-bond0 配置文件中的DEVICE的值对应</span>SLAVE<span class="token operator">=</span>yesBOOTPROTO<span class="token operator">=</span>none</code></pre><h2 id="0x03-测试"><a href="#0x03-测试" class="headerlink" title="0x03 测试"></a>0x03 测试</h2><p>重启网络服务</p><pre class=" language-bash"><code class="language-bash">systemctl restart network<span class="token function">ifconfig</span><span class="token comment" spellcheck="true">#查看网络是否正常，其中bond0接口mac地址与em1等接口相同</span><span class="token function">ifconfig</span> em1 down<span class="token comment" spellcheck="true">#关闭一个接口查看网络是否正常</span><span class="token function">cat</span> /proc/net/bonding/bond0<span class="token comment" spellcheck="true">#查看网卡状态</span><span class="token function">ethtool</span> bond0<span class="token comment" spellcheck="true">#查看速率命令</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> bonding </tag>
            
            <tag> teaming </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>linux主机加固</title>
      <link href="posts/ebe6.html"/>
      <url>posts/ebe6.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-前-言"><a href="#0x01-前-言" class="headerlink" title="0x01 前 言"></a>0x01 前 言</h2><p>Linux系统被应用于大部分企业的服务器上，因此在等保测评中主机加固也是必须要完成的一项环节。<br>由于在之后项目开始要进行主机加固，因此对linux的加固流程进行总结学习。<br>Linux的主机加固主要分为：账号安全、认证授权、协议安全、审计安全。简而言之，就是4A（统一安全管理平台解决方案）。</p><p>这边就使用我自己kali的虚拟机进行试验学习。</p><h2 id="0x02-基础加固"><a href="#0x02-基础加固" class="headerlink" title="0x02 基础加固"></a>0x02 基础加固</h2><h3 id="口令生存期"><a href="#口令生存期" class="headerlink" title="口令生存期"></a>口令生存期</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/login.defs<span class="token comment" spellcheck="true">#在此处对密码的长度、时间、过期警告进行修改</span>PASS_MAX_DAYS   90  <span class="token comment" spellcheck="true">#密码最长过期天数</span>PASS_MIN_DAYS   10   <span class="token comment" spellcheck="true">#密码最小过期天数</span>PASS_WARN_AGE   7   <span class="token comment" spellcheck="true">#密码过期警告天数</span>如果修改设置有最小长度也需要修改PASS_MIN_LEN    8   <span class="token comment" spellcheck="true">#密码最小长度</span></code></pre><h3 id="口令复杂度（很重要）"><a href="#口令复杂度（很重要）" class="headerlink" title="口令复杂度（很重要）"></a>口令复杂度（很重要）</h3><pre class=" language-bash"><code class="language-bash">vim /etc/pam.d/system-auth<span class="token comment" spellcheck="true">#在文件中找到 password requisite  pam_cracklib.so</span><span class="token comment" spellcheck="true">#将其修改为:</span>password requisite  pam_cracklib.so try_first_pass retry<span class="token operator">=</span>3 dcredit<span class="token operator">=</span>-1 lcredit<span class="token operator">=</span>-1 ucredit<span class="token operator">=</span>-1 ocredit<span class="token operator">=</span>-1 minlen<span class="token operator">=</span>8</code></pre><p>备注：至少包含一个数字、一个小写字母、一个大写字母、一个特殊字符、且密码长度&gt;=8</p><h3 id="版本信息"><a href="#版本信息" class="headerlink" title="版本信息"></a>版本信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /proc/version</code></pre><h3 id="限制xx用户登录"><a href="#限制xx用户登录" class="headerlink" title="限制xx用户登录"></a>限制xx用户登录</h3><pre class=" language-bash"><code class="language-bash">vim /etc/hosts.deny<span class="token comment" spellcheck="true">#添加内容：</span>sshd <span class="token keyword">:</span> 192.168.1.1<span class="token comment" spellcheck="true">#禁止192.168.1.1对服务器进行ssh的登陆</span></code></pre><h3 id="检查是否有其他uid-0的用户"><a href="#检查是否有其他uid-0的用户" class="headerlink" title="检查是否有其他uid=0的用户"></a>检查是否有其他uid=0的用户</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">awk</span> -F “：” <span class="token string">'(<span class="token variable">$3</span>==0)  &amp;#123;print  <span class="token variable">$1</span>&amp;#125; '</span> /etc/passwd</code></pre><h3 id="登陆超时限制"><a href="#登陆超时限制" class="headerlink" title="登陆超时限制"></a>登陆超时限制</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> -p /etc/profile /etc/profile_bak <span class="token comment" spellcheck="true">#（备份）</span>gedit /etc/profile<span class="token comment" spellcheck="true">#增加</span>TMOUT<span class="token operator">=</span>300<span class="token function">export</span> TMOUT<span class="token comment" spellcheck="true">#或者</span><span class="token keyword">echo</span> <span class="token string">'export TMOUT=300'</span><span class="token operator">>></span>/etc/profile<span class="token keyword">echo</span> <span class="token string">'readonly TMOUT'</span> <span class="token operator">>></span>/etc/profile<span class="token function">source</span> /etc/profile</code></pre><h3 id="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"><a href="#检查是否使用PAM认证模块禁止wheel组之外的用户su为root" class="headerlink" title="检查是否使用PAM认证模块禁止wheel组之外的用户su为root"></a>检查是否使用PAM认证模块禁止wheel组之外的用户su为root</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/pam.d/su<span class="token comment" spellcheck="true">#新增</span>auth          sufficient     pam_rootok.soauth          required     pam_wheel.so use_uid</code></pre><p>备注：auth与sufficient之间由两个tab建隔开，sufficient与动态库路径之间使用一个tab建隔开</p><h3 id="禁用无用账户"><a href="#禁用无用账户" class="headerlink" title="禁用无用账户"></a>禁用无用账户</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /etc/passwd <span class="token comment" spellcheck="true">#查看口令文件，确认不必要的账号。</span><span class="token function">passwd</span> -l user <span class="token comment" spellcheck="true"># 锁定不必要的账号</span></code></pre><h3 id="账户锁定"><a href="#账户锁定" class="headerlink" title="账户锁定"></a>账户锁定</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/pam.d/system-auth<span class="token comment" spellcheck="true">#在文件中修改或者添加</span>auth required pam_tally.so onerr<span class="token operator">=</span>fail deny<span class="token operator">=</span>3 unlock_time<span class="token operator">=</span>7200<span class="token comment" spellcheck="true">#锁定账户举例：</span><span class="token function">passwd</span> -l bin<span class="token function">passwd</span> -l sys<span class="token function">passwd</span> -l adm</code></pre><h3 id="检查系统弱口令"><a href="#检查系统弱口令" class="headerlink" title="检查系统弱口令"></a>检查系统弱口令</h3><pre class=" language-bash"><code class="language-bash">john /etc/shadow --singlejohn /etc/shadow --wordlist<span class="token operator">=</span>pass.dic</code></pre><p>我这边有报错 就不展示了<br>使用passwd 用户 命令为用户设置复杂的密码</p><h2 id="0x03-软件协议安全"><a href="#0x03-软件协议安全" class="headerlink" title="0x03 软件协议安全"></a>0x03 软件协议安全</h2><h3 id="openssh升级（按需做）"><a href="#openssh升级（按需做）" class="headerlink" title="openssh升级（按需做）"></a>openssh升级（按需做）</h3><pre class=" language-bash"><code class="language-bash">yum update  openssh</code></pre><h3 id="定时任务（防止病毒感染）"><a href="#定时任务（防止病毒感染）" class="headerlink" title="定时任务（防止病毒感染）"></a>定时任务（防止病毒感染）</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#定时任务检查：</span><span class="token function">crontab</span> -l<span class="token comment" spellcheck="true">#一次性任务检查：</span>at -l</code></pre><h3 id="限制ssh登录（看是否需要）"><a href="#限制ssh登录（看是否需要）" class="headerlink" title="限制ssh登录（看是否需要）"></a>限制ssh登录（看是否需要）</h3><pre class=" language-bash"><code class="language-bash">vim /etc/ssh/sshd_config<span class="token comment" spellcheck="true">#查看PermitRootLogin是否为no</span>PermitRootLogin no <span class="token comment" spellcheck="true">#不允许root登陆</span>Protocol 2 <span class="token comment" spellcheck="true">#修改ssh使用的协议版本</span>MaxAuthTries 3 <span class="token comment" spellcheck="true">#修改允许密码错误次数</span><span class="token keyword">echo</span> <span class="token string">"tty1"</span> <span class="token operator">></span> /etc/securettyhmod 700 /root</code></pre><h3 id="限制su为root用户"><a href="#限制su为root用户" class="headerlink" title="限制su为root用户"></a>限制su为root用户</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/pam.d/su<span class="token comment" spellcheck="true">#在头部添加</span>auth required /lib/security/pam_wheel.so group<span class="token operator">=</span>wheel</code></pre><h3 id="禁止root用户登录ftp"><a href="#禁止root用户登录ftp" class="headerlink" title="禁止root用户登录ftp"></a>禁止root用户登录ftp</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#因为我的kali下没有这个文件，因此借鉴一下网上的</span><span class="token function">cat</span> /etc/pam.d/vsftpdAuth required pam_listfile.so item<span class="token operator">=</span>user sense<span class="token operator">=</span>deny file<span class="token operator">=</span>/etc/vsftpd/ftpusers onerr<span class="token operator">=</span>succeed<span class="token comment" spellcheck="true">#其中file=/etc/vsftpd/ftpusers即为当前系统上的ftpusers文件.</span><span class="token keyword">echo</span>  “root”   <span class="token operator">>></span>   /etc/vsftpd/ftpusers</code></pre><h3 id="防止flood攻击"><a href="#防止flood攻击" class="headerlink" title="防止flood攻击"></a>防止flood攻击</h3><pre class=" language-bash"><code class="language-bash">gedit  /etc/sysctl.conf<span class="token comment" spellcheck="true">#增加</span>net.ipv4.tcp_syncookies <span class="token operator">=</span> 1sysctl  -p</code></pre><h3 id="禁ping"><a href="#禁ping" class="headerlink" title="禁ping"></a>禁ping</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">echo</span> 0 <span class="token operator">></span> /proc/sys/net/ipv4/icmp_echo_igore_all</code></pre><h3 id="检查异常进程"><a href="#检查异常进程" class="headerlink" title="检查异常进程"></a>检查异常进程</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">sort</span> -rn -k +3<span class="token operator">|</span><span class="token function">head</span><span class="token comment" spellcheck="true">#检查cpu占用前10</span><span class="token function">ps</span> aux<span class="token operator">|</span><span class="token function">sort</span> -rn -k +4<span class="token operator">|</span><span class="token function">head</span><span class="token comment" spellcheck="true">#检查内存占用前10</span></code></pre><h3 id="关闭无效的服务及端口"><a href="#关闭无效的服务及端口" class="headerlink" title="关闭无效的服务及端口"></a>关闭无效的服务及端口</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#比如邮箱</span><span class="token function">service</span> postfix status<span class="token function">chkconfig</span> --del postfix<span class="token function">chkconfig</span> postfix off<span class="token comment" spellcheck="true">#比如cpus</span><span class="token function">service</span> cups status<span class="token function">chkconfig</span> --del cups<span class="token function">chkconfig</span> cups off</code></pre><h3 id="设置防火墙策略"><a href="#设置防火墙策略" class="headerlink" title="设置防火墙策略"></a>设置防火墙策略</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#或者用防火墙策略：</span><span class="token function">service</span> iptables status<span class="token keyword">echo</span> <span class="token string">'请根据用户实际业务端口占用等情况进行设置！'</span></code></pre><p>例如：</p><pre class=" language-bash"><code class="language-bash">gedit /etc/sysconfig/iptables <span class="token comment" spellcheck="true">#添加如下策略</span>-A INPUT -m state --state NEW -m tcp -p tcp --dport 8080 -j ACCEPT-A INPUT -m state --state NEW -m udp -p udp --dport 8080 -j ACCEPT</code></pre><p>以下举例：</p><pre class=" language-bash"><code class="language-bash">iptables -I INPUT -s 22.48.11.11 -j DROP<span class="token comment" spellcheck="true"># 22.48.11.11的包全部屏蔽</span>iptables -I INPUT -s 22.48.11.0/24 -j DROP<span class="token comment" spellcheck="true">#22.48.11.1到22.48.11.255的访问全部屏蔽</span>iptables -I INPUT -s 192.168.1.1 -p tcp --dport 80 -j DROP<span class="token comment" spellcheck="true"># 192.168.1.1的80端口的访问全部屏蔽</span>iptables -I INPUT -s 192.168.1.0/24 -p tcp --dport 80 -j DROP<span class="token comment" spellcheck="true">#192.168.1.1到192.168.1.255的80端口的访问全部屏蔽</span><span class="token function">service</span> iptabels restart<span class="token comment" spellcheck="true">#重启防火墙</span></code></pre><h3 id="设置历史记录数量"><a href="#设置历史记录数量" class="headerlink" title="设置历史记录数量"></a>设置历史记录数量</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /etc/profile /etc/profile_xu_bak <span class="token comment" spellcheck="true">#（备份）</span><span class="token function">sed</span> -i s/<span class="token string">'HISTSIZE=1000'</span>/<span class="token string">'HISTSIZE=5000'</span>/g /etc/profile  <span class="token comment" spellcheck="true">#（修改）</span><span class="token function">cat</span> /etc/profile <span class="token operator">|</span><span class="token function">grep</span> HISTSIZE<span class="token operator">|</span><span class="token function">grep</span> -v <span class="token function">export</span>   <span class="token comment" spellcheck="true">#（检查）</span></code></pre><h3 id="配置用户最小权限"><a href="#配置用户最小权限" class="headerlink" title="配置用户最小权限"></a>配置用户最小权限</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">chmod</span> 644 /etc/passwd<span class="token function">chmod</span> 400 /etc/shadow<span class="token function">chmod</span> 644 /etc/group</code></pre><h3 id="文件与目录缺省权限控制"><a href="#文件与目录缺省权限控制" class="headerlink" title="文件与目录缺省权限控制"></a>文件与目录缺省权限控制</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cp</span> /etc/profile /etc/profile.bak  <span class="token comment" spellcheck="true">#（备份）</span>gedit  /etc/profile<span class="token comment" spellcheck="true">#增加</span><span class="token function">umask</span> 027<span class="token function">source</span>  /etc/profile</code></pre><h2 id="0x04-日志审计"><a href="#0x04-日志审计" class="headerlink" title="0x04 日志审计"></a>0x04 日志审计</h2><h3 id="启用远程日志功能"><a href="#启用远程日志功能" class="headerlink" title="启用远程日志功能"></a>启用远程日志功能</h3><pre class=" language-bash"><code class="language-bash">gedit /etc/rsyslog.conf*.*         @Syslog日志服务器IP</code></pre><blockquote><p>注意：* 和@之间存在的是tab键，非空格。</p></blockquote><h3 id="检查是否记录安全事件日志"><a href="#检查是否记录安全事件日志" class="headerlink" title="检查是否记录安全事件日志"></a>检查是否记录安全事件日志</h3><pre class=" language-bash"><code class="language-bash">gedit  /etc/syslog.conf 或者 /etc/rsyslog.conf<span class="token comment" spellcheck="true">#在文件中加入如下内容:</span>*.err<span class="token punctuation">;</span>kern.debug<span class="token punctuation">;</span>daemon.notice     /var/log/messages<span class="token function">chmod</span> 640 /var/log/messages<span class="token function">service</span> rsyslog restart</code></pre><h3 id="日志保留半年以上"><a href="#日志保留半年以上" class="headerlink" title="日志保留半年以上"></a>日志保留半年以上</h3><pre class=" language-bash"><code class="language-bash">cp/etc/logrotate.conf /etc/logrotate.conf_xu_bak   <span class="token comment" spellcheck="true">#（备份）</span><span class="token function">sed</span> -i s/<span class="token string">'rotate 4'</span>/<span class="token string">'rotate 12'</span>/g /etc/logrotate.conf   <span class="token comment" spellcheck="true">#（修改）</span><span class="token function">service</span> syslog restart    <span class="token comment" spellcheck="true">#（重启）</span><span class="token function">cat</span> /etc/logrotate.conf <span class="token operator">|</span><span class="token function">grep</span> -v <span class="token string">'#'</span> <span class="token operator">|</span><span class="token function">grep</span> rotate    #（检查）</code></pre>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 主机加固 </tag>
            
            <tag> PAM认证 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker部署jumpserver环境</title>
      <link href="posts/12a1.html"/>
      <url>posts/12a1.html</url>
      
        <content type="html"><![CDATA[<p>在 Docker中部署jumpserver环境也可以分为几次情况</p><ul><li>环境都在一个docker镜像中，这种环境不建议</li><li>环境分为三个docker镜像，jumpserver、mysql、redis各一个镜像</li></ul><p>本次我们部署环境为第二种情况</p><h2 id="0x01-安装-Docker"><a href="#0x01-安装-Docker" class="headerlink" title="0x01 安装 Docker"></a>0x01 安装 Docker</h2><h3 id="配置国内映像源"><a href="#配置国内映像源" class="headerlink" title="配置国内映像源"></a>配置国内映像源</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/docker<span class="token keyword">echo</span> <span class="token string">"&amp;#123;    \"registry-mirrors\" : [    \"https://registry.docker-cn.com\",    \"https://docker.mirrors.ustc.edu.cn\",    \"http://hub-mirror.c.163.com\",    \"https://cr.console.aliyun.com/\"  ]&amp;#125;"</span><span class="token operator">>></span>/etc/docker/daemon.json</code></pre><h3 id="安装配置docker"><a href="#安装配置docker" class="headerlink" title="安装配置docker"></a>安装配置docker</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> yum-utilsyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum makecache fastyum -y <span class="token function">install</span> docker-cesystemctl start docker <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">enable</span> docker</code></pre><h3 id="生成秘钥"><a href="#生成秘钥" class="headerlink" title="生成秘钥"></a>生成秘钥</h3><pre class=" language-bash"><code class="language-bash"><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$SECRET_KEY</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> SECRET_KEY<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /dev/urandom <span class="token operator">|</span> <span class="token function">tr</span> -dc A-Za-z0-9 <span class="token operator">|</span> <span class="token function">head</span> -c 50<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"SECRET_KEY=<span class="token variable">$SECRET_KEY</span>"</span> <span class="token operator">>></span> ~/.bashrc<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$SECRET_KEY</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token variable">$SECRET_KEY</span><span class="token punctuation">;</span> <span class="token keyword">fi</span><span class="token keyword">if</span> <span class="token punctuation">[</span> <span class="token string">"<span class="token variable">$BOOTSTRAP_TOKEN</span>"</span> <span class="token operator">=</span> <span class="token string">""</span> <span class="token punctuation">]</span><span class="token punctuation">;</span> <span class="token keyword">then</span> BOOTSTRAP_TOKEN<span class="token operator">=</span><span class="token variable"><span class="token variable">`</span><span class="token function">cat</span> /dev/urandom <span class="token operator">|</span> <span class="token function">tr</span> -dc A-Za-z0-9 <span class="token operator">|</span> <span class="token function">head</span> -c 16<span class="token variable">`</span></span><span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token string">"BOOTSTRAP_TOKEN=<span class="token variable">$BOOTSTRAP_TOKEN</span>"</span> <span class="token operator">>></span> ~/.bashrc<span class="token punctuation">;</span> <span class="token keyword">echo</span> <span class="token variable">$BOOTSTRAP_TOKEN</span><span class="token punctuation">;</span> <span class="token keyword">else</span> <span class="token keyword">echo</span> <span class="token variable">$BOOTSTRAP_TOKEN</span><span class="token punctuation">;</span> <span class="token keyword">fi</span></code></pre><p>注：生成完 SECRET_KEY 和 BOOTSTRAP_TOKEN 变量后一定要确认一下，如果出现异常将会影响到后面的过程</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看秘钥是否生成</span><span class="token keyword">echo</span> <span class="token variable">$SECRET_KEY</span><span class="token keyword">echo</span> <span class="token variable">$BOOTSTRAP_TOKEN</span></code></pre><p>创建jms容器中的日志及数据挂到宿机的目录</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /home/jumpserver/data<span class="token function">mkdir</span> -p /home/koko/data<span class="token function">mkdir</span> -p /home/nginx/logs<span class="token function">mkdir</span> -p /home/mysql/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;data,logs,conf&amp;#125;</span></code></pre><h2 id="0x02-映像拉取"><a href="#0x02-映像拉取" class="headerlink" title="0x02 映像拉取"></a>0x02 映像拉取</h2><h3 id="mysql-映像拉取"><a href="#mysql-映像拉取" class="headerlink" title="mysql 映像拉取"></a>mysql 映像拉取</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker pull mysql</span>docker run --restart<span class="token operator">=</span>always \--name mysql5.7 -id \-e MYSQL_DATABASE<span class="token operator">=</span><span class="token string">"jumpserver"</span> \-e MYSQL_USER<span class="token operator">=</span><span class="token string">"jumpserver"</span> \-e MYSQL_PASSWORD<span class="token operator">=</span><span class="token string">"Ya0ling"</span> \-e MYSQL_ROOT_PASSWORD<span class="token operator">=</span><span class="token string">"Ya0ling"</span> \-v /home/mysql/data:/var/lib/mysql \-v /home/mysql/logs:/var/log/mysql/ \-v /home/mysql/conf:/etc/mysql/ \-p 3306:3306 -d mysql:5.7.20</code></pre><h3 id="redis-映像拉取"><a href="#redis-映像拉取" class="headerlink" title="redis 映像拉取"></a>redis 映像拉取</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker pull redis</span><span class="token keyword">echo</span> never <span class="token operator">></span> /sys/kernel/mm/transparent_hugepage/enabled<span class="token keyword">echo</span> <span class="token string">"vm.overcommit_memory=1"</span><span class="token operator">>></span>/etc/sysctl.conf<span class="token keyword">echo</span> <span class="token string">"net.core.somaxconn= 1024"</span><span class="token operator">>></span>/etc/sysctl.conf<span class="token keyword">echo</span> <span class="token string">"'echo never > /sys/kernel/mm/transparent_hugepage/enabled'"</span><span class="token operator">>></span>/etc/rc.localsysctl -p<span class="token comment" spellcheck="true"># 拉取映像</span>docker run -p 6379:6379 --name redis -v /home/redis/data:/data -d redis redis-server --requirepass <span class="token string">"Ya0ling"</span> --appendonly <span class="token function">yes</span></code></pre><p>redis容器中登录方式</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#查看映像运行情况</span>docker <span class="token function">ps</span> -a<span class="token comment" spellcheck="true"># 登录 redis 映像</span>docker <span class="token function">exec</span> -it redis /bin/bash<span class="token comment" spellcheck="true"># 映像中登录 redis 查看key</span>redis-cli -h localhost -p 6379<span class="token comment" spellcheck="true"># 输入 redis 密码</span>auth Ya0ling<span class="token comment" spellcheck="true"># 查看 key</span>auth key *<span class="token comment" spellcheck="true">#退出</span><span class="token keyword">exit</span></code></pre><blockquote><p>#注意映射关系修改配置为支持utf8mb4,或使用客户端登录修改jumpserver数据库编码</p></blockquote><pre class=" language-bash"><code class="language-bash">$ vim /data/mysql/conf/mysql.cnf<span class="token punctuation">[</span>mysql<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8mb4root@ubuntu:~<span class="token comment" spellcheck="true"># vim /data/mysql/conf/mysqld.cnf</span><span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>pid-file        <span class="token operator">=</span> /var/run/mysqld/mysqld.pidsocket          <span class="token operator">=</span> /var/run/mysqld/mysqld.sockdatadir         <span class="token operator">=</span> /var/lib/mysql<span class="token comment" spellcheck="true">#log-error      = /var/log/mysql/error.log</span><span class="token comment" spellcheck="true"># Disabling symbolic-links is recommended to prevent assorted security risks</span>symbolic-links<span class="token operator">=</span>0character-set-server<span class="token operator">=</span>utf8mb4</code></pre><p>创建数据库并设置为utf8mb4编码</p><pre class=" language-bash"><code class="language-bash">create database jumpserver default charset <span class="token string">'utf8mb4'</span> collate <span class="token string">'utf8mb4_general_ci'</span><span class="token punctuation">;</span>grant all on jumpserver.* to <span class="token string">'jumpserver'</span>@<span class="token string">'%'</span> identified by <span class="token string">'weakPassword'</span><span class="token punctuation">;</span></code></pre><p>修改数据库的字符集</p><pre class=" language-bash"><code class="language-bash">mysql<span class="token operator">></span>use jumpservermysql<span class="token operator">></span>alter database jumpserver character <span class="token keyword">set</span> utf8mb4<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 查看数据库编码</span>show variables like <span class="token string">'%char%'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 暂时设置编码</span><span class="token keyword">set</span> character_set_client<span class="token operator">=</span>utf8mb4<span class="token punctuation">;</span></code></pre><p>修改my.conf设置编码</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>client<span class="token punctuation">]</span>default-character-set<span class="token operator">=</span>utf8mb4<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>character-set-server<span class="token operator">=</span>utf8mb4collation-server<span class="token operator">=</span>utf8mb4_general_ci</code></pre><h3 id="拉取-jumpserver-映像"><a href="#拉取-jumpserver-映像" class="headerlink" title="拉取 jumpserver 映像"></a>拉取 jumpserver 映像</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#docker pull jms</span>docker run --restart<span class="token operator">=</span>always \--name jms_all -d \-p 80:80 -p 2222:2222 \-e SECRET_KEY<span class="token operator">=</span><span class="token variable">$SECRET_KEY</span> \-e BOOTSTRAP_TOKEN<span class="token operator">=</span><span class="token variable">$BOOTSTRAP_TOKEN</span> \-v /home/jumpserver/data:/opt/jumpserver/data \-v /home/jumpserver/logs:/opt/jumpserver/logs \-v /home/koko/data:/jumpserver/koko/data \-v /home/nginx/logs:/var/log/nginx/ \-e DB_HOST<span class="token operator">=</span><span class="token string">"mysql5.7"</span> \-e DB_PORT<span class="token operator">=</span>3306 \-e DB_USER<span class="token operator">=</span>root \-e DB_PASSWORD<span class="token operator">=</span>Ya0ling \-e DB_NAME<span class="token operator">=</span>jumpserver \--link mysql5.7:mysql \-e REDIS_HOST<span class="token operator">=</span>redis \-e REDIS_PORT<span class="token operator">=</span>6379 \-e REDIS_PASSWORD<span class="token operator">=</span>Ya0ling \--link redis:redis \jumpserver/jms_all:latest</code></pre><p>测试（其他机器连接，连接用户是admin，密码是admin）</p><p>docker容器设置开机自启动：</p><ul><li>–restart具体参数值详细信息</li><li>no - 容器退出时，不重启容器</li><li>on-failure - 只有在非0状态退出时才从新启动容器</li><li>always - 无论退出状态是如何，都重启容器<br>使用 on-failure 策略时指定 Docker 将尝试重新启动容器的最大次数；默认情况下Docker将尝试永远重新启动容器；</li><li>docker run –restart=on-failure:10 redis<br>如果创建容器时未指定 –restart=always ,可通过 update 命令更改；    </li><li>docker update –restart=always 容器ID</li></ul><blockquote><p>如未使用–restart=always选项，在服务器或其他情况导致服务器关机/重启，再次启动容器时需先起MySQL、redis，最后起jms</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> jumpserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>如何重置jumpserver管理员密码</title>
      <link href="posts/96f0.html"/>
      <url>posts/96f0.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-重置管理员密码"><a href="#0x01-重置管理员密码" class="headerlink" title="0x01 重置管理员密码"></a>0x01 重置管理员密码</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 管理密码忘记了或者重置管理员密码</span>$ <span class="token function">source</span> /opt/py3/bin/activate$ <span class="token function">cd</span> /opt/jumpserver/apps$ python manage.py changepassword  admin<span class="token comment" spellcheck="true">#输入新的密码</span>$ password</code></pre><h2 id="0x02-新建超级管理账号（死而复生）"><a href="#0x02-新建超级管理账号（死而复生）" class="headerlink" title="0x02 新建超级管理账号（死而复生）"></a>0x02 新建超级管理账号（死而复生）</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 新建超级用户的命令如下命令</span>$ python manage.py createsuperuser --username<span class="token operator">=</span>user --email<span class="token operator">=</span>user@domain.com<span class="token comment" spellcheck="true"># 设备新用户密码</span>$ password:</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> jumpserver </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>基于Docker部署GitLab环境搭建</title>
      <link href="posts/3184.html"/>
      <url>posts/3184.html</url>
      
        <content type="html"><![CDATA[<p>最近在学习自动化部署的一些内容，涉及到的内容有Docker、Jenkins、Gitlab等内容，今天通过docker玩了一遍gitlab，下面是一些心得。</p><h2 id="0x01-前提条件"><a href="#0x01-前提条件" class="headerlink" title="0x01 前提条件"></a>0x01 前提条件</h2><ul><li>（1）存在docker</li><li>（2）服务器可以联网（外网）</li><li>（3）服务器内存至少4G（内存不够会出现502错误）</li></ul><h2 id="0x02-安装"><a href="#0x02-安装" class="headerlink" title="0x02 安装"></a>0x02 安装</h2><p>本次安装在CentOS7下进行，下面的命令建议复制到记事本后再从记事本复制</p><h3 id="卸载旧版docker"><a href="#卸载旧版docker" class="headerlink" title="卸载旧版docker"></a>卸载旧版docker</h3><pre class=" language-bash"><code class="language-bash">yum remove docker \                  docker-client \                  docker-client-latest \                  docker-common \                  docker-latest \                  docker-latest-logrotate \                  docker-logrotate \                  docker-engine</code></pre><h3 id="配置-docker-拉取源"><a href="#配置-docker-拉取源" class="headerlink" title="配置 docker 拉取源"></a>配置 docker 拉取源</h3><p>如不配置源因网络原因可能会拉取失败，配置国内拉取源提升稳定性。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">mkdir</span> /etc/docker<span class="token keyword">echo</span> <span class="token string">"&amp;#123;    \"registry-mirrors\" : [    \"https://registry.docker-cn.com\",    \"https://docker.mirrors.ustc.edu.cn\",    \"http://hub-mirror.c.163.com\",    \"https://cr.console.aliyun.com/\"  ]&amp;#125;"</span><span class="token operator">>></span>/etc/docker/daemon.json</code></pre><h3 id="安装docker并配置docker源"><a href="#安装docker并配置docker源" class="headerlink" title="安装docker并配置docker源"></a>安装docker并配置docker源</h3><pre class=" language-bash"><code class="language-bash">yum -y <span class="token function">install</span> yum-utilsyum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum-config-manager --enable docker-ce-nightlyyum-config-manager --enable docker-ce-testyum makecache fastyum -y <span class="token function">install</span> docker-ce docker-ce-cli containerd.iosystemctl start docker <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">enable</span> docker</code></pre><h3 id="gitlab镜像拉取"><a href="#gitlab镜像拉取" class="headerlink" title="gitlab镜像拉取"></a>gitlab镜像拉取</h3><blockquote><p>gitlab-ce为稳定版本，后面不填写版本则默认pull最新latest版本</p></blockquote><pre class=" language-bash"><code class="language-bash">$ docker pull gitlab/gitlab-ce:latest$ <span class="token function">mkdir</span> -p /home/gitlab/<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;config,logs,data&amp;#125;</span></code></pre><h2 id="0x03-配置环境"><a href="#0x03-配置环境" class="headerlink" title="0x03 配置环境"></a>0x03 配置环境</h2><h3 id="运行gitlab镜像"><a href="#运行gitlab镜像" class="headerlink" title="运行gitlab镜像"></a>运行gitlab镜像</h3><p>拉取gitlab镜像并配置环境</p><pre class=" language-bash"><code class="language-bash">$ docker run -d \ -p 443:443 \ -p 80:80 \ -p 222:22 \ --name gitlab \ --restart always \ -v /home/gitlab/config:/etc/gitlab \ -v /home/gitlab/logs:/var/log/gitlab \ -v /home/gitlab/data:/var/opt/gitlab \ gitlab/gitlab-ce</code></pre><ul><li>-d：后台运行</li><li>-p：将容器内部端口向外映射</li><li>–name：命名容器名称</li><li>-v：将容器内数据文件夹或者日志、配置等文件夹挂载到宿主机指定目录</li></ul><h3 id="修改配置"><a href="#修改配置" class="headerlink" title="修改配置"></a>修改配置</h3><p>按上面的方式，gitlab容器运行没问题，但在gitlab上创建项目的时候，生成项目的URL访问地址是按容器的hostname来生成的，也就是容器的id。作为gitlab服务器，我们需要一个固定的URL访问地址，于是需要配置gitlab.rb（宿主机路径：<code>/home/gitlab/config/gitlab.rb</code>）。</p><p>gitlab.rb文件内容默认全是注释</p><pre class=" language-bash"><code class="language-bash">$ vim /home/gitlab/config/gitlab.rb<span class="token comment" spellcheck="true"># 配置http协议所使用的访问地址,不加端口号默认为80</span>external_url <span class="token string">'http://192.168.199.231'</span><span class="token comment" spellcheck="true"># 配置ssh协议所使用的访问地址和端口</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_ssh_host'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'192.168.199.231'</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_shell_ssh_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 222<span class="token comment" spellcheck="true"># 此端口是run时22端口映射的222端口</span>:wq <span class="token comment" spellcheck="true">#保存配置文件并退出</span></code></pre><p>修改邮箱</p><p>在gitlab.rb文件的最后添加如下代码</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 是否启用</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span><span class="token comment" spellcheck="true"># SMTP服务的地址</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_address'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span><span class="token comment" spellcheck="true"># 端口</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_port'</span><span class="token punctuation">]</span> <span class="token operator">=</span> 465<span class="token comment" spellcheck="true"># 你的QQ邮箱（发送账号）</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_user_name'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"xxx@qq.com"</span><span class="token comment" spellcheck="true"># 授权码</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_password'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"********"</span><span class="token comment" spellcheck="true"># 域名</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_domain'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"smtp.qq.com"</span><span class="token comment" spellcheck="true"># 登录验证</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_authentication'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"login"</span><span class="token comment" spellcheck="true"># 使用了465端口，就需要配置下面三项</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_enable_starttls_auto'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_tls'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token boolean">true</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'smtp_openssl_verify_mode'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'none'</span><span class="token comment" spellcheck="true"># 你的QQ邮箱（发送账号）</span>gitlab_rails<span class="token punctuation">[</span><span class="token string">'gitlab_email_from'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">'xxx@qq.com'</span></code></pre><p>应用配置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure</code></pre><p>修改port</p><p>修改gitlab.yml文件</p><pre class=" language-bash"><code class="language-bash">// 文件路径 /opt/gitlab/embedded/service/gitlab-rails/config<span class="token function">sudo</span> <span class="token function">cd</span> /opt/gitlab/embedded/service/gitlab-rails/configvim gitlab.yml// 修改port 为8090</code></pre><p>重启gitlab容器</p><pre class=" language-bash"><code class="language-bash">$ docker restart gitlab<span class="token comment" spellcheck="true"># 查看启动情况</span>$ docker <span class="token function">ps</span><span class="token comment" spellcheck="true"># 登录容器</span>$ docker <span class="token function">exec</span> -it gitlab <span class="token comment" spellcheck="true">#!/usr/bin/env bash</span></code></pre><p>验证邮箱服务</p><pre class=" language-bash"><code class="language-bash">// 在容器中进入命令行<span class="token function">sudo</span> gitlab-rails console// 测试邮件发送<span class="token function">sudo</span> Notify.test_email<span class="token punctuation">(</span><span class="token string">"xxx@163.com"</span>,<span class="token string">"title"</span>,<span class="token string">"gitlab"</span><span class="token punctuation">)</span>.deliver_now// 退出命令行<span class="token function">sudo</span> <span class="token keyword">exit</span>// 退出容器<span class="token function">sudo</span> <span class="token keyword">exit</span></code></pre><p>此时项目的仓库地址就变了。如果ssh端口地址不是默认的22，就会加上ssh:// 协议头</p><p>打开浏览器输入ip地址(因为我的gitlab端口为80，所以浏览器url不用输入端口号，如果端口号不是80，则打开为：ip:端口号)</p><p>第一次进入要输入新的root用户密码，设置好之后确定就行<br>下面我们就可以新建一个项目了，点击Create a project<br>创建项目。</p>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> GitLab </tag>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>安装配置Docker环境</title>
      <link href="posts/5d00.html"/>
      <url>posts/5d00.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-Docker-简介"><a href="#0x01-Docker-简介" class="headerlink" title="0x01 Docker 简介"></a>0x01 Docker 简介</h2><p>Docker是一个软件集装箱化平台，这意味着您可以构建应用程序，将它与其依赖关系一起打包到一个容器中，然后这些容器可以很容易地运送到其他机器上运行。<br>但什么是集装箱？集装化（也称为基于容器的虚拟化和应用程序集装箱化）是用于部署和运行分布式应用程序的OS级虚拟化方法，无需为每个应用程序启动整个VM。 相反，多个独立的系统（称为容器）在单个控制主机上运行并访问单个内核。<br>容器映像是一个轻量级的、独立的、可执行的软件包，它包括运行它所需的一切：代码、运行时、系统工具、系统库设置。<br>所以主要目标是将软件打包成标准化的单元进行开发，发货和部署。</p><h2 id="0x02-安装前配置"><a href="#0x02-安装前配置" class="headerlink" title="0x02 安装前配置"></a>0x02 安装前配置</h2><h3 id="Docker版本检查"><a href="#Docker版本检查" class="headerlink" title="Docker版本检查"></a>Docker版本检查</h3><p>docker要求CentOS 系统的内核版本高于 3.10 ，内存须 4G 以上，安装之前首先要验证你的CentOS 版本是否支持 Docker 。</p><p>通过uname -r 命令查看你当前的内核版本（建议使用xshell连接虚拟机进行命令操作）：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">uname</span> -r</code></pre><h3 id="更新系统"><a href="#更新系统" class="headerlink" title="更新系统"></a>更新系统</h3><p>使用root 权限登录 CentOS。确保 yum 包更新到最新。</p><pre class=" language-bash"><code class="language-bash">$ yum -y update</code></pre><h3 id="卸载旧版本（如果安装过就版本的话）"><a href="#卸载旧版本（如果安装过就版本的话）" class="headerlink" title="卸载旧版本（如果安装过就版本的话）"></a>卸载旧版本（如果安装过就版本的话）</h3><pre class=" language-bash"><code class="language-bash">$ yum remove docker \             docker-common \             docker-selinux \             docker-engine \             docker-client \             docker-client-latest \             docker-latest \             docker-latest-logrotate \             docker-logrotate</code></pre><p>如果安装过旧版本docker，有就会卸载当前版本；如果没安装过，运行上面的命令也没关系，只是提示未安装</p><h3 id="安装需要的软件包"><a href="#安装需要的软件包" class="headerlink" title="安装需要的软件包"></a>安装需要的软件包</h3><p>yum-util 提供yum-config-manager功能，另外两个是devicemapper驱动依赖的</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y yum-utils device-mapper-persistent-data lvm2</code></pre><h3 id="设置yum源"><a href="#设置yum源" class="headerlink" title="设置yum源"></a>设置yum源</h3><p>设置国内常用源，如清华镜像仓库，速度很快<br>如果没有安装wget则安装，如已安装则会跳过</p><pre class=" language-bash"><code class="language-bash">yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repoyum-config-manager --enable docker-ce-nightlyyum-config-manager --enable docker-ce-test<span class="token comment" spellcheck="true">#清缓存</span>yum makecache fast</code></pre><h2 id="0x03-安装-docker-ce"><a href="#0x03-安装-docker-ce" class="headerlink" title="0x03 安装 docker-ce"></a>0x03 安装 docker-ce</h2><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#安装 docker-ce</span>yum -y <span class="token function">install</span> docker-ce docker-ce-cli containerd.iosystemctl start docker <span class="token operator">&amp;&amp;</span> systemctl <span class="token function">enable</span> docker</code></pre><h3 id="搜索安装指定版本"><a href="#搜索安装指定版本" class="headerlink" title="搜索安装指定版本"></a>搜索安装指定版本</h3><p>查看源中所有版本 docker-ce</p><pre class=" language-bash"><code class="language-bash">yum list docker-ce --showduplicates <span class="token operator">|</span> <span class="token function">sort</span> -r<span class="token comment" spellcheck="true"># 安装指定版本 docker</span>yum <span class="token function">install</span> docker-ce-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> docker-ce-cli-<span class="token operator">&lt;</span>VERSION_STRING<span class="token operator">></span> containerd.io</code></pre><h3 id="搜索映像"><a href="#搜索映像" class="headerlink" title="搜索映像"></a>搜索映像</h3><pre class=" language-bash"><code class="language-bash">docker search mysql</code></pre><h3 id="运行hello-world-映像来验证是否正确安装了Docker-Engine"><a href="#运行hello-world-映像来验证是否正确安装了Docker-Engine" class="headerlink" title="运行hello-world 映像来验证是否正确安装了Docker Engine"></a>运行hello-world 映像来验证是否正确安装了Docker Engine</h3><pre class=" language-bash"><code class="language-bash">docker run hello-world</code></pre><h4 id="下载映像后面可加版本号"><a href="#下载映像后面可加版本号" class="headerlink" title="下载映像后面可加版本号"></a>下载映像后面可加版本号</h4><pre class=" language-bash"><code class="language-bash">docker pull mysql:5.7</code></pre><h3 id="查看运行中的映像"><a href="#查看运行中的映像" class="headerlink" title="查看运行中的映像"></a>查看运行中的映像</h3><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span></code></pre><h3 id="查看本地所有映像"><a href="#查看本地所有映像" class="headerlink" title="查看本地所有映像"></a>查看本地所有映像</h3><pre class=" language-bash"><code class="language-bash">docker <span class="token function">ps</span> -a</code></pre><h3 id="查看本地映像"><a href="#查看本地映像" class="headerlink" title="查看本地映像"></a>查看本地映像</h3><pre class=" language-bash"><code class="language-bash">docker images</code></pre><h3 id="停止运行的映像"><a href="#停止运行的映像" class="headerlink" title="停止运行的映像"></a>停止运行的映像</h3><pre class=" language-bash"><code class="language-bash">docker stop name/id</code></pre><h3 id="启动映像"><a href="#启动映像" class="headerlink" title="启动映像"></a>启动映像</h3><pre class=" language-bash"><code class="language-bash">docker start name/id</code></pre><h3 id="登录docker映像"><a href="#登录docker映像" class="headerlink" title="登录docker映像"></a>登录docker映像</h3><pre class=" language-bash"><code class="language-bash">docker <span class="token function">exec</span> -it name/id  /bin/sh</code></pre><h3 id="卸载Docker"><a href="#卸载Docker" class="headerlink" title="卸载Docker"></a>卸载Docker</h3><pre class=" language-bash"><code class="language-bash">yum remove docker-ce docker-ce-cli containerd.io</code></pre><h3 id="删除所有图像，容器和卷"><a href="#删除所有图像，容器和卷" class="headerlink" title="删除所有图像，容器和卷"></a>删除所有图像，容器和卷</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">rm</span> -rf /var/lib/docker</code></pre>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS8编译安装配置MySQL8数据库</title>
      <link href="posts/a7ac.html"/>
      <url>posts/a7ac.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 8.1</p><p>MySQL版本：MySQL-8.0.18</p><h2 id="环境配置"><a href="#环境配置" class="headerlink" title="环境配置"></a>环境配置</h2><h3 id="1、系统安装"><a href="#1、系统安装" class="headerlink" title="1、系统安装"></a>1、系统安装</h3><p>略</p><h3 id="防火墙配置"><a href="#防火墙配置" class="headerlink" title="防火墙配置"></a>防火墙配置</h3><p>CentOS 从7.x开始默认使用的是firewall作为防火墙，这里改为iptables防火墙。</p><h4 id="1、关闭firewall"><a href="#1、关闭firewall" class="headerlink" title="1、关闭firewall"></a>1、关闭firewall</h4><pre class=" language-bash"><code class="language-bash">systemctl stop firewalld.service <span class="token comment" spellcheck="true">#停止firewall</span>systemctl disable firewalld.service <span class="token comment" spellcheck="true">#禁止firewall开机启动</span>systemctl mask firewalldsystemctl stop firewalldyum remove firewalld</code></pre><h4 id="2、安装iptables防火墙"><a href="#2、安装iptables防火墙" class="headerlink" title="2、安装iptables防火墙"></a>2、安装iptables防火墙</h4><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> iptables-services <span class="token comment" spellcheck="true">#安装</span><span class="token function">vi</span> /etc/sysconfig/iptables <span class="token comment" spellcheck="true">#编辑防火墙配置文件，开发mysql默认端口3306</span>-A INPUT -p tcp -m state --state NEW -m tcp --dport 3306 -j ACCEPTsystemctl restart iptables.service <span class="token comment" spellcheck="true">#最后重启防火墙使配置生效</span>systemctl <span class="token function">enable</span> iptables.service <span class="token comment" spellcheck="true">#设置防火墙开机启动</span>/usr/libexec/iptables/iptables.init restart <span class="token comment" spellcheck="true">#重启防火墙</span></code></pre><h3 id="关闭SELINUX"><a href="#关闭SELINUX" class="headerlink" title="关闭SELINUX"></a>关闭SELINUX</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/selinux/config<span class="token comment" spellcheck="true">#SELINUX=enforcing #注释掉</span><span class="token comment" spellcheck="true">#SELINUXTYPE=targeted #注释掉</span>SELINUX<span class="token operator">=</span>disabled <span class="token comment" spellcheck="true">#增加</span>:wq<span class="token operator">!</span> <span class="token comment" spellcheck="true">#保存退出</span>setenforce 0 <span class="token comment" spellcheck="true">#使配置立即生效</span></code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>软件源代码包存放位置：<code>/usr/local/src</code></p><p>源码包编译安装位置：<code>/usr/local/软件名字</code></p><h3 id="下载软件包"><a href="#下载软件包" class="headerlink" title="下载软件包"></a>下载软件包</h3><h4 id="1、mysql"><a href="#1、mysql" class="headerlink" title="1、mysql"></a>1、mysql</h4><p><code>https://cdn.mysql.com//Downloads/MySQL-8.0/mysql-8.0.18.tar.gz</code></p><h4 id="2、rpcsvc-proto-CentOS-8编译安装MySQL8需要"><a href="#2、rpcsvc-proto-CentOS-8编译安装MySQL8需要" class="headerlink" title="2、rpcsvc-proto #CentOS 8编译安装MySQL8需要"></a>2、rpcsvc-proto #CentOS 8编译安装MySQL8需要</h4><p><code>https://github.com/thkukuk/rpcsvc-proto/releases/download/v1.4/rpcsvc-proto-1.4.tar.gz</code></p><h4 id="3、boost-1-70-0-CentOS-8编译安装MySQL8需要"><a href="#3、boost-1-70-0-CentOS-8编译安装MySQL8需要" class="headerlink" title="3、boost_1_70_0 #CentOS 8编译安装MySQL8需要"></a>3、boost_1_70_0 #CentOS 8编译安装MySQL8需要</h4><p><code>https://dl.bintray.com/boostorg/release/1.70.0/source/boost_1_70_0.tar.gz</code></p><h4 id="4、cmake-编译安装MySQL需要"><a href="#4、cmake-编译安装MySQL需要" class="headerlink" title="4、cmake #编译安装MySQL需要"></a>4、cmake #编译安装MySQL需要</h4><p><code>https://github.com/Kitware/CMake/releases/download/v3.15.4/cmake-3.15.4.tar.gz</code></p><h4 id="五、安装编译工具及库文件（使用yum命令安装）"><a href="#五、安装编译工具及库文件（使用yum命令安装）" class="headerlink" title="五、安装编译工具及库文件（使用yum命令安装）"></a>五、安装编译工具及库文件（使用yum命令安装）</h4><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> apr* autoconf automake bison <span class="token function">bzip2</span> bzip2* cpp curl curl-devel fontconfig fontconfig-devel freetype-devel gcc gcc-c++ gd gd-devel gettext gettext-devel glibc kernel kernel-headers keyutils keyutils-libs-devel krb5-devel libcom_err-devel libpng libpng-devel libjpeg* libsepol-devel libselinux-devel libstdc++-devel libtool* libgomp libxml2 libxml2-devel libXpm* libxml* libXaw-devel libXmu-devel libtiff libtiff* <span class="token function">make</span> openssl openssl-devel patch pcre-devel perl php-common php-gd policycoreutils telnet <span class="token function">wget</span> zlib-devel ncurses-devel libtirpc-devel gtk* ntpstat na* bison*</code></pre><h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><p>以下是用putty工具远程登录到服务器，在命令行下面操作的</p><h4 id="一、安装MySQL"><a href="#一、安装MySQL" class="headerlink" title="一、安装MySQL"></a>一、安装MySQL</h4><h5 id="1、安装rpcsvc-proto"><a href="#1、安装rpcsvc-proto" class="headerlink" title="1、安装rpcsvc-proto"></a>1、安装rpcsvc-proto</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/src<span class="token function">tar</span> zxvf rpcsvc-proto-1.4.tar.gz<span class="token function">cd</span> rpcsvc-proto-1.4./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><h5 id="2、安装cmake"><a href="#2、安装cmake" class="headerlink" title="2、安装cmake"></a>2、安装cmake</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/src<span class="token function">tar</span> zxvf cmake-3.15.4.tar.gz<span class="token function">cd</span> cmake-3.15.4./configure<span class="token function">make</span><span class="token function">make</span> <span class="token function">install</span></code></pre><h5 id="3、安装MySQL"><a href="#3、安装MySQL" class="headerlink" title="3、安装MySQL"></a>3、安装MySQL</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/src<span class="token function">mkdir</span> -p /usr/local/boost<span class="token function">cp</span> boost_1_70_0.tar.gz /usr/local/boost<span class="token function">groupadd</span> mysql <span class="token comment" spellcheck="true">#添加mysql组</span><span class="token function">useradd</span> -g mysql mysql -s /bin/false <span class="token comment" spellcheck="true">#创建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span><span class="token function">mkdir</span> -p /data/mysql <span class="token comment" spellcheck="true">#创建MySQL数据库存放目录</span><span class="token function">chown</span> -R mysql:mysql /data/mysql <span class="token comment" spellcheck="true">#设置MySQL数据库存放目录权限</span><span class="token function">mkdir</span> -p /usr/local/mysql <span class="token comment" spellcheck="true">#创建MySQL安装目录</span><span class="token function">cd</span> /usr/local/src <span class="token comment" spellcheck="true">#进入软件包存放目录</span><span class="token function">tar</span> zxvf mysql-8.0.18.tar.gz <span class="token comment" spellcheck="true">#解压</span><span class="token function">cd</span> mysql-8.0.18 <span class="token comment" spellcheck="true">#进入目录</span>cmake <span class="token keyword">.</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>/usr/local/mysql -DINSTALL_DATADIR<span class="token operator">=</span>/data/mysql -DMYSQL_USER<span class="token operator">=</span>mysql -DMYSQL_UNIX_ADDR<span class="token operator">=</span>/tmp/mysqld.sock -DDEFAULT_CHARSET<span class="token operator">=</span>utf8 -DDEFAULT_COLLATION<span class="token operator">=</span>utf8_general_ci -DWITH_INNOBASE_STORAGE_ENGINE<span class="token operator">=</span>1 -DWITH_EMBEDDED_SERVER<span class="token operator">=</span>1 -DFORCE_INSOURCE_BUILD<span class="token operator">=</span>1 -DWITH_MYISAM_STORAGE_ENGINE<span class="token operator">=</span>1 -DENABLED_LOCAL_INFILE<span class="token operator">=</span>1 -DEXTRA_CHARSETS<span class="token operator">=</span>all -DWITH_BOOST<span class="token operator">=</span>/usr/local/boost<span class="token function">make</span> <span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span> <span class="token function">install</span> <span class="token comment" spellcheck="true">#安装</span><span class="token function">rm</span> -rf /etc/my.cnf  <span class="token comment" spellcheck="true">#删除系统默认的配置文件（如果默认没有就不用删除）</span><span class="token function">cd</span> /usr/local/mysql <span class="token comment" spellcheck="true">#进入MySQL安装目录</span>./bin/mysqld --user<span class="token operator">=</span>mysql --initialize --basedir<span class="token operator">=</span>/usr/local/mysql --datadir<span class="token operator">=</span>/data/mysql <span class="token comment" spellcheck="true">#生成mysql系统数据库 --initialize表示默认生成密码, --initialize-insecure 表示不生成密码, 密码为空。</span><span class="token comment" spellcheck="true">#看到这一行[Note] [MY-010454] [Server] A temporary password is generated for root@localhost: !w1YKyVFFa?-</span></code></pre><p>记录下自动生成的mysql管理员root账号登录密码<code>!w1YKyVFFa?-</code></p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /usr/local/mysql/my.cnf<span class="token comment" spellcheck="true">#mysql 8.x默认没有配置文件，我们自己创建一个。</span><span class="token punctuation">[</span>client<span class="token punctuation">]</span>port<span class="token operator">=</span>3306socket<span class="token operator">=</span>/tmp/mysql.sock<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>port<span class="token operator">=</span>3306user <span class="token operator">=</span> mysqlsocket<span class="token operator">=</span>/tmp/mysql.socktmpdir <span class="token operator">=</span> /tmpkey_buffer_size<span class="token operator">=</span>16Mmax_allowed_packet<span class="token operator">=</span>128Mdefault_authentication_plugin<span class="token operator">=</span>mysql_native_password<span class="token comment" spellcheck="true">#设置加密方式为mysql_native_password，MySQL 8.0默认使用caching_sha2_password加密。</span>open_files_limit <span class="token operator">=</span> 60000explicit_defaults_for_timestampserver-id <span class="token operator">=</span> 1character-set-server <span class="token operator">=</span> utf8federatedmax_connections <span class="token operator">=</span> 1000max_connect_errors <span class="token operator">=</span> 100000interactive_timeout <span class="token operator">=</span> 86400wait_timeout <span class="token operator">=</span> 86400sync_binlog<span class="token operator">=</span>0back_log<span class="token operator">=</span>100default-storage-engine <span class="token operator">=</span> InnoDBlog_slave_updates <span class="token operator">=</span> 1<span class="token punctuation">[</span>mysqldump<span class="token punctuation">]</span>quick<span class="token punctuation">[</span>client<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># The following password will be sent to all standard MySQL clients</span>password<span class="token operator">=</span><span class="token string">"my password"</span><span class="token punctuation">[</span>mysqld-8.0<span class="token punctuation">]</span>sql_mode<span class="token operator">=</span>TRADITIONAL<span class="token punctuation">[</span>mysqladmin<span class="token punctuation">]</span>force<span class="token punctuation">[</span>mysqld<span class="token punctuation">]</span>key_buffer_size<span class="token operator">=</span>16M</code></pre><p>:wq! #保存退出</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/mysql/my.cnf /etc/my.cnf  <span class="token comment" spellcheck="true">#添加到/etc目录的软连接</span><span class="token function">cp</span> /usr/local/mysql/support-files/mysql.server /etc/rc.d/init.d/mysqld <span class="token comment" spellcheck="true">#把Mysql加入系统启动</span><span class="token function">chmod</span> 755 /etc/init.d/mysqld <span class="token comment" spellcheck="true">#增加执行权限</span><span class="token function">chkconfig</span> mysqld on <span class="token comment" spellcheck="true">#加入开机启动</span></code></pre><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/rc.d/init.d/mysqld <span class="token comment" spellcheck="true">#编辑</span>basedir<span class="token operator">=</span>/usr/local/mysql <span class="token comment" spellcheck="true">#MySQL程序安装路径</span>datadir<span class="token operator">=</span>/data/mysql <span class="token comment" spellcheck="true">#MySQl数据库存放目录</span></code></pre><p>:wq! #保存退出</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> mysqld start <span class="token comment" spellcheck="true">#启动</span><span class="token function">vi</span> /etc/profile <span class="token comment" spellcheck="true">#把mysql服务加入系统环境变量：在最后添加下面这一行</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/mysql/bin</code></pre><p>:wq! #保存退出</p><pre class=" language-bash"><code class="language-bash"><span class="token function">source</span> /etc/profile <span class="token comment" spellcheck="true">#使配置立刻生效</span></code></pre><p>下面这两行把myslq的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定mysql的库文件地址。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql<span class="token function">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql<span class="token function">mkdir</span> /var/lib/mysql <span class="token comment" spellcheck="true">#创建目录</span><span class="token function">ln</span> -s /tmp/mysql.sock /var/lib/mysql/mysql.sock <span class="token comment" spellcheck="true">#添加软链接</span></code></pre><pre class=" language-bash"><code class="language-bash">mysql -u root -p  <span class="token comment" spellcheck="true">#输入之前生成的密码!w1YKyVFFa?-，回车</span>ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'123456'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span> <span class="token comment" spellcheck="true">#修改密码，NEVER表示密码永不过期</span>ALTER USER <span class="token string">'root'</span>@<span class="token string">'localhost'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'123456'</span> PASSWORD EXPIRE NEVER<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#使用WITH mysql_native_password加密</span><span class="token comment" spellcheck="true">#MySQL 8.0加密方式从mysql_native_password 更改为 caching_sha2_password，mysql8.x之前的客户端远程连接可能报错：authentication plugin caching_sha2</span>flush privileges<span class="token punctuation">;</span>  <span class="token comment" spellcheck="true">#刷新系统授权表</span><span class="token keyword">exit</span>  <span class="token comment" spellcheck="true">#退出mysql控制台</span></code></pre><h3 id="二、创建MySQL数据库、添加用户并授权"><a href="#二、创建MySQL数据库、添加用户并授权" class="headerlink" title="二、创建MySQL数据库、添加用户并授权"></a>二、创建MySQL数据库、添加用户并授权</h3><p>数据库名称：aiotlab-db<br>数据库用户名：aiotlab<br>数据库密码：aiotlab<br>授权aiotlab用户对aiotlab-db具有全部操作权限<br>继续在mysql控制台操作</p><pre class=" language-bash"><code class="language-bash">mysql -u root -p<span class="token comment" spellcheck="true">#输入刚刚修改过的密码123456，回车</span>Create DATABASE IF NOT EXISTS aiotlab-db default charset utf8 COLLATE utf8_general_ci<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建数据库</span>CREATE USER <span class="token string">'aiotlab'</span>@<span class="token string">'localhost'</span> IDENTIFIED BY <span class="token string">'aiotlab'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#创建用户</span>CREATE USER <span class="token string">'aiotlab'</span>@<span class="token string">'127.0.0.1'</span> IDENTIFIED WITH mysql_native_password BY <span class="token string">'aiotlab'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#加密方式为mysql_native_password</span>grant all privileges on aiotlab-db.* to <span class="token string">'aiotlab'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#授权用户osyunwei.com对数据库www.osyunwei.com具有全部操作权限</span>grant all privileges on aiotlab-db.* to <span class="token string">'aiotlab'</span>@<span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#授权用户</span>GRANT ALL PRIVILEGES ON *.* TO <span class="token string">'root'</span>@<span class="token string">'localhost'</span> WITH GRANT OPTION<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#授权root用户具有全部数据库本地权限</span></code></pre><p>MySQL5.7版本后要授权用户对所有数据库有SUPER权限，否则上一步对用户的授权只能连接但无任何操作权限。</p><pre class=" language-bash"><code class="language-bash">grant SUPER on *.* to <span class="token string">'aiotlab'</span>@<span class="token string">'localhost'</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">#授予用户对所有数据库有SUPER权限，否则只能连接无任何操作权限。</span>grant SUPER on *.* to <span class="token string">'aiotlab'</span>@<span class="token string">'127.0.0.1'</span><span class="token punctuation">;</span>flush privileges<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#刷新系统授权表</span><span class="token keyword">exit</span> <span class="token comment" spellcheck="true">#退出mysql控制台</span><span class="token function">service</span> mysqld restart<span class="token comment" spellcheck="true">#重启mysql数据库</span></code></pre><p>至此，CentOS 8.x安装MySQL 8.x并创建数据库添加用户对用户进行授权完成。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>修改MySQL数据库字符编码为utf8mb4解决中文乱码</title>
      <link href="posts/688b.html"/>
      <url>posts/688b.html</url>
      
        <content type="html"><![CDATA[<h3 id="故障情况"><a href="#故障情况" class="headerlink" title="故障情况"></a>故障情况</h3><p>由于MySQL编码原因会导致数据库出现乱码。修改为UTF-8后发现将emoji 文字直接写入 SQL 中，执行 insert 语句报错。</p><h3 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h3><p>修改MySQL数据库字符编码为utf8mb4，utf8mb4包含全世界所有国家需要用到的字符,是国际编码。</p><h3 id="具体操作"><a href="#具体操作" class="headerlink" title="具体操作"></a>具体操作</h3><h4 id="1、进入MySQL控制台"><a href="#1、进入MySQL控制台" class="headerlink" title="1、进入MySQL控制台"></a>1、进入MySQL控制台</h4><pre class=" language-bash"><code class="language-bash">mysql -uroot -p<span class="token comment" spellcheck="true">#输入密码进入</span>status<span class="token punctuation">;</span><span class="token comment" spellcheck="true">#查看当前MySQL运行状态，</span>Server characterset: latin1Db characterset: latin1Client characterset: utf8mb4Conn. characterset: utf8mb4</code></pre><p>默认客户端和服务器端都用了latin1编码，所以会出现乱码。</p><h4 id="2、修改mysql配置文件"><a href="#2、修改mysql配置文件" class="headerlink" title="2、修改mysql配置文件"></a>2、修改mysql配置文件</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/my.cnf<span class="token comment" spellcheck="true">#在[client]段增加下面代码</span>default-character-set<span class="token operator">=</span>utf8mb4<span class="token comment" spellcheck="true">#在[mysqld]段增加下面的代码</span>default-storage-engine<span class="token operator">=</span>INNODBcharacter-set-server<span class="token operator">=</span>utf8mb4collation-server<span class="token operator">=</span>utf8mb4_general_ci:wq<span class="token operator">!</span> <span class="token comment" spellcheck="true">#保存退出</span></code></pre><h4 id="3、service-mysqld-restart-重启MySQL"><a href="#3、service-mysqld-restart-重启MySQL" class="headerlink" title="3、service mysqld restart #重启MySQL"></a>3、service mysqld restart #重启MySQL</h4><p>再次进入MySQL控制台查看字符编码</p><pre class=" language-bash"><code class="language-bash">status<span class="token punctuation">;</span>Server characterset: utf8mb4Db characterset: utf8mb4Client characterset: utf8mb4Conn. characterset: utf8mb4<span class="token comment" spellcheck="true">#查看MySQL字符集</span>show variables like <span class="token string">'character_set_%'</span><span class="token punctuation">;</span></code></pre><p>MySQL数据库字符集编码修改完成！</p><p><code>参数说明</code></p><ul><li>character_set_client：客户端请求数据的字符集。</li><li>character_set_connection：从客户端接收到数据，然后传输的字符集。</li><li>character_set_database：默认数据库的字符集，无论默认数据库如何改变，都是这个字符集；如果没有默认数据库，使character_set_server指定的字符集，此参数无需设置。</li><li>character_set_filesystem：把操作系统上文件名转化成此字符集，即把character_set_client转换character_set_filesystem，默认binary即可。</li><li>character_set_results：结果集的字符集。</li><li>character_set_server：数据库服务器的默认字符集。</li><li>character_set_system：这个值总是utf8mb4，不需要设置，存储系统元数据的字符集。</li></ul><p><code>备注：</code><br>MySQL 5.5之前的版本设置办法：<br>在[client]段下添加</p><pre class=" language-bash"><code class="language-bash">default-character-set<span class="token operator">=</span>utf8mb4</code></pre><p>在[mysqld]段下添加</p><pre class=" language-bash"><code class="language-bash">default-character-set<span class="token operator">=</span>utf8mb4</code></pre><p>注意，如果修改后不能启动报错，把<code>[mysqld]</code>段下<code>default-character-set=utf8</code>改为<code>character_set_server=utf8mb4</code>，取消<code>[client]</code>段的设置。</p><p>创建数据库的命令：</p><pre class=" language-bash"><code class="language-bash">Create DATABASE IF NOT EXISTS mydata default charset utf8mb4 COLLATE utf8mb4_general_ci<span class="token punctuation">;</span></code></pre><p>至此，修改MySQL数据库字符编码为utf8mb4解决中文乱码问题。</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>常用操作系统镜像下载</title>
      <link href="posts/os.html"/>
      <url>posts/os.html</url>
      
        <content type="html"><![CDATA[<p>目前最常见的操作系统镜像下载地址，包含 Windows、CentOS、RHEL等桌面及服务器版操作系统。</p><ul><li>建议下载最新日期版本，下载后请检验SHA1值。</li></ul><h3 id="Windows-操作系统微软官方镜像"><a href="#Windows-操作系统微软官方镜像" class="headerlink" title="Windows 操作系统微软官方镜像"></a>Windows 操作系统微软官方镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">版本号</th><th align="center">发布日期</th><th align="center">系统大小(ISO)</th><th align="center">ISO文件SHA-1</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Windows 10 2004 简体中文商业版 x64</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">4.95G</td><td align="center">BF0874FFE0FAE1C557E65F49B83B5E83BE7DBF24</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 简体中文商业版 x86</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">3.55G</td><td align="center">3DF30BEE3D105E5B5F70204D3E7402FA61C4D937</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 简体中文消费者版 x64</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">5.05G</td><td align="center">B5121926EF2FBBA7F198E30F3D7F293A20A1C144</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 简体中文消费者版 x86</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">3.63G</td><td align="center">FBF3932595AF8ACE99FF9F1DAA353F5F321C4630</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 English - Business x64</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">4.95G</td><td align="center">CD9A2F1AEA7801B47FC6B98C6DC68A86E8A81B0E</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 English - Business x86</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">3.48G</td><td align="center">64623BD54E287D2C1079B41543302858BF5BD1BF</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 English - Consumer x64</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">5.07G</td><td align="center">6F90C52BC551EF97CA049F64DD627BB32BF58696</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows 10 2004 English - Consumer x86</td><td align="center">19041.508</td><td align="center">2020.09</td><td align="center">3.57G</td><td align="center">2190E6A01FC4C4966A9CEE4DA5E220543BB25D9B</td><td align="center"><a href="https://pan.baidu.com/s/1SkAzemrtJZR0JlGwLJsQ-w">网盘下载</a> 提取码: fpqd</td></tr><tr><td align="center">Windows Server 2019 简体中文</td><td align="center">17763.1457</td><td align="center">2020.09</td><td align="center">5.31G</td><td align="center">C3DB81E1F4BC0F6667D8F0BAFE5A964FC0FA0EC0</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows Server 2019 English</td><td align="center">17763.1457</td><td align="center">2020.09</td><td align="center">5.08G</td><td align="center">B89CD48F02D208F4339EA7A480B5AC68109659BB</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows Server 2016 简体中文</td><td align="center">14393.1</td><td align="center">2018.03</td><td align="center">5.87G</td><td align="center">ddedf3ace182587baa268ab8ae0d9ea395a6da22</td><td align="center"><a href="http://yun.baidu.com/s/1dFcRr0l">网盘下载</a> 提取码:b4m5</td></tr><tr><td align="center">Windows LTSC 2019 简体中文 - 企业版 x64</td><td align="center">17763.316</td><td align="center">2019.03</td><td align="center">4.17G</td><td align="center">24B59706D5EDED392423936C82BA5A83596B50CC</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows LTSC 2019 简体中文 - 企业版 x86</td><td align="center">17763.316</td><td align="center">2019.03</td><td align="center">2.98G</td><td align="center">BA2169EDD94F123211CD4AACA68352F1AB6195D9</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows LTSC 2019 English - Enterprise x64</td><td align="center">17763.316</td><td align="center">2019.02</td><td align="center">4.03G</td><td align="center">615A77ECD40E82D5D69DC9DA5C6A6E1265F88E28</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows LTSC 2019 English - Enterprise x86</td><td align="center">17763.316</td><td align="center">2019.02</td><td align="center">2.82G</td><td align="center">88AF607F1E752761577D21F2B7AA98692809BF66</td><td align="center"><a href="https://pan.baidu.com/s/1yjWJPguN1v5i9lF7Jx9wdw">网盘下载</a> 提取码: h3g3</td></tr><tr><td align="center">Windows 7 简体中文 - 企业版 x64</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">3.04G</td><td align="center">BA5E85596C2F25BE59F7E96139D83D4CB261A62</td><td align="center"><a href="https://pan.baidu.com/s/1gfhbvVl">网盘下载</a> 提取码:hqxx</td></tr><tr><td align="center">Windows 7 简体中文 - 企业版 x86</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">2.33G</td><td align="center">C488B3D72DDC4AC63BCDCA36820BB986A1E670AC</td><td align="center"><a href="https://pan.baidu.com/s/1gfhbvVl">网盘下载</a> 提取码:hqxx</td></tr><tr><td align="center">Windows 7 简体中文 - 专业版 x64</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">3.04G</td><td align="center">647B26479A3A46C078F5B1364A89003A31F4AADA</td><td align="center"><a href="https://pan.baidu.com/s/1YoUX2xe5MjorqL9A7lALyQ">网盘下载</a> 提取码:atjm</td></tr><tr><td align="center">Windows 7 简体中文 - 专业版 x86</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">2.33G</td><td align="center">27AE9FBAF9EE076F50F153353E42A3BE74A61FAB</td><td align="center"><a href="https://pan.baidu.com/s/1YoUX2xe5MjorqL9A7lALyQ">网盘下载</a> 提取码:atjm</td></tr><tr><td align="center">Windows 7 简体中文 - 旗舰版 x64</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">3.19G</td><td align="center">2CE0B2DB34D76ED3F697CE148CB7594432405E23</td><td align="center"><a href="https://pan.baidu.com/s/1PPx9cvGKANIuUtuOV1gyMg">网盘下载</a> 提取码:wcl5</td></tr><tr><td align="center">Windows 7 简体中文 - 旗舰版 x86</td><td align="center">7601</td><td align="center">2011.05</td><td align="center">2.47G</td><td align="center">B92119F5B732ECE1C0850EDA30134536E18CCCE7</td><td align="center"><a href="https://pan.baidu.com/s/1PPx9cvGKANIuUtuOV1gyMg">网盘下载</a> 提取码:wcl5</td></tr><tr><td align="center">Windows Server 2012 R2 简体中文</td><td align="center">9600</td><td align="center">2014.12</td><td align="center">5.16G</td><td align="center">5E88BF62773D4867CF904AF94F66EEA2062E35E4</td><td align="center"><a href="http://yun.baidu.com/s/1ctmxbS">网盘下载</a> 提取码:hus9</td></tr><tr><td align="center">Windows Server 2008 R2 简体中文</td><td align="center">7601</td><td align="center">2011.02</td><td align="center">3.14G</td><td align="center">A92C97C38EF6ED5F827637179052AD218900377A</td><td align="center"><a href="http://yun.baidu.com/s/1dEPuffV">网盘下载</a> 提取码:zadg</td></tr><tr><td align="center">Windows Server 2003 R2 简体中文 - 企业版</td><td align="center">7600</td><td align="center">2007.04</td><td align="center">617.68MB</td><td align="center">FDA1A0401CA610F6E3A7780D6DB004DA2F944138</td><td align="center"><a href="http://yun.baidu.com/s/1kUNLZAR">网盘下载</a> 提取码:7pb1</td></tr></tbody></table><h3 id="CentOS-操作系统镜像"><a href="#CentOS-操作系统镜像" class="headerlink" title="CentOS 操作系统镜像"></a>CentOS 操作系统镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">CentOS 8.2.2004</td><td align="center">aarch64 x86_64 ppc64le</td><td align="center">8.2.2004</td><td align="center">2020.05</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 8.1.1911</td><td align="center">aarch64 x86_64 ppc64le armhfp</td><td align="center">8.1.1911</td><td align="center">2019.11</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 7.8 2003</td><td align="center">aarch64 x86_64 ppc64le armhfp i386 ppc64 power9</td><td align="center">7.8.2003</td><td align="center">2020.04</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 7.7 1908</td><td align="center">aarch64 x86_64 ppc64le armhfp i386 ppc64 power9</td><td align="center">7.7.1908</td><td align="center">2019.08</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 7.6 1810</td><td align="center">aarch64 x86_64 ppc64le armhfp i386 ppc64 power9</td><td align="center">7.6.1810</td><td align="center">2019.08</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 6.10</td><td align="center">x86_64 i386</td><td align="center">6.10</td><td align="center">2019.10</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr><tr><td align="center">CentOS 6.9</td><td align="center">x86_64 i386</td><td align="center">6.9</td><td align="center">2019.10</td><td align="center"><a href="https://yun.baidu.com/s/1bpKkwhT">网盘下载</a> 提取码:d3y1</td></tr></tbody></table><h3 id="RHEL-操作系统镜像"><a href="#RHEL-操作系统镜像" class="headerlink" title="RHEL 操作系统镜像"></a>RHEL 操作系统镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">RedHat Enterprise Server 8.1</td><td align="center">aarch64 x86_64</td><td align="center">8.1.0</td><td align="center">2019.10</td><td align="center"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="center">RedHat Enterprise Server 8.0</td><td align="center">aarch64 x86_64</td><td align="center">8.0.0</td><td align="center">2019.04</td><td align="center"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="center">RedHat Enterprise Server 7.7</td><td align="center">x86_64</td><td align="center">7.7</td><td align="center">2019.08</td><td align="center"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr><tr><td align="center">RedHat Enterprise Server 6.10</td><td align="center">x86_64</td><td align="center">6.10</td><td align="center">2019.10</td><td align="center"><a href="https://pan.baidu.com/s/1o8c5HqU">网盘下载</a> 提取码:4y57</td></tr></tbody></table><h3 id="Ubuntu-操作系统镜像"><a href="#Ubuntu-操作系统镜像" class="headerlink" title="Ubuntu 操作系统镜像"></a>Ubuntu 操作系统镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">ubuntu 18.04.4</td><td align="center">amd64 arm64 ppc64le s390x</td><td align="center">18.04.4</td><td align="center">2020.08</td><td align="center"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="center">ubuntu 18.04.3</td><td align="center">amd64 arm64 ppc64le s390x</td><td align="center">18.04.3</td><td align="center">2019.08</td><td align="center"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="center">ubuntu 16.04.6</td><td align="center">amd64 arm64 ppc64le s390x i386</td><td align="center">16.04.6</td><td align="center">2019.06</td><td align="center"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr><tr><td align="center">ubuntu 14.04.6</td><td align="center">amd64 arm64 ppc64le s390x i386</td><td align="center">14.04.6</td><td align="center">2018.06</td><td align="center"><a href="https://pan.baidu.com/s/1jIFT3Ky">网盘下载</a> 提取码:4nqa</td></tr></tbody></table><h3 id="UOS-amp-Deepin-操作系统镜像"><a href="#UOS-amp-Deepin-操作系统镜像" class="headerlink" title="UOS &amp; Deepin 操作系统镜像"></a>UOS &amp; Deepin 操作系统镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">Deepin 20</td><td align="center">x86_64</td><td align="center">V20</td><td align="center">2020.09</td><td align="center"><a href="https://pan.baidu.com/s/1jV5diA3rhx3f3shNgkcD7Q">网盘下载</a> 提取码: e2jf</td></tr><tr><td align="center">Uos 20 SP2</td><td align="center">x86_64 arm64</td><td align="center">V20 SP2</td><td align="center">2020.07</td><td align="center"><a href="https://pan.baidu.com/s/1BMZrMGGb0LwsmroeH_WTbQ">网盘下载</a> 提取码: x51b</td></tr><tr><td align="center">Uos 20 SP1</td><td align="center">x86_64 arm64</td><td align="center">V20 SP1</td><td align="center">2020.03</td><td align="center"><a href="https://pan.baidu.com/s/1BMZrMGGb0LwsmroeH_WTbQ">网盘下载</a> 提取码: x51b</td></tr></tbody></table><h3 id="Kali-Linux-操作系统镜像"><a href="#Kali-Linux-操作系统镜像" class="headerlink" title="Kali Linux 操作系统镜像"></a>Kali Linux 操作系统镜像</h3><table><thead><tr><th align="center">系统版本（按发布日期最新到最旧）</th><th align="center">系统架构</th><th align="center">系统版本号</th><th align="center">发布日期</th><th align="center">下载地址</th></tr></thead><tbody><tr><td align="center">kali-linux 2020.3</td><td align="center">amd64 i386</td><td align="center">2020.3</td><td align="center">2020.08</td><td align="center"><a href="https://pan.baidu.com/s/1jIqRcfO">网盘下载</a> 提取码:ghgg</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Windows </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> OS </tag>
            
            <tag> RHEL </tag>
            
            <tag> UOS </tag>
            
            <tag> Deepin </tag>
            
            <tag> Kali </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux安全加固措施方案之密码加固</title>
      <link href="posts/d931.html"/>
      <url>posts/d931.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-准备工作："><a href="#0x01-准备工作：" class="headerlink" title="0x01 准备工作："></a>0x01 准备工作：</h2><p>安装 PAM 的bai cracklib 模块，cracklib 能提供额外的密码du检查能力。</p><h3 id="可用参数说明"><a href="#可用参数说明" class="headerlink" title="可用参数说明"></a>可用参数说明</h3><ul><li><p><em>debug</em> 此选项使模块的信息写入到syslog（3），显示模块的行为（此选项不写密码信息到日志文件）。</p></li><li><p><em>type=XXX</em> 默认的动作是模块使用以下提示时，要求口令：“新的UNIX密码：“和”重新输入UNIX密码：“。默认的Word UNIX可以被替换为这个选项。</p></li><li><p><em>retry=N</em> 改变输入密码的次数，默认值是1。就是说，如果用户输入的密码强度不够就退出。可以使用这个选项设置输入的次数，以免一切都从头再来。</p></li><li><p><em>difok=N</em> 默认值为10。这个参数设置允许的新、旧密码相同字符的个数。不过，如果新密码中1/2的字符和旧密码不同，则新密码被接受。</p></li><li><p><em>difignore=N</em> 多少个字符的密码应收到difok将被忽略。默认为23</p></li><li><p><em>minlen=N</em> 新的最低可接受的大小密码（加一个，如果没有禁用学分这是默认值）。除了在新密码的字符数，贷方（在长度+1），给出了各种人物的不同种类（其他，大写，小写，数字）。此参数的默认值是9，它是一个老式的UNIX密码的字符相同类型的所有好，但可能过低，利用一个MD5的系统增加安全性。请注意，有一个在Cracklib本身长度的限制，一“的方式太短“4极限是硬编码和定义的限制（6），将不参考minlen检查对。如果你想允许密码短短5个字符，你不应该使用这个模块。</p></li><li><p><em>dcredit=N</em> 限制新密码中至少有多少个数字。</p></li><li><p><em>ucredit=N</em> 限制新密码中至少有多少个大写字符。</p></li><li><p><em>lcredit=N</em> 限制新密码中至少有多少个小写字符。</p></li><li><p><em>ocredit=N</em> 限制新密码中至少有多少个其它的字符。</p></li></ul><h2 id="0x02-具体操作："><a href="#0x02-具体操作：" class="headerlink" title="0x02 具体操作："></a>0x02 具体操作：</h2><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> libpam-cracklib</code></pre><p>CentOS、Fedora、RHEL 系统已经默认安装了 cracklib PAM模块，所以在这些系统上无需执行上面的操作。</p><p>为了强制实施密码策略，需要修改 /etc/pam.d 目录下的 PAM 配置文件。一旦修改，策略会马上生效。<br>注意：此教程中的密码策略只对非 root 用户有效，对 root 用户无效。</p><p>策略设置：</p><h3 id="禁止使用旧密码"><a href="#禁止使用旧密码" class="headerlink" title="禁止使用旧密码"></a>禁止使用旧密码</h3><p>找到同时有 “password” 和 “pam_unix.so” 字段并且附加有 “remember=5” 的那行，它表示禁止使用最近用过的5个密码（己使用过的密码会被保存在 /etc/security/opasswd 下面）。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/common-passwordpassword <span class="token punctuation">[</span>success<span class="token operator">=</span>1 default<span class="token operator">=</span>ignore<span class="token punctuation">]</span> pam_unix.so obscure sha512 remember<span class="token operator">=</span>5</code></pre><p>CentOS、Fedora、RHEL 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/system-authpassword sufficient pamunix.so sha512 shadow nullok tryfirstpass useauthtok remember<span class="token operator">=</span>5</code></pre><h3 id="设置最短密码长度"><a href="#设置最短密码长度" class="headerlink" title="设置最短密码长度"></a>设置最短密码长度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “minlen=10” 的那行，它表示最小密码长度为（10 - 类型数量）。这里的 “类型数量” 表示不同的字符类型数量。PAM 提供4种类型符号作为密码（大写字母、小写字母、数字和标点符号）。如果密码同时用上了这4种类型的符号，并且 minlen 设为10，那么最短的密码长度允许是6个字符。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/common-passwordpassword requisite pam_cracklib.so retry<span class="token operator">=</span>3 minlen<span class="token operator">=</span>10 difok<span class="token operator">=</span>3</code></pre><p>CentOS、Fedora、RHEL 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/system-authpassword requisite pam_cracklib.so retry<span class="token operator">=</span>3 difok<span class="token operator">=</span>3 minlen<span class="token operator">=</span>10</code></pre><h3 id="设置密码复杂度"><a href="#设置密码复杂度" class="headerlink" title="设置密码复杂度"></a>设置密码复杂度</h3><p>找到同时有 “password” 和 “pam_cracklib.so” 字段并且附加有 “ucredit=-1 lcredit=-2 dcredit=-1 ocredit=-1” 的那行，表示密码必须至少包含一个大写字母（ucredit），两个小写字母（lcredit），一个数字（dcredit）和一个标点符号（ocredit）。</p><p>Debian、Ubuntu 或 Linux Mint 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/common-passwordpassword requisite pam_cracklib.so retry<span class="token operator">=</span>3 minlen<span class="token operator">=</span>10 difok<span class="token operator">=</span>3 ucredit<span class="token operator">=</span>-1 lcredit<span class="token operator">=</span>-2 dcredit<span class="token operator">=</span>-1 ocredit<span class="token operator">=</span>-1</code></pre><p>CentOS、Fedora、RHEL 系统上：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/pam.d/system-authpassword requisite pam_cracklib.so retry<span class="token operator">=</span>3 difok<span class="token operator">=</span>3 minlen<span class="token operator">=</span>10 ucredit<span class="token operator">=</span>-1 lcredit<span class="token operator">=</span>-2 dcredit<span class="token operator">=</span>-1 ocredit<span class="token operator">=</span>-1<span class="token comment" spellcheck="true">#允许有3个新、旧密码相同字符，最少长度10位，至少包含1位大写字母，2位小写字母，1位数字1个字符。</span></code></pre><h3 id="设置密码过期期限"><a href="#设置密码过期期限" class="headerlink" title="设置密码过期期限"></a>设置密码过期期限</h3><p>编辑 /etc/login.defs 文件，可以设置当前密码的有效期限，具体变量如下所示：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">vi</span> /etc/login.defsPASSMAXDAYS 150PASSMINDAYS 0PASSWARNAGE 7</code></pre><p>这些设置要求用户每6个月改变密码，并且会提前7天提醒用户密码快到期了。</p><p>如果想为每个用户设置不同的密码期限，使用 chage 命令。下面的命令可以查看某个用户的密码限期：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> chage -l xmoduloLast password change <span class="token keyword">:</span> Dec 30, 2013 Password expires <span class="token keyword">:</span> never Password inactive <span class="token keyword">:</span> never Account expires <span class="token keyword">:</span> never Minimum number of days between password change <span class="token keyword">:</span> 0 Maximum number of days between password change <span class="token keyword">:</span> 99999 Number of days of warning before password expires <span class="token keyword">:</span> 7</code></pre><p>默认情况下，用户的密码永不过期。</p><h3 id="下面的命令用于修改-xmodulo-用户的密码期限："><a href="#下面的命令用于修改-xmodulo-用户的密码期限：" class="headerlink" title="下面的命令用于修改 xmodulo 用户的密码期限："></a>下面的命令用于修改 xmodulo 用户的密码期限：</h3><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> chage -E 6/30/2014 -m 5 -M 90 -I 30 -W 14 xmodulo</code></pre><p>上面的命令将密码期限设为2014年6月3日。另外，修改密码的最短周期为5天，最长周期为90天。密码过期前14天会发送消息提醒用户，过期后帐号会被锁住30天。</p><p>设置完后，验证效果。</p>]]></content>
      
      
      <categories>
          
          <category> 信息安全 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 主机加固 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 系统修复</title>
      <link href="posts/462d.html"/>
      <url>posts/462d.html</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS-系统修复"><a href="#CentOS-系统修复" class="headerlink" title="CentOS 系统修复"></a>CentOS 系统修复</h3><p>首先，光盘引导选择<code>Troubleshooting</code>-<code>Rescue a CentOS system</code>,进入光盘引导修改系统，进入界面后输入<code>3</code>，进入<code>Skip to shell</code>, shell 操作界面</p><pre class=" language-bash"><code class="language-bash">$ lsblk <span class="token comment" spellcheck="true">#查看磁盘情况，随意挂载个磁盘查看是否为根目录。</span>$ <span class="token function">mkdir</span> /demo $ <span class="token function">mount</span> /dev/vda3 /demo$ <span class="token function">ls</span>  <span class="token comment" spellcheck="true">#查看目录是否为根目录</span>$ <span class="token function">umount</span> /demo   <span class="token comment" spellcheck="true">#卸载磁盘</span>$ blkid  /dev/vda3  <span class="token comment" spellcheck="true">#查看磁盘分区格式</span>$ <span class="token function">fsck</span>  -fy   /dev/vda3    <span class="token comment" spellcheck="true">#ext格式使用此命令修复</span>$ xfs_repair /dev/vda3     <span class="token comment" spellcheck="true">#xfs 格式使用此命令修复</span><span class="token keyword">done</span>     <span class="token comment" spellcheck="true">#说明修复完了，把iso卸载掉然后reboot就好</span></code></pre><blockquote><p><strong>Ubuntu</strong>系统修复相同</p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7 搭建开源个人网盘Nextcloud与常用插件</title>
      <link href="posts/e4ca.html"/>
      <url>posts/e4ca.html</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><p>文件服务器，是一个公司最常用的服务应用，每个公司企业基本都有自己的文件服务器实，现储存分享，上传下载文件文档等功能，常见的文件服务器就是ftp服务器，但是ftp服务器的功能实在有限，且对于普通用户使用入手难度较大，又缺乏界面，对于公司的普通用户来说，确实不是一个好的文件服务器。一般ftp也只是用户服务器，网站应用等方面。</p><p>在目前的公司企业环境中，企业网盘则是一个更好的文件服务器替代方案。百度云盘，相信大家基本都有用过吧，友好的界面交互，网页端，客户端都有，不需要任何命令，实现上传下载，分享等诸多功能。但是这种云盘毕竟不是自己的，很多公司对于将机密文件放在上面心存疑惑，且时不时的网盘关闭热潮也让人担心。既然如此，为何不搭建自己的网盘呢，于是就有了nextcloud。</p><p>对于私人网盘，市面上已经有很多的产品，很多开源半开源的云盘系统。其中最出名的就是 seafile和owncloud/nextcloud。seafile是国人开发的，分块处理，断点上传，速度比后者要快。有社区版和企业版。社区版免费，但是功能有限，企业版要收费，功能更强大。但是社区版的功能，老实说只能满足个人使用，无法满足企业使用。而企业版要收费，费用根据公司人数不同，还需要发邮件询问。</p><p>像我着这种穷人，穷公司，人数不多，又不像花钱的，那么nextcloud就是最好的选择，nextcloud是owncloud的一个分支，由原创始人团队维护，是在owncloud被别的公司收购后，由创始人团队创立的新分支。就像 mysql和mariadb。nextcloud完全开源，功能强大，是外国人开发维护的。具体的与seafile等的对比，这里不详细说明了，有兴趣的百度就好。下面记录一下在centos7 服务器上搭建nextcloud的具体过程。</p><p> </p><h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>环境: centos8<br>nextcloud: 19.0.0 <br>selinux 关闭</p><ol><li>nextcloud是php项目，这里我使用nginx，官方文档是用apache的，有一点点具别。但不大。在下载nextcloud之前，先安装nginx和php</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 先删除系统可能自带的PHP和nginx，用来面命令查找是否有安装</span>$ rpm -qa <span class="token operator">|</span><span class="token function">grep</span> php$ rpm -qa <span class="token operator">|</span><span class="token function">grep</span> nginx<span class="token comment" spellcheck="true"># 强制删除软件包，软件包全称就是上面通过rpm -qa 查询到的软件包全名</span>$ rpm -e --nodeps <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;软件包全称&amp;#125; </span> <span class="token comment" spellcheck="true"># 安装yum的epel源，这里推荐用阿里云的镜像安装，包更全。</span>$ rpm -ivh https://mirrors.aliyun.com/epel/epel-release-latest-7.noarch.rpm <span class="token comment" spellcheck="true"># 安装nginx</span>$ yum <span class="token function">install</span> -y nginx <span class="token comment" spellcheck="true"># 安装php的源</span>$ rpm -Uvh https://mirror.webtatic.com/yum/el7/webtatic-release.rpm <span class="token comment" spellcheck="true"># 安装php已经会用到扩展</span>$ yum <span class="token function">install</span> -y php70w-devel php70w-pear php70w-pecl php70w-gd php70w-opcache php70w-cli php70w-pdo php70w-process php70w-pecl-apcu php70w-mcrypt php70w-mysql php70w-fpm php70w-pecl-memcached php70w-common php70w-xml php70w-mbstring php70w-pecl-igbinary <span class="token comment" spellcheck="true"># 检查是否安装成功</span>$ nginx -vnginx version: nginx/1.12.2$ php -vPHP 7.0.30 <span class="token punctuation">(</span>cli<span class="token punctuation">)</span> <span class="token punctuation">(</span>built: Apr 28 2018 08:14:08<span class="token punctuation">)</span> <span class="token punctuation">(</span> NTS <span class="token punctuation">)</span>Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1997-2017 The PHP GroupZend Engine v3.0.0, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1998-2017 Zend Technologies    with Zend OPcache v7.0.30, Copyright <span class="token punctuation">(</span>c<span class="token punctuation">)</span> 1999-2017, by Zend Technologies</code></pre><ol start="2"><li>nextcloud 还需要数据库，这里我使用的mysql，mysql提前安装好或使用已有的数据库服务器，具体安装安装方式可参考我另一篇博文: 《CentOS7.2 安装mysql，并配置自动启动和远程访问》。在mysql种创建一个新的databse用于nextcloud使用.</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 在装有mysql的服务器上执行</span>$ mysql -u root -p<span class="token operator">></span> create database nextcloud_db<span class="token punctuation">;</span><span class="token comment" spellcheck="true"># 授权给自定义用户，这里以用户名：nextclouduser，密码：nextcloudpasswd，代替。</span><span class="token operator">></span> grant all privileges on nextcloud_db.* to nextclouduser@localhost identified by <span class="token string">'nextcloudpasswd'</span><span class="token punctuation">;</span><span class="token operator">></span> flush privileges<span class="token punctuation">;</span></code></pre><p>3.  为nextcloud 生成自签名ssl证书</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /etc/nginx/cert/    <span class="token comment" spellcheck="true"># 没有则创建此文件夹</span>$ openssl req -new -x509 -days 365 -nodes -out /etc/nginx/cert/nextcloud.crt -keyout /etc/nginx/cert/nextcloud.key<span class="token comment" spellcheck="true"># 会出现下面的选项需要填写，可以随便填。</span>Country Name <span class="token punctuation">(</span>2 letter code<span class="token punctuation">)</span> <span class="token punctuation">[</span>XX<span class="token punctuation">]</span>:cn                                 <span class="token comment" spellcheck="true"># 国家</span>State or Province Name <span class="token punctuation">(</span>full name<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>:guangdong                      <span class="token comment" spellcheck="true"># 省份</span>Locality Name <span class="token punctuation">(</span>eg, city<span class="token punctuation">)</span> <span class="token punctuation">[</span>Default City<span class="token punctuation">]</span>:guangzhou                    <span class="token comment" spellcheck="true"># 地区名字</span>Organization Name <span class="token punctuation">(</span>eg, company<span class="token punctuation">)</span> <span class="token punctuation">[</span>Default Company Ltd<span class="token punctuation">]</span>:Amos           <span class="token comment" spellcheck="true"># 公司名</span>Organizational Unit Name <span class="token punctuation">(</span>eg, section<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>:Technology                 <span class="token comment" spellcheck="true"># 部门</span>Common Name <span class="token punctuation">(</span>eg, your name or your server's hostname<span class="token punctuation">)</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>:Amos        <span class="token comment" spellcheck="true"># CA主机名</span>Email Address <span class="token punctuation">[</span><span class="token punctuation">]</span>:Amos@Amos.com                                       <span class="token comment" spellcheck="true"># Email地址</span><span class="token comment" spellcheck="true"># 修改证书和文件夹权限</span>$ <span class="token function">chmod</span> 600 /etc/nginx/cert/*$ <span class="token function">chmod</span> 700 /etc/nginx/cert</code></pre><ol start="4"><li>下载nextcloud，并配置php和nginx</li></ol><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 下载nextcloud，官网地址为: https://nextcloud.com/install/#instructions-server</span>$ <span class="token function">cd</span> /usr/local/src$ yum <span class="token function">install</span> -y <span class="token function">wget</span> unzip$ <span class="token function">wget</span> https://download.nextcloud.com/server/releases/nextcloud-13.0.2.zip    <span class="token comment" spellcheck="true"># 下载</span>$ unzip nextcloud-13.0.2.zip    <span class="token comment" spellcheck="true"># 解压</span>$ <span class="token function">mv</span> nextcloud /usr/share/nginx/html/    <span class="token comment" spellcheck="true"># 移动到指定文件夹内</span>$ <span class="token function">cd</span> /usr/share/nginx/html/nextcloud     <span class="token comment" spellcheck="true"># 进行nextcloud 目录中</span>$ <span class="token function">mkdir</span> data    <span class="token comment" spellcheck="true"># 创建数据文件夹</span>$ <span class="token function">chown</span> nginx:nginx -R nextcloud/    <span class="token comment" spellcheck="true"># 将nextcloud文件授权给nginx</span> <span class="token comment" spellcheck="true"># 配置php-fpm</span>$ vim /etc/php-fpm.d/www.conf--------------------------------------------------------------------------------user <span class="token operator">=</span> nginx                                   //将用户和组都改为nginxgroup <span class="token operator">=</span> nginxlisten <span class="token operator">=</span> 127.0.0.1:9000env<span class="token punctuation">[</span>HOSTNAME<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token variable">$HOSTNAME</span>                     //将以下几行，去掉注释env<span class="token punctuation">[</span>PATH<span class="token punctuation">]</span> <span class="token operator">=</span> /usr/local/bin:/usr/bin:/binenv<span class="token punctuation">[</span>TMP<span class="token punctuation">]</span> <span class="token operator">=</span> /tmpenv<span class="token punctuation">[</span>TMPDIR<span class="token punctuation">]</span> <span class="token operator">=</span> /tmpenv<span class="token punctuation">[</span>TEMP<span class="token punctuation">]</span> <span class="token operator">=</span> /tmp--------------------------------------------------------------------------------  <span class="token comment" spellcheck="true"># 为php创建session文件夹</span>$ <span class="token function">mkdir</span> -p /var/lib/php/session$ <span class="token function">chown</span> nginx:nginx -R /var/lib/php/session/  <span class="token comment" spellcheck="true"># 配置nginx</span>$ <span class="token function">cd</span> /etc/nginx/conf.d/$ vim nextcloud.conf--------------------------------------------------------------------------------upstream php-handler <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    server 127.0.0.1:9000<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true">#server unix:/var/run/php5-fpm.sock;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    listen 80<span class="token punctuation">;</span>    server_name localhost<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># enforce https</span>    rewrite ^<span class="token punctuation">(</span>.*<span class="token punctuation">)</span>$ https://<span class="token variable">$host</span><span class="token variable">$1</span> permanent<span class="token punctuation">;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>  server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    listen 443 ssl<span class="token punctuation">;</span>    server_name localhost<span class="token punctuation">;</span>     ssl_certificate /etc/nginx/cert/nextcloud.crt<span class="token punctuation">;</span>    ssl_certificate_key /etc/nginx/cert/nextcloud.key<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true"># Add headers to serve security related headers</span>    <span class="token comment" spellcheck="true"># Before enabling Strict-Transport-Security headers please read into this</span>    <span class="token comment" spellcheck="true"># topic first.</span>    add_header Strict-Transport-Security <span class="token string">"max-age=15768000;    includeSubDomains; preload;"</span><span class="token punctuation">;</span>    add_header X-Content-Type-Options nosniff<span class="token punctuation">;</span>    add_header X-Frame-Options <span class="token string">"SAMEORIGIN"</span><span class="token punctuation">;</span>    add_header X-XSS-Protection <span class="token string">"1; mode=block"</span><span class="token punctuation">;</span>    add_header X-Robots-Tag none<span class="token punctuation">;</span>    add_header X-Download-Options noopen<span class="token punctuation">;</span>    add_header X-Permitted-Cross-Domain-Policies none<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true"># Path to the root of your installation</span>    root /usr/share/nginx/html/nextcloud/<span class="token punctuation">;</span>      location <span class="token operator">=</span> /robots.txt <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        allow all<span class="token punctuation">;</span>        log_not_found off<span class="token punctuation">;</span>        access_log off<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token comment" spellcheck="true"># The following 2 rules are only needed for the user_webfinger app.</span>    <span class="token comment" spellcheck="true"># Uncomment it if you're planning to use this app.</span>    <span class="token comment" spellcheck="true">#rewrite ^/.well-known/host-meta /public.php?service=host-meta last;</span>    <span class="token comment" spellcheck="true">#rewrite ^/.well-known/host-meta.json /public.php?service=host-meta-json</span>    <span class="token comment" spellcheck="true"># last;</span>      location <span class="token operator">=</span> /.well-known/carddav <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token keyword">return</span> 301 <span class="token variable">$scheme</span>://<span class="token variable">$host</span>/remote.php/dav<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    location <span class="token operator">=</span> /.well-known/caldav <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>      <span class="token keyword">return</span> 301 <span class="token variable">$scheme</span>://<span class="token variable">$host</span>/remote.php/dav<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token comment" spellcheck="true"># set max upload size</span>    client_max_body_size 10240M<span class="token punctuation">;</span>    <span class="token comment" spellcheck="true"># 上传文件最大限制，php.ini中也要修改，最后优化时会提及。</span>    fastcgi_buffers 64 4K<span class="token punctuation">;</span>     <span class="token comment" spellcheck="true"># Disable gzip to avoid the removal of the ETag header</span>    <span class="token function">gzip</span> on<span class="token punctuation">;</span>    gzip_vary on<span class="token punctuation">;</span>    gzip_comp_level 4<span class="token punctuation">;</span>    gzip_min_length 256<span class="token punctuation">;</span>    gzip_proxied expired no-cache no-store private no_last_modified no_etag auth<span class="token punctuation">;</span>    gzip_types application/atom+xml application/javascript application/json application/ld+json application/manifest+json application/rss+xml application/vnd.geo+json application/vnd.ms-fontobject application/x-font-ttf application/x-web-app-manifest+json application/xhtml+xml application/xml font/opentype image/bmp image/svg+xml image/x-icon text/cache-manifest text/css text/plain text/vcard text/vnd.rim.location.xloc text/vtt text/x-component text/x-cross-domain-policy<span class="token punctuation">;</span>      <span class="token comment" spellcheck="true"># Uncomment if your server is build with the ngx_pagespeed module</span>    <span class="token comment" spellcheck="true"># This module is currently not supported.</span>    <span class="token comment" spellcheck="true">#pagespeed off;</span>      error_page 403 /core/templates/403.php<span class="token punctuation">;</span>    error_page 404 /core/templates/404.php<span class="token punctuation">;</span>      location / <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        rewrite ^ /index.php<span class="token variable">$uri</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      location ~ ^/<span class="token punctuation">(</span>?:build<span class="token operator">|</span>tests<span class="token operator">|</span>config<span class="token operator">|</span>lib<span class="token operator">|</span>3rdparty<span class="token operator">|</span>templates<span class="token operator">|</span>data<span class="token punctuation">)</span>/ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        deny all<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>    location ~ ^/<span class="token punctuation">(</span>?:\.<span class="token operator">|</span>autotest<span class="token operator">|</span>occ<span class="token operator">|</span>issue<span class="token operator">|</span>indie<span class="token operator">|</span>db_<span class="token operator">|</span>console<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        deny all<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     location ~ ^/<span class="token punctuation">(</span>?:index<span class="token operator">|</span>remote<span class="token operator">|</span>public<span class="token operator">|</span><span class="token function">cron</span><span class="token operator">|</span>core/ajax/update<span class="token operator">|</span>status<span class="token operator">|</span>ocs/v<span class="token punctuation">[</span>12<span class="token punctuation">]</span><span class="token operator">|</span>updater/.+<span class="token operator">|</span>ocs-provider/.+<span class="token operator">|</span>core/templates/40<span class="token punctuation">[</span>34<span class="token punctuation">]</span><span class="token punctuation">)</span>\.php<span class="token punctuation">(</span>?:$<span class="token operator">|</span>/<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        include fastcgi_params<span class="token punctuation">;</span>        fastcgi_split_path_info ^<span class="token punctuation">(</span>.+\.php<span class="token punctuation">)</span><span class="token punctuation">(</span>/.*<span class="token punctuation">)</span>$<span class="token punctuation">;</span>        fastcgi_param SCRIPT_FILENAME <span class="token variable">$document_root</span><span class="token variable">$fastcgi_script_name</span><span class="token punctuation">;</span>        fastcgi_param PATH_INFO <span class="token variable">$fastcgi_path_info</span><span class="token punctuation">;</span>        fastcgi_param HTTPS on<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true">#Avoid sending the security headers twice</span>        fastcgi_param modHeadersAvailable <span class="token boolean">true</span><span class="token punctuation">;</span>        fastcgi_param front_controller_active <span class="token boolean">true</span><span class="token punctuation">;</span>        fastcgi_pass php-handler<span class="token punctuation">;</span>        fastcgi_intercept_errors on<span class="token punctuation">;</span>        fastcgi_request_buffering off<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      location ~ ^/<span class="token punctuation">(</span>?:updater<span class="token operator">|</span>ocs-provider<span class="token punctuation">)</span><span class="token punctuation">(</span>?:$<span class="token operator">|</span>/<span class="token punctuation">)</span> <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        try_files <span class="token variable">$uri</span>/ <span class="token operator">=</span>404<span class="token punctuation">;</span>        index index.php<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>      <span class="token comment" spellcheck="true"># Adding the cache control header for js and css files</span>    <span class="token comment" spellcheck="true"># Make sure it is BELOW the PHP block</span>    location ~* \.<span class="token punctuation">(</span>?:css<span class="token operator">|</span>js<span class="token punctuation">)</span>$ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        try_files <span class="token variable">$uri</span> /index.php<span class="token variable">$uri</span><span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>        add_header Cache-Control <span class="token string">"public, max-age=7200"</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Add headers to serve security related headers (It is intended to</span>        <span class="token comment" spellcheck="true"># have those duplicated to the ones above)</span>        <span class="token comment" spellcheck="true"># Before enabling Strict-Transport-Security headers please read into</span>        <span class="token comment" spellcheck="true"># this topic first.</span>        add_header Strict-Transport-Security <span class="token string">"max-age=15768000;includeSubDomains; preload;"</span><span class="token punctuation">;</span>        add_header X-Content-Type-Options nosniff<span class="token punctuation">;</span>        add_header X-Frame-Options <span class="token string">"SAMEORIGIN"</span><span class="token punctuation">;</span>        add_header X-XSS-Protection <span class="token string">"1; mode=block"</span><span class="token punctuation">;</span>        add_header X-Robots-Tag none<span class="token punctuation">;</span>        add_header X-Download-Options noopen<span class="token punctuation">;</span>        add_header X-Permitted-Cross-Domain-Policies none<span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Optional: Don't log access to assets</span>        access_log off<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>     location ~* \.<span class="token punctuation">(</span>?:svg<span class="token operator">|</span>gif<span class="token operator">|</span>png<span class="token operator">|</span>html<span class="token operator">|</span>ttf<span class="token operator">|</span>woff<span class="token operator">|</span>ico<span class="token operator">|</span>jpg<span class="token operator">|</span>jpeg<span class="token punctuation">)</span>$ <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>        try_files <span class="token variable">$uri</span> /index.php<span class="token variable">$uri</span><span class="token variable">$is_args</span><span class="token variable">$args</span><span class="token punctuation">;</span>        <span class="token comment" spellcheck="true"># Optional: Don't log access to other assets</span>        access_log off<span class="token punctuation">;</span>    <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>----------------------------------------------------------------------------------  <span class="token comment" spellcheck="true"># 将nginx原配置中80端口的配置删除</span>$ vim /etc/nginx/nginx.conf--------------------------------------------------------server <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;          # 将80端口的server整个删除，应该我们在上面nextcloud.conf中已经配置了，这里不删除的话会导致冲突不生效。</span>    listen 80<span class="token punctuation">;</span><span class="token punctuation">..</span>.  <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span>--------------------------------------------------------</code></pre><ol start="5"><li>启动nginx和php-fpm</li></ol><pre class=" language-bash"><code class="language-bash">$ nginx -t    <span class="token comment" spellcheck="true"># 检查nginx配置是否正确，出现下面输入则正确。</span>nginx: the configuration <span class="token function">file</span> /etc/nginx/nginx.conf syntax is oknginx: configuration <span class="token function">file</span> /etc/nginx/nginx.conf <span class="token function">test</span> is successful <span class="token comment" spellcheck="true"># 启动并设为开机启动 nginx，php-fpm</span>$ systemctl start nginx$ systemctl <span class="token function">enable</span> nginx$ systemctl start php-fpm$ systemctl <span class="token function">enable</span> php-fpm<span class="token comment" spellcheck="true"># 配置防火墙，开放http和https的端口。</span>$ firewall-cmd --add-port<span class="token operator">=</span>80/tcp --permanent$ firewall-cmd --add-port<span class="token operator">=</span>443/tcp --permanent$ firewall-cmd --reload</code></pre><p>PS： 这里我的selinux是关闭的，如果selinux没有关闭，则执行下面命令关闭selinux</p><pre class=" language-bash"><code class="language-bash">$ setenforce 0    <span class="token comment" spellcheck="true"># 关闭selinux</span>$ vim /etc/selinux/config    <span class="token comment" spellcheck="true"># 修改配置，永久关闭。</span>------------------------------------------------------SELINUX<span class="token operator">=</span>disabled------------------------------------------------------</code></pre><ol start="6"><li>访问网页界面，完成安装。访问搭建nextcloud服务器的ip地址。（如果有域名就访问域名）<br>按照实际情况进行配置，配置完成后，点击安装完成。上图中mysql的主机名，使用上面我们自己的数据库服务器地址和端口</li></ol><p>7. 性能优化，进入主界面后，右上角自己头像，点击设置，基本设置：<br>第一项就有 安全及设置警告，这里会有配置错误提示，优化提示等。根据提示进行优化：<br>① 修改php.ini 文件，添加如下配置：</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/php.ini------------------------------------------------------------------------<span class="token punctuation">[</span>PHP<span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 在[PHP] 以下添加如下配置</span>opcache.enable<span class="token operator">=</span>1opcache.enable_cli<span class="token operator">=</span>1opcache.interned_strings_buffer<span class="token operator">=</span>8opcache.max_accelerated_files<span class="token operator">=</span>10000opcache.memory_consumption<span class="token operator">=</span>128opcache.save_comments<span class="token operator">=</span>1opcache.revalidate_freq<span class="token operator">=</span>1<span class="token punctuation">..</span>.upload_max_filesize <span class="token operator">=</span> 10240M    <span class="token comment" spellcheck="true"># 上传文件最大大小，可以自定义修改，默认为512M</span>------------------------------------------------------------------------ $ vim /etc/nginx/nginx.d/nextcloud.conf</code></pre><p>② 设置缓存后端，可以使用redis，memcache。单机或集群模式都可以。不同的配置方式可以参考官方文档。</p><p>这里我直接单机安装并配置使用memcache。</p><pre class=" language-bash"><code class="language-bash">$ yum <span class="token function">install</span> -y memcache$ vim /etc/sysconfig/memcached------------------------------------------------------------------------PORT<span class="token operator">=</span><span class="token string">"11211"</span>    <span class="token comment" spellcheck="true"># 端口</span>USER<span class="token operator">=</span><span class="token string">"memcached"</span>    <span class="token comment" spellcheck="true"># 用户</span>MAXCONN<span class="token operator">=</span><span class="token string">"1024"</span>    <span class="token comment" spellcheck="true"># 最大链接数</span>CACHESIZE<span class="token operator">=</span><span class="token string">"2048"</span>    <span class="token comment" spellcheck="true"># 最大内存，单位M</span>OPTIONS<span class="token operator">=</span><span class="token string">""</span>----------------------------------------------------------------------- <span class="token comment" spellcheck="true"># 修改nextcloud的config配置文件，添加memcached缓存配置</span>$ vim /usr/share/nginx/html/nextcloud/config/config.php-----------------------------------------------------------------------<span class="token string">'memcache.local'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'\OC\Memcache\APCu'</span>,  <span class="token string">'memcache.distributed'</span> <span class="token operator">=</span><span class="token operator">></span> <span class="token string">'\OC\Memcache\Memcached'</span>,  <span class="token string">'memcached_servers'</span> <span class="token operator">=</span><span class="token operator">></span> array<span class="token punctuation">(</span>   array<span class="token punctuation">(</span><span class="token string">'localhost'</span>, 11211<span class="token punctuation">)</span>,     <span class="token punctuation">)</span>,-----------------------------------------------------------------------</code></pre><p>③ 重启nginx和php-fpm，是配置生效</p><pre class=" language-bash"><code class="language-bash">$ systemctl start memcached$ systemctl <span class="token function">enable</span> memcached$ systemctl restart nginx$ systemctl restart php-fpm</code></pre><p>④ 设置后台任务，cron执行。</p><pre class=" language-bash"><code class="language-bash">$ vim /etc/crontab    <span class="token comment" spellcheck="true"># 修改cron配置文件，添加如下配置</span>---------------------------------------------------------------------------------*/15 * * * * -u nginx /usr/bin/php -f /usr/share/nginx/html/nextcloud/cron.php---------------------------------------------------------------------------------</code></pre><ol start="8"><li>配置邮件服务器</li></ol><p>在设置 –&gt; 其他设置 中，配置smtp服务器。并进行测试，收到邮件则为OK。</p><ol start="9"><li>到此，nextcloud已经安装完成。除此之外，nextcloud还有很多常用插件，用于拓展功能，包括官方的或个人的，点击右上角个人头像–&gt;应用</li></ol><p>在这里可以直接点击安装启动应用。非常方便。本身安装时便会自带有一些应用，这里推荐几个需要手动安装的常用应用：</p><p>①Announcement center  管理员可以发公告</p><p>②Circles 圈子，每个人都可以建立加入圈子，实现圈子的文件共享</p><p>③Group folders 组文件夹</p><p>④File access control 文件访问控制</p><p>⑤Impersonate 管理员可以模拟用户，可以以用户登陆到他们的网盘，可以看到个人用户的文件，这个有点不太隐私。</p><p>。。。</p><p>当然，还有很多有趣的应用，等你自己去发现。</p><p>OK，到此，nextcloud的搭建已经完成。自己去不断使用，不断探索功能吧。</p><p> </p><p>PS：在设置中还会一直有一些报错，虽然按照要求进行配置了，却还是报错，这就在暂且忽略掉吧</p>]]></content>
      
      
      <categories>
          
          <category> NextCloud </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> NextCloud </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 存储扩容，分给扩容</title>
      <link href="posts/fa9f.html"/>
      <url>posts/fa9f.html</url>
      
        <content type="html"><![CDATA[<h2 id="CentOS为例扩容分区"><a href="#CentOS为例扩容分区" class="headerlink" title="CentOS为例扩容分区"></a>CentOS为例扩容分区</h2><h3 id="MBR分区扩容"><a href="#MBR分区扩容" class="headerlink" title="MBR分区扩容"></a>MBR分区扩容</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -hT</span>文件系统    类型  容量 已用 可用 已用% 挂载点/dev/mapper/centos-root xfs  200G 2.2G 198G 2% /devtmpfs    devtmpfs 32G  0 32G 0% /devtmpfs     tmpfs  32G  0 32G 0% /dev/shmtmpfs     tmpfs  32G 49M 32G 1% /runtmpfs     tmpfs  32G  0 32G 0% /sys/fs/cgroup/dev/sda1    xfs  197M 139M 59M 71% /boottmpfs     tmpfs  6.3G  0 6.3G 0% /run/user/0/dev/mapper/centos-home xfs  628G 33M 718G 1% /home</code></pre><p>查看新增加的磁盘信息</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DEV-CMDB-DB02 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk -l</span>Disk /dev/sda: 53.7 GB, 53687091200 bytes, 104857600 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x000e0945   Device Boot      Start         End      Blocks   Id  System/dev/sda1   *        2048     1026047      512000   83  Linux/dev/sda2         1026048   104857599    51915776   8e  Linux LVMDisk /dev/sdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk /dev/mapper/centos_mb--centos7-root: 47.7 GB, 47747956736 bytes, 93257728 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk /dev/mapper/centos_mb--centos7-swap: 5368 MB, 5368709120 bytes, 10485760 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytes</code></pre><p>根据以上信息，对新增加的磁盘进行分区</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DEV-CMDB-DB02 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># fdisk /dev/sdb</span>Welcome to <span class="token function">fdisk</span> <span class="token punctuation">(</span>util-linux 2.23.2<span class="token punctuation">)</span>.Changes will remain <span class="token keyword">in</span> memory only, <span class="token keyword">until</span> you decide to <span class="token function">write</span> them.Be careful before using the <span class="token function">write</span> command.Device does not contain a recognized partition tableBuilding a new DOS disklabel with disk identifier 0x232defba.Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/sdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x232defba   Device Boot      Start         End      Blocks   Id  SystemCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: nPartition type:   p   primary <span class="token punctuation">(</span>0 primary, 0 extended, 4 free<span class="token punctuation">)</span>   e   extendedSelect <span class="token punctuation">(</span>default p<span class="token punctuation">)</span>: pPartition number <span class="token punctuation">(</span>1-4, default 1<span class="token punctuation">)</span>: 1First sector <span class="token punctuation">(</span>2048-209715199, default 2048<span class="token punctuation">)</span>: Using default value 2048Last sector, +sectors or +size<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;K,M,G&amp;#125; (2048-209715199, default 209715199): </span>Using default value 209715199Partition 1 of <span class="token function">type</span> Linux and of size 100 GiB is <span class="token keyword">set</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: tSelected partition 1Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: L 0  Empty           24  NEC DOS         81  Minix / old Lin bf  Solaris         1  FAT12           27  Hidden NTFS Win 82  Linux swap / So c1  DRDOS/sec <span class="token punctuation">(</span>FAT- 2  XENIX root      39  Plan 9          83  Linux           c4  DRDOS/sec <span class="token punctuation">(</span>FAT- 3  XENIX usr       3c  PartitionMagic  84  OS/2 hidden C:  c6  DRDOS/sec <span class="token punctuation">(</span>FAT- 4  FAT16 <span class="token operator">&lt;</span>32M      40  Venix 80286     85  Linux extended  c7  Syrinx          5  Extended        41  PPC PReP Boot   86  NTFS volume <span class="token keyword">set</span> da  Non-FS data     6  FAT16           42  SFS             87  NTFS volume <span class="token keyword">set</span> db  CP/M / CTOS / <span class="token keyword">.</span> 7  HPFS/NTFS/exFAT 4d  QNX4.x          88  Linux plaintext de  Dell Utility    8  AIX             4e  QNX4.x 2nd part 8e  Linux LVM       <span class="token function">df</span>  BootIt          9  AIX bootable    4f  QNX4.x 3rd part 93  Amoeba          e1  DOS access      a  OS/2 Boot Manag 50  OnTrack DM      94  Amoeba BBT      e3  DOS R/O         b  W95 FAT32       51  OnTrack DM6 Aux 9f  BSD/OS          e4  SpeedStor       c  W95 FAT32 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 52  CP/M            a0  IBM Thinkpad hi eb  BeOS fs         e  W95 FAT16 <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 53  OnTrack DM6 Aux a5  FreeBSD         ee  GPT             f  W95 Ext <span class="token punctuation">(</span>LBA<span class="token punctuation">)</span> 54  OnTrackDM6      a6  OpenBSD         ef  EFI <span class="token punctuation">(</span>FAT-12/16/10  OPUS            55  EZ-Drive        a7  NeXTSTEP        f0  Linux/PA-RISC b11  Hidden FAT12    56  Golden Bow      a8  Darwin UFS      f1  SpeedStor      12  Compaq diagnost 5c  Priam Edisk     a9  NetBSD          f4  SpeedStor      14  Hidden FAT16 <span class="token operator">&lt;</span>3 61  SpeedStor       ab  Darwin boot     f2  DOS secondary  16  Hidden FAT16    63  GNU HURD or Sys af  HFS / HFS+      fb  VMware VMFS    17  Hidden HPFS/NTF 64  Novell Netware  b7  BSDI fs         fc  VMware VMKCORE 18  AST SmartSleep  65  Novell Netware  b8  BSDI swap       fd  Linux raid auto1b  Hidden W95 FAT3 70  DiskSecure Mult bb  Boot Wizard hid fe  LANstep        1c  Hidden W95 FAT3 75  PC/IX           be  Solaris boot    ff  BBT            1e  Hidden W95 FAT1 80  Old Minix      Hex code <span class="token punctuation">(</span>type L to list all codes<span class="token punctuation">)</span>: 8eChanged <span class="token function">type</span> of partition <span class="token string">'Linux'</span> to <span class="token string">'Linux LVM'</span>Command <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: pDisk /dev/sdb: 107.4 GB, 107374182400 bytes, 209715200 sectorsUnits <span class="token operator">=</span> sectors of 1 * 512 <span class="token operator">=</span> 512 bytesSector size <span class="token punctuation">(</span>logical/physical<span class="token punctuation">)</span>: 512 bytes / 512 bytesI/O size <span class="token punctuation">(</span>minimum/optimal<span class="token punctuation">)</span>: 512 bytes / 512 bytesDisk label type: dosDisk identifier: 0x232defba   Device Boot      Start         End      Blocks   Id  System/dev/sdb1            2048   209715199   104856576   8e  Linux LVMCommand <span class="token punctuation">(</span>m <span class="token keyword">for</span> help<span class="token punctuation">)</span>: wThe partition table has been altered<span class="token operator">!</span>Calling ioctl<span class="token punctuation">(</span><span class="token punctuation">)</span> to re-read partition table.Syncing disks.</code></pre><p>创建物理卷</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DEV-CMDB-DB02 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># pvcreate /dev/sdb1</span><span class="token function">v</span>  Physical volume <span class="token string">"/dev/sdb1"</span> successfully created</code></pre><p>将新增加的分区/dev/sdb1加入到根目录分区centos_mb-centos7中</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@DEV-CMDB-DB02 ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgextend centos_mb-centos7 /dev/sdb1</span>  Volume group <span class="token string">"centos_mb-centos7"</span> successfully extended</code></pre><p>使用vgdisplay命令查看系统上的空闲空间</p><pre class=" language-bash"><code class="language-bash">root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># vgdisplay</span> --- Volume group --- VG Name    centos System ID    Format    lvm2 Metadata Areas  1 Metadata Sequence No 6 VG Access    read/write VG Status    resizable MAX LV    0 Cur LV    3 Open LV    3 Max PV    0 Cur PV    1 Act PV    1 VG Size    930.80 GiB PE Size    4.00 MiB Total PE    238285 Alloc PE / Size  212736 / 831.00 GiB Free PE / Size  25549 / 99.80 GiB  //这一项表示目前该系统上还存在99.80G的空闲空间（25549） VG UUID    a5hiAh-LB8M-9lRv-Ps1a-z35L-J4fk-sP3KrF</code></pre><p>将上面查到的空闲空间中的90G增减到/home分区上</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># lvextend -l +100%FREE /dev/mapper/centos-home  //或者使用－l参数（跟PE数量），即lvextend -l +25500 /dev/mapper/centos-home</span> Size of logical volume centos/home changed from 628.00 GiB <span class="token punctuation">(</span>160768 extents<span class="token punctuation">)</span> to 718.00 GiB <span class="token punctuation">(</span>183808 extents<span class="token punctuation">)</span>. Logical volume centos/home successfully resized. <span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># xfs_growfs /dev/mapper/centos-home</span>meta-data<span class="token operator">=</span>/dev/mapper/centos-home isize<span class="token operator">=</span>512 agcount<span class="token operator">=</span>4, agsize<span class="token operator">=</span>41156608 blks   <span class="token operator">=</span>      sectsz<span class="token operator">=</span>512 attr<span class="token operator">=</span>2, projid32bit<span class="token operator">=</span>1   <span class="token operator">=</span>      crc<span class="token operator">=</span>1  finobt<span class="token operator">=</span>0 spinodes<span class="token operator">=</span>0data  <span class="token operator">=</span>      bsize<span class="token operator">=</span>4096 blocks<span class="token operator">=</span>164626432, imaxpct<span class="token operator">=</span>25   <span class="token operator">=</span>      sunit<span class="token operator">=</span>0  swidth<span class="token operator">=</span>0 blksnaming <span class="token operator">=</span>version 2    bsize<span class="token operator">=</span>4096 ascii-ci<span class="token operator">=</span>0 ftype<span class="token operator">=</span>1log  <span class="token operator">=</span>internal    bsize<span class="token operator">=</span>4096 blocks<span class="token operator">=</span>80384, version<span class="token operator">=</span>2   <span class="token operator">=</span>      sectsz<span class="token operator">=</span>512 sunit<span class="token operator">=</span>0 blks, lazy-count<span class="token operator">=</span>1realtime <span class="token operator">=</span>none     extsz<span class="token operator">=</span>4096 blocks<span class="token operator">=</span>0, rtextents<span class="token operator">=</span>0data blocks changed from 164626432 to 188219392</code></pre><p>再次看着系统分区，发现home分区已经增加了90G（这种方式增加后，home分区之前的数据还不会丢失）</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># df -h</span>文件系统     容量 已用 可用 已用% 挂载点/dev/mapper/centos-root 200G 2.2G 198G 2% /devtmpfs     32G  0 32G 0% /devtmpfs      32G  0 32G 0% /dev/shmtmpfs      32G 49M 32G 1% /runtmpfs      32G  0 32G 0% /sys/fs/cgroup/dev/sda1    197M 139M 59M 71% /boottmpfs     6.3G  0 6.3G 0% /run/user/0/dev/mapper/centos-home 718G 33M 718G 1% /home</code></pre><p>虽然xfs文件系统只支持增加，不支持减少。但并不是说在xfs系统文件下不能减小，只是减小后，需要重新格式化才能挂载上。这样原来的数据就丢失了！</p><h3 id="GPT分区扩容"><a href="#GPT分区扩容" class="headerlink" title="GPT分区扩容"></a>GPT分区扩容</h3><p>GPT分区与MBR分区有一定区别，不能通过 growpart 进行分区扩容，所以还是采用新建LVM物理卷后合并到逻辑分区中的办法。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 磁盘分区工具</span>parted<span class="token comment" spellcheck="true"># 显示分区信息，如果将虚拟机的磁盘进行扩容后提示分区错误调整信息，直接选择两次Fix即可</span>print<span class="token comment" spellcheck="true"># 切换到扇区数显示</span>unit s<span class="token comment" spellcheck="true"># 显示分区信息（最后一个分区的结束扇区显示：4106239s）</span>print<span class="token comment" spellcheck="true"># 获取print中最后一个分区的end扇区，然后+1,作为新分区的开始扇区，创建主分区，将剩余空间全部创建到新分区中</span>mkpart primary  4106240s 100%<span class="token comment" spellcheck="true"># 再次查看分区信息，可以发现新建的分区</span>print<span class="token comment" spellcheck="true"># 激活新分区为LVM,4为新分区的分区号</span><span class="token keyword">set</span> 4 lvm on<span class="token comment" spellcheck="true"># 退出 parted </span>quit<span class="token comment" spellcheck="true"># 更新系统分区信息</span>partprobe<span class="token comment" spellcheck="true"># 创建LVM物理卷</span>pvcreate /dev/sda4<span class="token comment" spellcheck="true"># 将物理卷加入到卷组</span>vgextend centos /dev/sda4<span class="token comment" spellcheck="true"># 将剩余百分百空间都添加到逻辑卷中</span>lvextend -l +100%FREE /dev/centos/root<span class="token comment" spellcheck="true"># xfs 在线扩容分区</span>xfs_growfs /dev/centos/root<span class="token comment" spellcheck="true"># 查看扩容后分区状态信息</span><span class="token function">df</span> -h</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux 查看服务器远程管理IP(DELL iDrac和HP iLO)</title>
      <link href="posts/7f56.html"/>
      <url>posts/7f56.html</url>
      
        <content type="html"><![CDATA[<h3 id="CentOS"><a href="#CentOS" class="headerlink" title="CentOS"></a>CentOS</h3><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> -y OpenIPMI ipmitool<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ipmitool lan print</span>Set <span class="token keyword">in</span> Progress         <span class="token keyword">:</span> Set CompleteIP Address Source       <span class="token keyword">:</span> Static AddressIP Address              <span class="token keyword">:</span> 10.1.6.200Subnet Mask             <span class="token keyword">:</span> 255.255.255.0MAC Address             <span class="token keyword">:</span> e4:72:e2:c8:70:a5SNMP Community String   <span class="token keyword">:</span> TrapAdmin12<span class="token comment" spellcheck="true">#$</span>IP Header               <span class="token keyword">:</span> TTL<span class="token operator">=</span>0x40 Flags<span class="token operator">=</span>0x40 Precedence<span class="token operator">=</span>0x00 TOS<span class="token operator">=</span>0x10Default Gateway IP      <span class="token keyword">:</span> 10.1.6.254</code></pre><h3 id="Ubuntu"><a href="#Ubuntu" class="headerlink" title="Ubuntu"></a>Ubuntu</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">apt-get</span> <span class="token function">install</span> ipmitool<span class="token punctuation">[</span>root@localhost ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ipmitool lan print</span>Set <span class="token keyword">in</span> Progress         <span class="token keyword">:</span> Set CompleteIP Address Source       <span class="token keyword">:</span> Static AddressIP Address              <span class="token keyword">:</span> 10.1.6.200Subnet Mask             <span class="token keyword">:</span> 255.255.255.0MAC Address             <span class="token keyword">:</span> e4:72:e2:c8:70:a5SNMP Community String   <span class="token keyword">:</span> TrapAdmin12<span class="token comment" spellcheck="true">#$</span>IP Header               <span class="token keyword">:</span> TTL<span class="token operator">=</span>0x40 Flags<span class="token operator">=</span>0x40 Precedence<span class="token operator">=</span>0x00 TOS<span class="token operator">=</span>0x10Default Gateway IP      <span class="token keyword">:</span> 10.1.6.254</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS单用户模式重置系统密码</title>
      <link href="posts/9014.html"/>
      <url>posts/9014.html</url>
      
        <content type="html"><![CDATA[<h3 id="一、单用户模式简介"><a href="#一、单用户模式简介" class="headerlink" title="一、单用户模式简介"></a>一、单用户模式简介</h3><p>忘记root密码这个问题出现的几率是很高的，不过，在linux下解决这个问题也很简单，只需重启linux系统，然后引导进入linux的单用户模式（init1），由于单用户模式是不需要输入登录密码的，因此，可以直接登录系统，修改root密码即可解决问题。</p><h3 id="二、进入单用户模式修改密码"><a href="#二、进入单用户模式修改密码" class="headerlink" title="二、进入单用户模式修改密码"></a>二、进入单用户模式修改密码</h3><p>Centos6启动时读取的文件为：<code>/etc/grub.cfg</code></p><p>Centos7启动时读取的文件为：<code>/etc/grub2.cfg</code></p><h4 id="1、Centos6进入单用户修改密码"><a href="#1、Centos6进入单用户修改密码" class="headerlink" title="1、Centos6进入单用户修改密码"></a>1、Centos6进入单用户修改密码</h4><p>1、重启系统，进入系统欢迎界面按上下左右键进入GRUB界面；</p><p>2、在GRUB界面选择内核版本，按下’e’键；</p><p>3、在此界面可以进行编辑，在最后输入<code>single</code>再按回车键返回,选择kernel这行，并按下’b’键进入单用户模式。</p><p>4、修改密码</p><pre class=" language-bash"><code class="language-bash">$ Passwd root <span class="token comment" spellcheck="true">#对root密码进行修改</span></code></pre><p>5、reboot进行系统重启</p><h4 id="2、Centos7单用户修改密码"><a href="#2、Centos7单用户修改密码" class="headerlink" title="2、Centos7单用户修改密码"></a>2、Centos7单用户修改密码</h4><p>1、进入GRUB页面，选择相应的内核，按下’e’键；<br>备注：第一行为内核；第二行为援救模式。</p><p>2、进入内核修改信息界面，找到Linux16这一行；在这一行的末尾加上 <code>init=/bin/sh</code>按下 <code>Ctrl + x</code>进入单用户模式</p><p>3、进入单用户后，重新挂载根目录，使其可写；</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">mount</span> -o remount,rw /</code></pre><p>4、修改字符集（可选）</p><pre class=" language-bash"><code class="language-bash">$ Locale <span class="token comment" spellcheck="true">#查看当前字符集</span>$ <span class="token function">export</span> LANG<span class="token operator">=</span>en_US</code></pre><p>将终端的字符集改为英文</p><p>5、修改密码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">passwd</span> root</code></pre><p>6、当selinux防火墙启动时，修改密码后要创建文件</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">touch</span> /.autorelabel</code></pre><p>否则在系统重启时无法重启</p><p>7、重启系统</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">exec</span> /sbin/init</code></pre>]]></content>
      
      
      <categories>
          
          <category> CentOS </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS编译安装配置MariaDB数据库</title>
      <link href="posts/ed21.html"/>
      <url>posts/ed21.html</url>
      
        <content type="html"><![CDATA[<h2 id="安装环境"><a href="#安装环境" class="headerlink" title="安装环境"></a>安装环境</h2><p>操作系统：CentOS 7<br>MariaDB版本：mariadb-5.5.33a<br>MariaDB数据库存储目录：/data/mysql</p><h2 id="配置环境"><a href="#配置环境" class="headerlink" title="配置环境"></a>配置环境</h2><h3 id="1、安装系统"><a href="#1、安装系统" class="headerlink" title="1、安装系统"></a>1、安装系统</h3><p>略</p><h3 id="2、配置网络"><a href="#2、配置网络" class="headerlink" title="2、配置网络"></a>2、配置网络</h3><p>略</p><h3 id="3、配置防火墙"><a href="#3、配置防火墙" class="headerlink" title="3、配置防火墙"></a>3、配置防火墙</h3><p>开启 3306 端口</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#iptables防火墙配置</span><span class="token function">vi</span> /etc/sysconfig/iptables<span class="token comment" spellcheck="true">#允许所有IP经过3306端口通过防火墙</span>-A RH-Firewall-1-INPUT -m state --state NEW -m tcp -p tcp --dport 3306 -j ACCEPT<span class="token comment" spellcheck="true">#很多网友把这两条规则添加到防火墙配置的最后一行，导致防火墙启动失败，正确的应该是添加到默认的22端口这条规则的下面</span><span class="token comment" spellcheck="true">#配置完后须要重启使防火墙生效</span>/etc/init.d/iptables restart<span class="token comment" spellcheck="true">#firewalld防火墙配置</span><span class="token comment" spellcheck="true">#检查防火墙是否启用,及开通的端口</span>firewall-cmd --list-all<span class="token comment" spellcheck="true">#放通 3306端口</span>firewall-cmd --permanent --add-port<span class="token operator">=</span>3306/tcp<span class="token comment" spellcheck="true">#放通 10.248.0.0/28位访问 3306端口</span>firewall-cmd --permanent --add-rich-rule<span class="token operator">=</span><span class="token string">'rule family="ipv4" source address="10.248.0.0/28"  port port=3306 protocol=tcp accept'</span><span class="token comment" spellcheck="true">#重新载入防火墙配置使用配置生效</span>firewall-cmd --reload</code></pre><h3 id="4、关闭-SELINUX"><a href="#4、关闭-SELINUX" class="headerlink" title="4、关闭 SELINUX"></a>4、关闭 SELINUX</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/selinux/config<span class="token comment" spellcheck="true">#SELINUX=enforcing #注释掉</span><span class="token comment" spellcheck="true">#SELINUXTYPE=targeted #注释掉</span>SELINUX<span class="token operator">=</span>disabled <span class="token comment" spellcheck="true">#增加</span>:wq<span class="token operator">!</span>  <span class="token comment" spellcheck="true">#保存退出</span><span class="token function">shutdown</span> -r now <span class="token comment" spellcheck="true">#重启系统</span></code></pre><h2 id="编译安装"><a href="#编译安装" class="headerlink" title="编译安装"></a>编译安装</h2><h3 id="规划目录"><a href="#规划目录" class="headerlink" title="规划目录"></a>规划目录</h3><p>MariaDB安装包存放位置：<code>/usr/local/src</code></p><p>MariaDB编译安装位置：<code>/usr/local/mysql</code></p><h3 id="下载安装包"><a href="#下载安装包" class="headerlink" title="下载安装包"></a>下载安装包</h3><h4 id="下载MariaDB"><a href="#下载MariaDB" class="headerlink" title="下载MariaDB"></a>下载MariaDB</h4><p>访问官网或国内源下载</p><h4 id="下载cmake（MariaDB编译工具）"><a href="#下载cmake（MariaDB编译工具）" class="headerlink" title="下载cmake（MariaDB编译工具）"></a>下载cmake（MariaDB编译工具）</h4><p><code>http://www.cmake.org/files/v2.8/cmake-2.8.12.1.tar.gz</code></p><h4 id="安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"><a href="#安装编译工具及库文件（使用CentOS-yum命令安装，安装的比较多，方便以后编译安装php、nginx等）" class="headerlink" title="安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）"></a>安装编译工具及库文件（使用CentOS yum命令安装，安装的比较多，方便以后编译安装php、nginx等）</h4><pre class=" language-bash"><code class="language-bash">yum  <span class="token function">install</span> <span class="token function">make</span> apr* autoconf automake curl curl-devel gcc gcc-c++ gtk+-devel zlib-devel openssl openssl-devel pcre-devel gd kernel keyutils patch perl kernel-headers compat*  cpp glibc libgomp libstdc++-devel keyutils-libs-devel libsepol-devel libselinux-devel krb5-devel  libXpm* freetype freetype-devel freetype* fontconfig fontconfig-devel  libjpeg* libpng* php-common php-gd gettext gettext-devel ncurses* libtool* libxml2 libxml2-devel patch policycoreutils bison</code></pre><h3 id="安装篇"><a href="#安装篇" class="headerlink" title="安装篇"></a>安装篇</h3><h4 id="一、安装cmake"><a href="#一、安装cmake" class="headerlink" title="一、安装cmake"></a>一、安装cmake</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">cd</span> /usr/local/src<span class="token function">tar</span> zxvf cmake-2.8.12.1.tar.gz<span class="token function">cd</span> cmake-2.8.12.1./configure<span class="token function">make</span>   <span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span> <span class="token function">install</span>   <span class="token comment" spellcheck="true">#安装</span></code></pre><h4 id="二、安装MariaDB"><a href="#二、安装MariaDB" class="headerlink" title="二、安装MariaDB"></a>二、安装MariaDB</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">groupadd</span> mysql  <span class="token comment" spellcheck="true">#添加MariaDB数据库安装用户组mysql</span><span class="token function">useradd</span> -g mysql mysql -s /bin/false  <span class="token comment" spellcheck="true">#建用户mysql并加入到mysql组，不允许mysql用户直接登录系统</span><span class="token function">mkdir</span> -p /data/mysql  <span class="token comment" spellcheck="true">#创建MariaDB数据库存放目录</span><span class="token function">chown</span> -R mysql:mysql /data/mysql   <span class="token comment" spellcheck="true">#设置MariaDB数据库目录权限</span><span class="token function">mkdir</span> -p /usr/local/mysql <span class="token comment" spellcheck="true">#创建MariaDB安装目录</span><span class="token function">cd</span> /usr/local/src<span class="token function">tar</span> zxvf mariadb-5.5.33a.tar.gz  <span class="token comment" spellcheck="true">#解压</span><span class="token function">cd</span> mariadb-5.5.33a <span class="token comment" spellcheck="true">#进入安装目录</span>cmake <span class="token keyword">.</span> -DCMAKE_INSTALL_PREFIX<span class="token operator">=</span>/usr/local/mysql  -DMYSQL_DATADIR<span class="token operator">=</span>/data/mysql  -DSYSCONFDIR<span class="token operator">=</span>/etc <span class="token comment" spellcheck="true">#配置</span><span class="token function">make</span> <span class="token comment" spellcheck="true">#编译</span><span class="token function">make</span> <span class="token function">install</span>  <span class="token comment" spellcheck="true">#安装</span><span class="token function">cd</span> /usr/local/mysql<span class="token function">cp</span> ./support-files/my-huge.cnf  /etc/my.cnf   <span class="token comment" spellcheck="true">#拷贝配置文件（注意：如果/etc目录下面默认有一个my.cnf，直接覆盖即可）</span><span class="token function">vi</span> /etc/my.cnf   <span class="token comment" spellcheck="true">#编辑配置文件,在 [mysqld] 部分增加</span>datadir <span class="token operator">=</span> /data/mysql  <span class="token comment" spellcheck="true">#添加MariaDB数据库路径</span>./scripts/mysql_install_db --user<span class="token operator">=</span>mysql  <span class="token comment" spellcheck="true">#生成MariaDB系统数据库</span><span class="token function">cp</span> ./support-files/mysql.server  /etc/rc.d/init.d/mysqld  <span class="token comment" spellcheck="true">#把MariaDB加入系统启动</span><span class="token function">chmod</span> 755 /etc/init.d/mysqld   <span class="token comment" spellcheck="true">#增加执行权限</span><span class="token function">chkconfig</span> mysqld on  <span class="token comment" spellcheck="true">#加入开机启动</span><span class="token function">vi</span> /etc/rc.d/init.d/mysqld  <span class="token comment" spellcheck="true">#编辑</span>basedir <span class="token operator">=</span> /usr/local/mysql   <span class="token comment" spellcheck="true">#MariaDB程序安装路径</span>datadir <span class="token operator">=</span> /data/mysql  <span class="token comment" spellcheck="true">#MariaDB数据库存放目录</span><span class="token function">service</span> mysqld start  <span class="token comment" spellcheck="true">#启动</span><span class="token function">vi</span> /etc/profile   <span class="token comment" spellcheck="true">#把MariaDB服务加入系统环境变量：在最后添加下面这一行</span><span class="token function">export</span> PATH<span class="token operator">=</span><span class="token variable">$PATH</span>:/usr/local/mysql/bin<span class="token comment" spellcheck="true">#下面这两行把MariaDB的库文件链接到系统默认的位置，这样你在编译类似PHP等软件时可以不用指定MariaDB的库文件地址。</span><span class="token function">ln</span> -s /usr/local/mysql/lib/mysql /usr/lib/mysql<span class="token function">ln</span> -s /usr/local/mysql/include/mysql /usr/include/mysql<span class="token function">shutdown</span> -r now     <span class="token comment" spellcheck="true">#需要重启系统，等待系统重新启动之后继续在终端命令行下面操作</span>mysql_secure_installation    <span class="token comment" spellcheck="true">#设置MariaDB数据库root账号密码</span><span class="token comment" spellcheck="true">#根据提示按Y 回车输入2次密码</span><span class="token comment" spellcheck="true">#或者直接修改密码/usr/local/mysql/bin/mysqladmin -u root -p password "123456" #修改密码</span><span class="token function">service</span> mysqld restart  <span class="token comment" spellcheck="true">#重启</span>mysql -u root -p  <span class="token comment" spellcheck="true">#输入上面设置的root密码登录到mariadb控制台</span></code></pre><p>到此，MariaDB数据库安装完成！</p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> MariaDB </tag>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux find命令</title>
      <link href="posts/4935.html"/>
      <url>posts/4935.html</url>
      
        <content type="html"><![CDATA[<p>Linux find命令用来在指定目录下查找文件。任何位于参数之前的字符串都将被视为欲查找的目录名。如果使用该命令时，不设置任何参数，则find命令将在当前目录下查找子目录与文件。并且将查找到的子目录和文件全部进行显示。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span>   path   -option   <span class="token punctuation">[</span>   -print <span class="token punctuation">]</span>   <span class="token punctuation">[</span> -exec   -ok   <span class="token function">command</span> <span class="token punctuation">]</span>   <span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;&amp;#125; \;</span></code></pre><h4 id="参数说明"><a href="#参数说明" class="headerlink" title="参数说明 :"></a>参数说明 :</h4><p>find 根据下列规则判断 path 和 expression，在命令列上第一个 - ( ) , ! 之前的部份为 path，之后的是 expression。如果 path 是空字串则使用目前路径，如果 expression 是空字串则使用 -print 为预设 expression。</p><p>expression 中可使用的选项有二三十个之多，在此只介绍最常用的部份。</p><ul><li><p>-mount, -xdev : 只检查和指定目录在同一个文件系统下的文件，避免列出其它文件系统中的文件</p></li><li><p>-amin n : 在过去 n 分钟内被读取过</p></li><li><p>-anewer file : 比文件 file 更晚被读取过的文件</p></li><li><p>-atime n : 在过去n天内被读取过的文件</p></li><li><p>-cmin n : 在过去 n 分钟内被修改过</p></li><li><p>-cnewer file :比文件 file 更新的文件</p></li><li><p>-ctime n : 在过去n天内被修改过的文件</p></li><li><p>-empty : 空的文件-gid n or -group name : gid 是 n 或是 group 名称是 name</p></li><li><p>-ipath p, -path p : 路径名称符合 p 的文件，ipath 会忽略大小写</p></li><li><p>-name name, -iname name : 文件名称符合 name 的文件。iname 会忽略大小写</p></li><li><p>-size n : 文件大小 是 n 单位，b 代表 512 位元组的区块，c 表示字元数，k 表示 kilo bytes，w 是二个位元组。-type c : 文件类型是 c 的文件。</p></li><li><p>d: 目录</p></li><li><p>c: 字型装置文件</p></li><li><p>b: 区块装置文件</p></li><li><p>p: 具名贮列</p></li><li><p>f: 一般文件</p></li><li><p>l: 符号连结</p></li><li><p>s: socket</p></li><li><p>-pid n : process id 是 n 的文件</p></li></ul><p>你可以使用 ( ) 将运算式分隔，并使用下列运算。</p><pre class=" language-txt"><code class="language-txt">exp1 -and exp2! expr-not exprexp1 -or exp2exp1, exp2</code></pre><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>将目前目录及其子目录下所有延伸档名是 c 的文件列出来。</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find . -name "*.c"</span></code></pre><p>将目前目录其其下子目录中所有一般文件列出</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find . -type f</span></code></pre><p>将目前目录及其子目录下所有最近 20 天内更新过的文件列出</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find . -ctime -20</span></code></pre><p>查找/var/log目录中更改时间在7日以前的普通文件，并在删除之前询问它们：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find /var/log -type f -mtime +7 -ok rm &amp;#123;&amp;#125; \;</span></code></pre><p>查找前目录中文件属主具有读、写权限，并且文件所属组的用户和其他用户具有读权限的文件：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find . -type f -perm 644 -exec ls -l &amp;#123;&amp;#125; \;</span></code></pre><p>为了查找系统中所有文件长度为0的普通文件，并列出它们的完整路径：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># find / -type f -size 0 -exec ls -l &amp;#123;&amp;#125; \;</span></code></pre><p>服务器磁盘满，一般由大的日志文件导致，需找到大文件并删除。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -size +500M -print0<span class="token operator">|</span><span class="token function">xargs</span> -0 <span class="token function">du</span> -m<span class="token operator">|</span><span class="token function">sort</span> -nr</code></pre><p>上述方法从根路径查找，可能列出一些系统文件。可以在这个查找之前先进行一下过滤。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">du</span> -m -d 1 /<span class="token operator">|</span><span class="token function">sort</span> -nr</code></pre><p>记得写过一个xxx.c的文件，但是忘了放哪里了</p><pre class=" language-bash"><code class="language-bash"><span class="token function">find</span> / -name *xxx*.c <span class="token comment" spellcheck="true">#模糊查找下这个文件</span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 数据备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 备份 </tag>
            
            <tag> 恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux系统安装之后，如何调节CPU性能策略</title>
      <link href="posts/efc.html"/>
      <url>posts/efc.html</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><ul><li><p>1、ondemand：系统默认的超频模式，按需调节，内核提供的功能，不是很强大，但有效实现了动态频率调节，平时以低速方式运行，当系统负载提高时候自动提高频率。以这种模式运行不会因为降频造成性能降低，同时也能节约电能和降低温度。一般官方内核，还有CM7的默认的方式都是ondemand。<br>流畅度： 一般，流畅</p></li><li><p>2、interactive：交互模式，直接上最高频率，然后看CPU负荷慢慢降低，比较耗电。<br>流畅度： 最高，极流畅<br>Interactive 是以 CPU 排程数量而调整频率，从而实现省电。<br>InteractiveX 是以 CPU 负载来调整 CPU 频率，不会过度把频率调低。所以比 Interactive 反应好些，但是省电的效果一般</p></li><li><p>3、conservative：保守模式，类似于ondemand，但调整相对较缓，想省电就用他吧。Google官方内核，kang内核默认模式。<br>流畅度： 高，流畅</p></li><li><p>4、smartass：聪明模式，是I和C模式的升级，该模式在比i模式不差的响应的前提下会做到了更加省电<br>流畅度： 最高，流畅</p></li><li><p>5、performance：性能模式！只有最高频率，从来不考虑消耗的电量，性能没得说，但是耗电量…<br>流畅度：还需要说么？还有比这种模式更流畅的吗？</p></li><li><p>6、powersave 省电模式，通常以最低频率运行，打不死我也不用。<br>流畅度： 极低</p></li><li><p>7、userspace：用户自定义模式，系统将变频策略的决策权交给了用户态应用程序，并提供了相应的接口供用户态应用程序调节CPU 运行频率使用。也就是长期以来都在用的那个模式。可以通过手动编辑配置文件进行配置<br>流畅度：根据设置而定</p></li><li><p>8、Hotplug：类似于ondemand, 但是cpu会在关屏下尝试关掉一个cpu，并且带有deep sleep，比较省电。<br>流畅度：一般，流畅</p></li></ul><h2 id="Linux下设置相关参数"><a href="#Linux下设置相关参数" class="headerlink" title="Linux下设置相关参数"></a>Linux下设置相关参数</h2><h3 id="设置performance模式"><a href="#设置performance模式" class="headerlink" title="设置performance模式"></a>设置performance模式</h3><h4 id="CentOS7下配置"><a href="#CentOS7下配置" class="headerlink" title="CentOS7下配置"></a>CentOS7下配置</h4><p>首先，需要知道Linux有一个叫做cpupower的工具集，用来检查和调整处理器的能耗相关的一些features。其中的一个工具叫做“frequency-set”，可以用来调整cpu运行频率。</p><p>使用下面的命令来查看当下可用的drivers，即governors:</p><pre class=" language-bash"><code class="language-bash">cpupower frequency-info --governors<span class="token comment" spellcheck="true"># cpupower -c all frequency-info --governors</span>analyzing CPU 0:   available cpufreq governors: performance powersaveanalyzing CPU 1:   available cpufreq governors: performance powersave</code></pre><p>光手动的用<code>cpupower –c all frequency-set –g performance</code> 来修改是不够的，我们需要让这个配置在开机的时候就生效。所以，需要创建一个由systemd管理的服务，让这个服务在开机的时候就自动运行。</p><p>运行下面的命令，直接修改<code>/etc/systemd/system/cpupower.service</code>这个文件，使得这个服务开机就运行一次（oneshot）, 不始终保持运行。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cat</span> <span class="token operator">&lt;&lt;</span> EOF <span class="token operator">|</span> <span class="token function">sudo</span> <span class="token function">tee</span> /etc/systemd/system/cpupower.service<span class="token punctuation">[</span>Unit<span class="token punctuation">]</span>Description<span class="token operator">=</span>CPU powersave<span class="token punctuation">[</span>Service<span class="token punctuation">]</span>Type<span class="token operator">=</span>oneshotExecStart<span class="token operator">=</span>/usr/bin/cpupower -c all frequency-set -g powersave<span class="token punctuation">[</span>Install<span class="token punctuation">]</span>WantedBy<span class="token operator">=</span>multi-user.targetEOF</code></pre><p>问题解决。</p><h4 id="其它办法"><a href="#其它办法" class="headerlink" title="其它办法"></a>其它办法</h4><p>方法一：在bios(cpu 选项，或者电源管理选项)直接配置为max performance（我的系统无法设置），重启即可；</p><p>方法二：</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> cpupowerutilscpupower -c all frequency-set -g performance  <span class="token comment" spellcheck="true">#（不用安装，自带cpupower 命令）</span><span class="token comment" spellcheck="true">#或者</span>cpupower frequency-set -g performance</code></pre><p>方法三：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">service</span> cpuspeed stop</code></pre><p>这里按需重启系统，最好试一下重启能不能生效，有的服务器会在重启之后失效，必须在bios里面设置</p><h3 id="查看当前governor"><a href="#查看当前governor" class="headerlink" title="查看当前governor"></a>查看当前governor</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">cat</span> /sys/devices/system/cpu/cpu0/cpufreq/scaling_governor<span class="token comment" spellcheck="true">#powersave或者performance</span><span class="token function">cat</span> /proc/cpuinfo <span class="token operator">|</span> <span class="token function">grep</span> -i <span class="token string">"cpu mhz"</span><span class="token comment" spellcheck="true">#显示每个CPU的当前运行频率</span>cpupower frequency-info</code></pre>]]></content>
      
      
      <categories>
          
          <category> 操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> CPU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Ubuntu全盘备份与恢复，亲自总结，实测可靠</title>
      <link href="posts/58b2.html"/>
      <url>posts/58b2.html</url>
      
        <content type="html"><![CDATA[<p>我该如何备份我的Ubuntu系统呢？很简单，就像你备份或压缩其它东西一样，使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去！</p><h2 id="Ubuntu-备份与恢复系统"><a href="#Ubuntu-备份与恢复系统" class="headerlink" title="Ubuntu 备份与恢复系统"></a>Ubuntu 备份与恢复系统</h2><h3 id="系统备份"><a href="#系统备份" class="headerlink" title="系统备份"></a>系统备份</h3><blockquote><p>使用TAR。和Windows不同，Linux不会限制root访问任何东西，你可以把分区上的所有东西都扔到一个TAR文件里去</p></blockquote><p>打开一个终端，并运行 sudo su（回车后要求输入密码）；</p><p>继续在终端中输入以下指令，进入系统根目录：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /<span class="token comment" spellcheck="true">#开始备份系统，在终端中输入</span>$ <span class="token function">tar</span> cvpzf backup.tgz --exclude<span class="token operator">=</span>/proc --exclude<span class="token operator">=</span>/lost+found --exclude<span class="token operator">=</span>/backup.tgz --exclude<span class="token operator">=</span>/mnt --exclude<span class="token operator">=</span>/sys --exclude<span class="token operator">=</span>/media /</code></pre><p>让我们来简单看一下这个命令：</p><p><code>tar</code> 是用来备份的程序</p><ul><li>c 新建一个备份文档</li><li>v 详细模式， tar程序将在屏幕上实时输出所有信息。</li><li>p 保存许可，并应用到所有文件。</li><li>z 采用‘gzip’压缩备份文件，以减小备份文件体积。</li><li>f 说明备份文件存放的路径， Ubuntu.tgz 是本例子中备份文件名。</li><li>“/“ 是我们要备份的目录，在这里是整个文件系统。</li></ul><blockquote><p>在档案文件名”backup.tgz”和要备份的目录名”/“之间给出了备份时必须排除在外的目录。有些目录是无用的，例如”/proc”、”/lost + found”、”/sys”。当然，”backup.tgz”这个档案文件本身必须排除在外，否则你可能会得到一些超出常理的结果。如果不把”/mnt”排除在外，那么挂载在”/mnt”上的其它分区也会被备份。另外需要确认一下”/media”上没有挂载任何东西(例如光盘、移动硬盘)，如果有挂载东西， 必须把”/media”也排除在外.</p></blockquote><p>备份完成后，在文件系统的根目录将生成一个名为”backup.tgz”的文件，它的尺寸有可能非常大。现在你可以把它烧录到DVD上或者放到你认为安全的地方去。<br>在备份命令结束时你可能会看到这样一个提示：”tar: Error exit delayed from previous errors”，多数情况下你可以忽略它。</p><h3 id="恢复系统"><a href="#恢复系统" class="headerlink" title="恢复系统"></a>恢复系统</h3><p>如果原来的Ubuntu系统已经崩溃，无法进入。则可以使用Ubuntu安装U盘（live USB）进入试用Ubuntu界面。</p><p>切换到root用户，找到之前Ubuntu系统的根目录所在磁盘分区（一般电脑上的磁盘分区（假设分区名称为sdaX）均可以在当前Ubuntu系统的根目录下的media目录下（即/media）找到。目录通常为当前根目录下 cd /media/磁盘名称/分区名称）。进入该分区，输入以下指令来删除该根目录下的所有文件：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">rm</span> -rf /media/磁盘名称/分区名称*<span class="token comment" spellcheck="true">#将备份文件”backup.tgz”拷入该分区；</span>$ <span class="token function">sudo</span> <span class="token function">cp</span> -i backup.tgz /media/磁盘名/分区名sdaX<span class="token comment" spellcheck="true">#进入分区并将压缩文件解压缩，参数x是告诉tar程序解压缩备份文件。</span>$ <span class="token function">sudo</span> <span class="token function">tar</span> xvpzf backup.tgz<span class="token comment" spellcheck="true">#如果你的档案文件是使用Bzip2压缩的，应该用</span>$ <span class="token function">sudo</span> <span class="token function">tar</span> xvpjf backup.tar.bz2 -C /<span class="token comment" spellcheck="true">#注意：上面的命令会用档案文件中的文件覆盖分区上的所有文件。</span><span class="token comment" spellcheck="true">#重新创建那些在备份时被排除在外的目录；</span>$ <span class="token function">sudo</span> <span class="token function">mkdir</span> proc lost+found mnt sys media<span class="token comment" spellcheck="true">#或者这样：</span><span class="token function">mkdir</span> proc<span class="token function">mkdir</span> lost+found<span class="token function">mkdir</span> mnt<span class="token function">mkdir</span> sys<span class="token comment" spellcheck="true">#如有必要检查下分区与引导</span><span class="token comment" spellcheck="true">#查看当前分区UUID命令</span>$ blkid /dev/sdb1<span class="token comment" spellcheck="true">#修改引导</span>$ <span class="token function">vi</span> /etc/fstab<span class="token comment" spellcheck="true">#安装grub引导</span>$ grup-install /dev/sdb<span class="token comment" spellcheck="true">#更新引导</span>$ update-grub2<span class="token comment" spellcheck="true">#检查分区挂载是否正常</span>$ <span class="token function">mount</span> -a</code></pre><p>当你重启电脑，你会发现一切东西恢复到你创建备份时的样子了！</p><h2 id="备份工具"><a href="#备份工具" class="headerlink" title="备份工具"></a>备份工具</h2><p>常用工具列表</p><ul><li>dd                   数据复制,转换实用工具</li><li>tar                  GNU磁盘存档实用工具</li><li>cpio                数据存档实用工具</li><li>dump/restore</li></ul><h3 id="dd-命令"><a href="#dd-命令" class="headerlink" title="dd 命令"></a>dd 命令</h3><p>备份mbr</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">dd</span> if<span class="token operator">=</span>/dev/sda of<span class="token operator">=</span>/backup/mbr.img bs<span class="token operator">=</span>512 count<span class="token operator">=</span>1</code></pre><p>还原mbr</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">dd</span> if<span class="token operator">=</span>/backup/mbr.img of<span class="token operator">=</span>/dev/sda bs<span class="token operator">=</span>446 count<span class="token operator">=</span>1</code></pre><p>还原分区表,跳过主引导记录</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">dd</span> if<span class="token operator">=</span>/backup/mbr.img of<span class="token operator">=</span>/dev/sda bs<span class="token operator">=</span>1 count<span class="token operator">=</span>64 skip<span class="token operator">=</span>446 seek<span class="token operator">=</span>446</code></pre><h3 id="GNU-TAR"><a href="#GNU-TAR" class="headerlink" title="GNU/TAR"></a>GNU/TAR</h3><p>备份</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">tar</span> -cpzvf backup.tar.gz /media/usb/*</code></pre><p>还原</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">tar</span> -xpzvf backup.tar.gz -C /media/usb/</code></pre><h3 id="xfsdump-xfsrestore"><a href="#xfsdump-xfsrestore" class="headerlink" title="xfsdump/xfsrestore"></a>xfsdump/xfsrestore</h3><p>备份</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">sudo</span> xfsdump - /boot <span class="token operator">></span> backup.file</code></pre><p>还原</p><pre class=" language-bash"><code class="language-bash"> <span class="token function">sudo</span> <span class="token function">cat</span> backup.file <span class="token operator">|</span> xfsrestore - /boot</code></pre><h3 id="救援工具"><a href="#救援工具" class="headerlink" title="救援工具"></a>救援工具</h3><p>可启动光盘</p><p><code>Redo Backup and Recovery</code></p><p>开源启动光盘的备份和恢复工具,具有GUI界面.</p>]]></content>
      
      
      <categories>
          
          <category> 数据备份 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 备份 </tag>
            
            <tag> 恢复 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>怎么搭建NTP时间服务器</title>
      <link href="posts/7.html"/>
      <url>posts/7.html</url>
      
        <content type="html"><![CDATA[<h2 id="Linux中怎么搭建NTP服务器"><a href="#Linux中怎么搭建NTP服务器" class="headerlink" title="Linux中怎么搭建NTP服务器"></a>Linux中怎么搭建NTP服务器</h2><blockquote><p>说明：本次实验采用两台加载CentOS7.7版本的镜像文件的虚拟机，要求一台配置好时间服务之后，由另一台进行同步。</p></blockquote><p>说在前面：ntp和ntpdate区别</p><ul><li>两个服务都是centos自带的（centos7中不自带ntp）。ntp的安装包名是ntp；ntpdate的安装包是ntpdate。他们并非由一个安装包提供。</li><li>ntp守护进程为ntpd，配置文件是/etc/ntp.conf</li><li>ntpdate用于客户端的时间矫正，非NTP服务器可以不启动NTP。</li></ul><p>我们先讲一下时间服务器的搭建：</p><p>首先先说一下我们常用的Windows系统的时间是怎样的，我们通过控制面板打开日期和时间，然后选择Internet时间，点击更改设置就可以知道当前的服务器是怎样与时间同步的了。<br>这里要求时间服务器要能上网（为了保证精度），它从外部同步时间，最后给内部主机提供同步。</p><p>先讲几条基础命令</p><table><thead><tr><th align="center">功能</th><th align="left">命令</th></tr></thead><tbody><tr><td align="center">查看时间</td><td align="left">date</td></tr><tr><td align="center">查看硬件时间</td><td align="left">hwclock -r</td></tr><tr><td align="center">查看系统所在时区</td><td align="left">date -R</td></tr><tr><td align="center">查看所有时区</td><td align="left">ls /usr/share/zoneinfo/ 或者是：timedatectl list-timezones</td></tr><tr><td align="center">查看其它时区的当前时间</td><td align="left">zdump Hongkong</td></tr><tr><td align="center">修改系统时间</td><td align="left">date -s “20190408 17:41:00”</td></tr><tr><td align="center">修改时区①</td><td align="left">tzselect（之后按数字进行选择） vim .bash_profile TZ=‘Asia/hanghai’; export TZ（粘贴在末尾）source ~/.bash_profile</td></tr><tr><td align="center">修改时区②</td><td align="left">timedatectl set-timezone Europe/Lisbon</td></tr><tr><td align="center">保存时间修改</td><td align="left">clock -w</td></tr></tbody></table><h3 id="NTP服务的命令、配置"><a href="#NTP服务的命令、配置" class="headerlink" title="NTP服务的命令、配置"></a>NTP服务的命令、配置</h3><h4 id="1、有关ntp的命令"><a href="#1、有关ntp的命令" class="headerlink" title="1、有关ntp的命令"></a>1、有关ntp的命令</h4><table><thead><tr><th align="center">其他命令</th><th align="left">功能</th></tr></thead><tbody><tr><td align="center">ntpq -p</td><td align="left">查询网络中的NTP服务器，同时显示客户端和每个服务器的连接状态</td></tr><tr><td align="center">ntpdate -q 192.168.0.35</td><td align="left">查看上层服务器状态</td></tr><tr><td align="center">ntpdate 192.168.0.35</td><td align="left">更新时间</td></tr><tr><td align="center">watch ntpdate 192.168.0.35</td><td align="left">这条命令为客户端使用，每2秒会发生一次变化</td></tr></tbody></table><h4 id="2、有关ntpq-p的注解"><a href="#2、有关ntpq-p的注解" class="headerlink" title="2、有关ntpq -p的注解"></a>2、有关ntpq -p的注解</h4><table><thead><tr><th align="center">remote</th><th align="left">远程主机的主机名或IP</th></tr></thead><tbody><tr><td align="center">*</td><td align="left">目前正在使用的上层NTP</td></tr><tr><td align="center">+</td><td align="left">已连线,可提供时间更新的候补服务器</td></tr><tr><td align="center">-</td><td align="left">远程服务器被clustering algorithm认为是不合格的NTP Server</td></tr><tr><td align="center">x</td><td align="left">远程服务器不可用</td></tr></tbody></table><table><thead><tr><th align="center">其它</th><th align="left">注解</th></tr></thead><tbody><tr><td align="center">refid</td><td align="left">上级NTP的时间基准服务器</td></tr><tr><td align="center">st</td><td align="left">就是stratum 上层NTP的层级，层级0-15</td></tr><tr><td align="center">when</td><td align="left">几秒钟前曾做过时间同步更新</td></tr><tr><td align="center">poll</td><td align="left">下一次更新在几秒后，逐步增大</td></tr><tr><td align="center">reach</td><td align="left">八进制数，已经向上层服务器要求更新的次数</td></tr><tr><td align="center">delay</td><td align="left">网络传输过程中的延迟时间</td></tr><tr><td align="center">offset</td><td align="left">本地和服务器之间的时间差别，越接近0，说明和服务器的时间越接近</td></tr><tr><td align="center">jitter linux</td><td align="left">系统时间与bios硬件时钟之间的差异</td></tr></tbody></table><h4 id="3、-etc-ntp-conf-ntp的配置文件介绍"><a href="#3、-etc-ntp-conf-ntp的配置文件介绍" class="headerlink" title="3、/etc/ntp.conf ntp的配置文件介绍"></a>3、/etc/ntp.conf ntp的配置文件介绍</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#系统时间和硬件时间的偏差记录</span>driftfile /var/lib/ntp/drift<span class="token comment" spellcheck="true">#允许所有的访问，</span>restrict default nomodify notrap nopeer noquery`<span class="token comment" spellcheck="true">#允许 192.168.221.0网段访问</span>restrict <span class="token punctuation">[</span>192.168.221.0<span class="token punctuation">]</span> mask <span class="token punctuation">[</span>255.255.255.0<span class="token punctuation">]</span> <span class="token punctuation">[</span>parameter<span class="token punctuation">]</span></code></pre><table><thead><tr><th align="center">parameter的参数</th><th align="left">注解</th></tr></thead><tbody><tr><td align="center">ignore</td><td align="left">拒绝所有类型的ntp连接</td></tr><tr><td align="center">nomodify</td><td align="left">客户端不能使用ntpc与ntpq两支程式来修改服务器的时间参数</td></tr><tr><td align="center">noquery</td><td align="left">客户端不能使用ntpq、ntpc等指令来查询服务器时间，等于不提供ntp的网络校时</td></tr><tr><td align="center">notrap</td><td align="left">不提供trap这个远程时间登录的功能</td></tr><tr><td align="center">notrust</td><td align="left">拒绝没有认证的客户端</td></tr><tr><td align="center">nopeer</td><td align="left">不与其他同一层的ntp服务器进行时间同步</td></tr></tbody></table><h3 id="搭建NTP服务"><a href="#搭建NTP服务" class="headerlink" title="搭建NTP服务"></a>搭建NTP服务</h3><p>关闭防火墙</p><pre class=" language-bash"><code class="language-bash">systemctl stop firewalld.service</code></pre><p>安装ntp包</p><pre class=" language-bash"><code class="language-bash">yum <span class="token function">install</span> ntp -y</code></pre><p>编辑配置文件</p><pre class=" language-bash"><code class="language-bash">vim /etc/ntp.conf</code></pre><p>可以将中间的几行默认上层时间的服务器注释掉，也可以不注释掉。注释掉之后我们这台时间服务器就没法向外部服务器同步了，我是为了方便演示，后面加上图中的指令：表示使用本地时间作为ntp服务器提供给ntp客户端。</p><pre class=" language-bash"><code class="language-bash">restrict 192.168.0.0 mask 255.255.255.0 modify notrap<span class="token comment" spellcheck="true">#为192.168.0.0网段提供授时服务</span>server 127.127.1.0  prefer<span class="token comment" spellcheck="true">#prefer代表这台主机优先级最高</span>fudge 1127.127.1.0 stratum 8<span class="token comment" spellcheck="true">#指定服务器为本地，设置层级为8</span>systemctl restart ntpd<span class="token comment" spellcheck="true">#重启服务。</span></code></pre><p>我们可以使用 <code>netstat -nlutp | grep ntp</code> 可以查看与ntp服务有关联的进程。</p><p>如果客户机上安装有ntp，在客户端需要修改<code>/etc/ntp.conf</code>，添加以下内容</p><pre class=" language-bash"><code class="language-bash">server 192.168.0.1    <span class="token comment" spellcheck="true">#指名上层NTP服务器</span>restrict 192.168.0.1       <span class="token comment" spellcheck="true">#放行156.0.26.6</span></code></pre><p>修改保存后使用<code>ntpq -p</code>命令查看</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@centos<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># ntpq -p</span>   remote       refid      st t  when  poll reach  delay  offset  jitter <span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span><span class="token operator">==</span>   192.168.0.1    LOCAL<span class="token punctuation">(</span>0<span class="token punctuation">)</span>  3 u   93   1   377   0.676   -0.563   0.545</code></pre><p>未安装ntp可使用ntpdate定时同步<br>设置计划任务，编辑配置文件之后，让它实现一开机就自动同步。</p><pre class=" language-bash"><code class="language-bash">vim /etc/crontab<span class="token comment" spellcheck="true">#插入下面这句话：</span>*/30 * * * * root /usr/sbin/ntpdate 192.168.0.1 <span class="token operator">></span> /dev/null 2<span class="token operator">></span><span class="token operator">&amp;</span>1<span class="token comment" spellcheck="true">#每30秒同步一次</span></code></pre><p>linux shell中<code>&quot;2&gt;&amp;1&quot;</code>含义</p><table><thead><tr><th align="center">命令</th><th align="left">注解</th></tr></thead><tbody><tr><td align="center">&gt;</td><td align="left">重定向</td></tr><tr><td align="center">/dev/null</td><td align="left">代表空设备</td></tr><tr><td align="center">2    stderr</td><td align="left">标准错误</td></tr><tr><td align="center">&amp;</td><td align="left">表示等同于</td></tr><tr><td align="center">2&gt;1&amp;1</td><td align="left">将标准错误重定向到标准输出</td></tr></tbody></table><h2 id="windows搭建NTP时钟服务器"><a href="#windows搭建NTP时钟服务器" class="headerlink" title="windows搭建NTP时钟服务器"></a>windows搭建NTP时钟服务器</h2><h3 id="配置-NTP"><a href="#配置-NTP" class="headerlink" title="配置 NTP"></a>配置 NTP</h3><h4 id="修改注册表项"><a href="#修改注册表项" class="headerlink" title="修改注册表项"></a>修改注册表项</h4><p>在搜索框中打开注册表，使用命令： <code>regedit</code>，进入注册表项<code>HKEY_LOCAL_MACHINE—&gt;SYSTEM—&gt;CurrentControlSet—&gt;Services—&gt;W32Time—&gt;TimeProviders—&gt;NtpServer</code></p><p>把<code>Enabled</code> 值设置为 1打开NTP，（系统默认0）。</p><p>进入注册表项<code>HKEY_LOCAL_MACHINE—&gt;SYSTEM—&gt;CurrentControlSet—&gt;Services—&gt;W32Time—&gt;Config</code></p><p>把<code>AnnounceFlags</code>值设置为 5 （系统默认 10）。该设定强制主机将它自身宣布为可靠的时间源，从而使用内置的互补金属氧化物半导体(CMOS) 时钟。</p><p><code>HKEY_LOCAL_MACHINE\SYSTEM\CurrentControlSet\Services\W32Time\TimeProviders\NtpClient</code>的「enable」设定为0 以防止作为客户端自动同步外界的时间服务。</p><h4 id="启动时间服务"><a href="#启动时间服务" class="headerlink" title="启动时间服务"></a>启动时间服务</h4><p>找到Windows time服务，使用命令：<code>services.msc</code></p><p>将Windows time服务设置为自动启动，点击应用和确定，重新启动电脑或者主机，所有配置生效。</p><p>NTP时钟搭建完毕，此时只需其他设备将本电脑IP填入时钟同步，点击更新即可同步改时钟</p><p>打开客户机控制面板，日期和时间，修改 Internet 时间中地址。</p><h4 id="域控中配置组策略"><a href="#域控中配置组策略" class="headerlink" title="域控中配置组策略"></a>域控中配置组策略</h4><p>运行输入<code>gpedit.msc</code>，计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“配置Window NTP客户端”，选择属性。</p><ul><li>选择“已启用”</li><li>在Ntp Server对应栏位输入时间同步服务器的地址。</li><li>Tpye栏位选择NTP。</li><li>SpecialPollInterval栏位输入需要同步的时间周期，单位：秒，如：每10分钟同步一次，输入600。</li></ul><p>计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“启用Window NTP客户端”，选择“已启用”</p><p>计算机配置–&gt;管理模板–&gt;系统–&gt;Windows时间服务–&gt;时间提供程序–&gt;右单击“启用Window NTP服务端”，选择“已禁用”</p><p>时间和日期属性中，填入时间同步服务器地址，方便必要时进行手动同步。</p><h4 id="时间同步服务间隔时间太长"><a href="#时间同步服务间隔时间太长" class="headerlink" title="时间同步服务间隔时间太长"></a>时间同步服务间隔时间太长</h4><p>由于Windows时间同步服务距上次同步时间较长，造成时间显示不正常。</p><p>解决方法：打开注册表编辑器（在运行对话框输入“regedit”），定位到<code>HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\W32Time\TimeProviders\NtpClient</code>然后找到为<code>SpecialPolllnterval</code>的键，将键值的基数改为“十进制”接着把键值数据改为“1800”(30分钟)默认是“604800”(7天),（根据自己的需求填入，记住单位是秒），按F5刷新一下，就可以了。</p><h4 id="时间同步地址注册表快速更改"><a href="#时间同步地址注册表快速更改" class="headerlink" title="时间同步地址注册表快速更改"></a>时间同步地址注册表快速更改</h4><pre class=" language-bat"><code class="language-bat">Windows Registry Editor Version 5.00[HKEY_LOCAL_MACHINE\SOFTWARE\Microsoft\Windows\CurrentVersion\DateTime\Servers]@="0""0"="ntp1.aliyun.com""1"="ntp2.aliyun.com""2"="time.windows.com""3"="time.nist.gov"[HKEY_LOCAL_MACHINE\SYSTEM\ControlSet001\services\W32Time\TimeProviders\NtpClient]'SpecialPolllnterval'="1800"</code></pre><p>另存为NTP.reg文件,双击导入</p>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> Linux </tag>
            
            <tag> Windows Server </tag>
            
            <tag> NTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>KMS激活专用：所有版本的GVLK密钥对照表</title>
      <link href="posts/ipk.html"/>
      <url>posts/ipk.html</url>
      
        <content type="html"><![CDATA[<p>GVLK密钥是专门用于KMS激活的密钥，如果想使用KMS激活，那么必须先将系统的KEY替换为对应版本的GVLK密钥。KMS不仅可以激活Windows 8、Windows 8.1和Windows 7、Windows 10这类我们常用的系统，还可以激活各种版本的Windows Server系统。</p><p>KMS激活方法：<a href="/posts/kms.html">kms激活命令：一句命令激活Windows/Office</a></p><p>以下是GVLK密钥版本对照表，可配合KMS服务器进行使用。</p><h2 id="Windows-系列GVLK密钥"><a href="#Windows-系列GVLK密钥" class="headerlink" title="Windows 系列GVLK密钥"></a>Windows 系列GVLK密钥</h2><h3 id="Windows-Server-2019"><a href="#Windows-Server-2019" class="headerlink" title="Windows Server 2019"></a>Windows Server 2019</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows Server 2019 Datacenter</td><td align="center">WMDGN-G9PQG-XVVXX-R3X43-63DFG</td></tr><tr><td align="center">Windows Server 2019 Standard</td><td align="center">N69G4-B89J2-4G8F4-WWYCC-J464C</td></tr><tr><td align="center">Windows Server 2019 Essentials</td><td align="center">WVDHN-86M7X-466P6-VHXV7-YY726</td></tr></tbody></table><h3 id="Windows-Server-2016"><a href="#Windows-Server-2016" class="headerlink" title="Windows Server 2016"></a>Windows Server 2016</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows Server 2016 Datacenter</td><td align="center">CB7KF-BWN84-R7R2Y-793K2-8XDDG</td></tr><tr><td align="center">Windows Server 2016 Standard</td><td align="center">WC2BQ-8NRM3-FDDYY-2BFGV-KHKQY</td></tr><tr><td align="center">Windows Server 2016 Essentials</td><td align="center">JCKRF-N37P4-C2D82-9YXRT-4M63B</td></tr></tbody></table><h3 id="Windows-10"><a href="#Windows-10" class="headerlink" title="Windows 10"></a>Windows 10</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows 10 Professional</td><td align="center">W269N-WFGWX-YVC9B-4J6C9-T83GX</td></tr><tr><td align="center">Windows 10 Professional N</td><td align="center">MH37W-N47XK-V7XM9-C7227-GCQG9</td></tr><tr><td align="center">Windows 10 Enterprise</td><td align="center">NPPR9-FWDCX-D2C8J-H872K-2YT43</td></tr><tr><td align="center">Windows 10 Enterprise N</td><td align="center">DPH2V-TTNVB-4X9Q3-TJR4H-KHJW4</td></tr><tr><td align="center">Windows 10 Education</td><td align="center">NW6C2-QMPVW-D7KKK-3GKT6-VCFB2</td></tr><tr><td align="center">Windows 10 Education N</td><td align="center">2WH4N-8QGBV-H22JP-CT43Q-MDWWJ</td></tr><tr><td align="center">Windows 10 Enterprise 2015 LTSB</td><td align="center">WNMTR-4C88C-JK8YV-HQ7T2-76DF9</td></tr><tr><td align="center">Windows 10 Enterprise 2015 LTSB N</td><td align="center">2F77B-TNFGY-69QQF-B8YKP-D69TJ</td></tr><tr><td align="center">Windows 10 Enterprise 2016 LTSB</td><td align="center">DCPHK-NFMTC-H88MJ-PFHPY-QJ4BJ</td></tr><tr><td align="center">Windows 10 Enterprise 2016 LTSB N</td><td align="center">QFFDN-GRT3P-VKWWX-X7T3R-8B639</td></tr><tr><td align="center">Windows 10 Enterprise 2019 LTSB</td><td align="center">M7XTQ-FN8P6-TTKYV-9D4CC-J462D</td></tr></tbody></table><h3 id="Windows-Server-2012-R2-and-Windows-8-1"><a href="#Windows-Server-2012-R2-and-Windows-8-1" class="headerlink" title="Windows Server 2012 R2 and Windows 8.1"></a>Windows Server 2012 R2 and Windows 8.1</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows 8.1 Professional</td><td align="center">GCRJD-8NW9H-F2CDX-CCM8D-9D6T9</td></tr><tr><td align="center">Windows 8.1 Professional N</td><td align="center">HMCNV-VVBFX-7HMBH-CTY9B-B4FXY</td></tr><tr><td align="center">Windows 8.1 Enterprise</td><td align="center">MHF9N-XY6XB-WVXMC-BTDCT-MKKG7</td></tr><tr><td align="center">Windows 8.1 Enterprise N</td><td align="center">TT4HM-HN7YT-62K67-RGRQJ-JFFXW</td></tr><tr><td align="center">Windows Server 2012 R2 Server Standard</td><td align="center">D2N9P-3P6X9-2R39C-7RTCD-MDVJX</td></tr><tr><td align="center">Windows Server 2012 R2 Datacenter</td><td align="center">W3GGN-FT8W3-Y4M27-J84CP-Q3VJ9</td></tr><tr><td align="center">Windows Server 2012 R2 Essentials</td><td align="center">KNC87-3J2TX-XB4WP-VCPJV-M4FWM</td></tr></tbody></table><h3 id="Windows-Server-2012-and-Windows-8"><a href="#Windows-Server-2012-and-Windows-8" class="headerlink" title="Windows Server 2012 and Windows 8"></a>Windows Server 2012 and Windows 8</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows 8 Professional</td><td align="center">NG4HW-VH26C-733KW-K6F98-J8CK4</td></tr><tr><td align="center">Windows 8 Professional N</td><td align="center">XCVCF-2NXM9-723PB-MHCB7-2RYQQ</td></tr><tr><td align="center">Windows 8 Enterprise</td><td align="center">32JNW-9KQ84-P47T8-D8GGY-CWCK7</td></tr><tr><td align="center">Windows 8 Enterprise N</td><td align="center">JMNMF-RHW7P-DMY6X-RF3DR-X2BQT</td></tr><tr><td align="center">Windows Server 2012</td><td align="center">BN3D2-R7TKB-3YPBD-8DRP2-27GG4</td></tr><tr><td align="center">Windows Server 2012 N</td><td align="center">8N2M2-HWPGY-7PGT9-HGDD8-GVGGY</td></tr><tr><td align="center">Windows Server 2012 Single Language</td><td align="center">2WN2H-YGCQR-KFX6K-CD6TF-84YXQ</td></tr><tr><td align="center">Windows Server 2012 Country Specific</td><td align="center">4K36P-JN4VD-GDC6V-KDT89-DYFKP</td></tr><tr><td align="center">Windows Server 2012 Server Standard</td><td align="center">XC9B7-NBPP2-83J2H-RHMBY-92BT4</td></tr><tr><td align="center">Windows Server 2012 MultiPoint Standard</td><td align="center">HM7DN-YVMH3-46JC3-XYTG7-CYQJJ</td></tr><tr><td align="center">Windows Server 2012 MultiPoint Premium</td><td align="center">XNH6W-2V9GX-RGJ4K-Y8X6F-QGJ2G</td></tr><tr><td align="center">Windows Server 2012 Datacenter</td><td align="center">48HP8-DN98B-MYWDG-T2DCC-8W83P</td></tr></tbody></table><h3 id="Windows-7-and-Windows-Server-2008-R2"><a href="#Windows-7-and-Windows-Server-2008-R2" class="headerlink" title="Windows 7 and Windows Server 2008 R2"></a>Windows 7 and Windows Server 2008 R2</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows 7 Professional</td><td align="center">FJ82H-XT6CR-J8D7P-XQJJ2-GPDD4</td></tr><tr><td align="center">Windows 7 Professional N</td><td align="center">MRPKT-YTG23-K7D7T-X2JMM-QY7MG</td></tr><tr><td align="center">Windows 7 Professional E</td><td align="center">W82YF-2Q76Y-63HXB-FGJG9-GF7QX</td></tr><tr><td align="center">Windows 7 Enterprise</td><td align="center">33PXH-7Y6KF-2VJC9-XBBR8-HVTHH</td></tr><tr><td align="center">Windows 7 Enterprise N</td><td align="center">YDRBP-3D83W-TY26F-D46B2-XCKRJ</td></tr><tr><td align="center">Windows 7 Enterprise E</td><td align="center">C29WB-22CC8-VJ326-GHFJW-H9DH4</td></tr><tr><td align="center">Windows Server 2008 R2 Web</td><td align="center">6TPJF-RBVHG-WBW2R-86QPH-6RTM4</td></tr><tr><td align="center">Windows Server 2008 R2 HPC edition</td><td align="center">TT8MH-CG224-D3D7Q-498W2-9QCTX</td></tr><tr><td align="center">Windows Server 2008 R2 Standard</td><td align="center">YC6KT-GKW9T-YTKYR-T4X34-R7VHC</td></tr><tr><td align="center">Windows Server 2008 R2 Enterprise</td><td align="center">489J6-VHDMP-X63PK-3K798-CPX3Y</td></tr><tr><td align="center">Windows Server 2008 R2 Datacenter</td><td align="center">74YFP-3QFB3-KQT8W-PMXWJ-7M648</td></tr><tr><td align="center">Windows Server 2008 R2 for Itanium-based Systems</td><td align="center">GT63C-RJFQ3-4GMB6-BRFB9-CB83V</td></tr></tbody></table><h3 id="Windows-Vista-and-Windows-Server-2008"><a href="#Windows-Vista-and-Windows-Server-2008" class="headerlink" title="Windows Vista and Windows Server 2008"></a>Windows Vista and Windows Server 2008</h3><table><thead><tr><th align="center">Operating system edition</th><th align="center">KMS Client Setup Key</th></tr></thead><tbody><tr><td align="center">Windows Vista Business</td><td align="center">YFKBB-PQJJV-G996G-VWGXY-2V3X8</td></tr><tr><td align="center">Windows Vista Business N</td><td align="center">HMBQG-8H2RH-C77VX-27R82-VMQBT</td></tr><tr><td align="center">Windows Vista Enterprise</td><td align="center">VKK3X-68KWM-X2YGT-QR4M6-4BWMV</td></tr><tr><td align="center">Windows Vista Enterprise N</td><td align="center">VTC42-BM838-43QHV-84HX6-XJXKV</td></tr><tr><td align="center">Windows Web Server 2008</td><td align="center">WYR28-R7TFJ-3X2YQ-YCY4H-M249D</td></tr><tr><td align="center">Windows Server 2008 Standard</td><td align="center">TM24T-X9RMF-VWXK6-X8JC9-BFGM2</td></tr><tr><td align="center">Windows Server 2008 Standard without Hyper-V</td><td align="center">W7VD6-7JFBR-RX26B-YKQ3Y-6FFFJ</td></tr><tr><td align="center">Windows Server 2008 Enterprise</td><td align="center">YQGMW-MPWTJ-34KDK-48M3W-X4Q6V</td></tr><tr><td align="center">Windows Server 2008 Enterprise without Hyper-V</td><td align="center">39BXF-X8Q23-P2WWT-38T2F-G3FPG</td></tr><tr><td align="center">Windows Server 2008 HPC</td><td align="center">RCTX3-KWVHP-BR6TB-RB6DM-6X7HP</td></tr><tr><td align="center">Windows Server 2008 Datacenter</td><td align="center">7M67G-PC374-GR742-YH8V4-TCBY3</td></tr><tr><td align="center">Windows Server 2008 Datacenter without Hyper-V</td><td align="center">22XQ2-VRXRG-P8D42-K34TD-G3QQC</td></tr><tr><td align="center">Windows Server 2008 for Itanium-Based Systems</td><td align="center">4DWFP-JF3DJ-B7DTH-78FJB-PDRHK</td></tr></tbody></table><h2 id="Office-系统GVLK密钥"><a href="#Office-系统GVLK密钥" class="headerlink" title="Office 系统GVLK密钥"></a>Office 系统GVLK密钥</h2><h3 id="Office-2019系列："><a href="#Office-2019系列：" class="headerlink" title="Office 2019系列："></a>Office 2019系列：</h3><table><thead><tr><th align="center">產品</th><th align="center">GVLK</th></tr></thead><tbody><tr><td align="center">Office Pro Plus 2019</td><td align="center">NMMKJ-6RK4F-KMJVX-8D9MJ-6MWKP</td></tr><tr><td align="center">Office Standard 2019</td><td align="center">6NWWJ-YQWMR-QKGCB-6TMB3-9D9HK</td></tr><tr><td align="center">Project Pro 2019</td><td align="center">B4NPR-3FKK7-T2MBV-FRQ4W-PKD2B</td></tr><tr><td align="center">Project Std 2019</td><td align="center">C4F7P-NCP8C-6CQPT-MQHV9-JXD2M</td></tr><tr><td align="center">Visio Pro 2019</td><td align="center">9BGNQ-K37YR-RQHF2-38RQ3-7VCBB</td></tr><tr><td align="center">Visio Std 2019</td><td align="center">7TQNQ-K3YQQ-3PFH7-CCPPM-X4VQ2</td></tr><tr><td align="center">Access 2019</td><td align="center">9N9PT-27V4Y-VJ2PD-YXFMF-YTFQT</td></tr><tr><td align="center">Excel 2019</td><td align="center">TMJWT-YYNMB-3BKTF-644FC-RVXBD</td></tr><tr><td align="center">Outlook 2019</td><td align="center">7HD7K-N4PVK-BHBCQ-YWQRW-XW4VK</td></tr><tr><td align="center">PowerPoint 2019</td><td align="center">RRNCX-C64HY-W2MM7-MCH9G-TJHMQ</td></tr><tr><td align="center">Publisher 2019</td><td align="center">G2KWX-3NW6P-PY93R-JXK2T-C9Y9V</td></tr><tr><td align="center">Skype for Business 2019</td><td align="center">NCJ33-JHBBY-HTK98-MYCV8-HMKHJ</td></tr><tr><td align="center">Word 2019</td><td align="center">PBX3G-NWMT6-Q7XBW-PYJGG-WXD33</td></tr></tbody></table><h3 id="Office2016系列："><a href="#Office2016系列：" class="headerlink" title="Office2016系列："></a>Office2016系列：</h3><table><thead><tr><th align="center">產品</th><th align="center">GVLK</th></tr></thead><tbody><tr><td align="center">Office Professional Plus 2016</td><td align="center">XQNVK-8JYDB-WJ9W3-YJ8YR-WFG99</td></tr><tr><td align="center">Office Standard 2016</td><td align="center">JNRGM-WHDWX-FJJG3-K47QV-DRTFM</td></tr><tr><td align="center">Office Mondo 2016</td><td align="center">HFTND-W9MK4-8B7MJ-B6C4G-XQBR2</td></tr><tr><td align="center">Project Professional 2016</td><td align="center">WGT24-HCNMF-FQ7XH-6M8K7-DRTW9</td></tr><tr><td align="center">Project Standard 2016</td><td align="center">D8NRQ-JTYM3-7J2DX-646CT-6836M</td></tr><tr><td align="center">Visio Professional 2016</td><td align="center">69WXN-MBYV6-22PQG-3WGHK-RM6XC</td></tr><tr><td align="center">Visio Standard 2016</td><td align="center">NY48V-PPYYH-3F4PX-XJRKJ-W4423</td></tr><tr><td align="center">Access 2016</td><td align="center">GNH9Y-D2J4T-FJHGG-QRVH7-QPFDW</td></tr><tr><td align="center">Excel 2016</td><td align="center">9C2PK-NWTVB-JMPW8-BFT28-7FTBF</td></tr><tr><td align="center">OneNote 2016</td><td align="center">DR92N-9HTF2-97XKM-XW2WJ-XW3J6</td></tr><tr><td align="center">Outlook 2016</td><td align="center">R69KK-NTPKF-7M3Q4-QYBHW-6MT9B</td></tr><tr><td align="center">PowerPoint 2016</td><td align="center">J7MQP-HNJ4Y-WJ7YM-PFYGF-BY6C6</td></tr><tr><td align="center">Publisher 2016</td><td align="center">F47MM-N3XJP-TQXJ9-BP99D-8K837</td></tr><tr><td align="center">SKype for Business 2016</td><td align="center">869NQ-FJ69K-466HW-QYCP2-DDBV6</td></tr><tr><td align="center">Word 2016</td><td align="center">WXY84-JN2Q9-RBCCQ-3Q3J3-3PFJ6</td></tr></tbody></table><h3 id="Office-365-默认密钥（激活平滑专用）"><a href="#Office-365-默认密钥（激活平滑专用）" class="headerlink" title="Office 365 默认密钥（激活平滑专用）"></a>Office 365 默认密钥（激活平滑专用）</h3><table><thead><tr><th align="center">產品</th><th align="center">GVLK</th></tr></thead><tbody><tr><td align="center">O365ProPlusRetail</td><td align="center">DRNV7-VGMM2-B3G9T-4BF84-VMFTK</td></tr></tbody></table><h3 id="Office-2013系列："><a href="#Office-2013系列：" class="headerlink" title="Office 2013系列："></a>Office 2013系列：</h3><p>来自官网<code>https://technet.microsoft.com/zh-tw/library/dn385360.aspx</code></p><table><thead><tr><th align="center">產品</th><th align="center">GVLK</th></tr></thead><tbody><tr><td align="center">Office 2013 Professional Plus</td><td align="center">YC7DK-G2NP3-2QQC3-J6H88-GVGXT</td></tr><tr><td align="center">Office 2013 Standard</td><td align="center">KBKQT-2NMXY-JJWGP-M62JB-92CD4</td></tr><tr><td align="center">Project 2013 Professional</td><td align="center">FN8TT-7WMH6-2D4X9-M337T-2342K</td></tr><tr><td align="center">Project 2013 Standard</td><td align="center">6NTH3-CW976-3G3Y2-JK3TX-8QHTT</td></tr><tr><td align="center">Visio 2013 Professional</td><td align="center">C2FG9-N6J68-H8BTJ-BW3QX-RM3B3</td></tr><tr><td align="center">Visio 2013 Standard</td><td align="center">J484Y-4NKBF-W2HMG-DBMJC-PGWR7</td></tr><tr><td align="center">Access 2013</td><td align="center">NG2JY-H4JBT-HQXYP-78QH9-4JM2D</td></tr><tr><td align="center">Excel 2013</td><td align="center">VGPNG-Y7HQW-9RHP7-TKPV3-BG7GB</td></tr><tr><td align="center">InfoPath 2013    DKT8B-N7VXH-D963P-Q4PHY-F8894</td><td align="center"></td></tr><tr><td align="center">Lync 2013</td><td align="center">2MG3G-3BNTT-3MFW9-KDQW3-TCK7R</td></tr><tr><td align="center">OneNote 2013</td><td align="center">TGN6P-8MMBC-37P2F-XHXXK-P34VW</td></tr><tr><td align="center">Outlook 2013</td><td align="center">QPN8Q-BJBTJ-334K3-93TGY-2PMBT</td></tr><tr><td align="center">PowerPoint 2013</td><td align="center">4NT99-8RJFH-Q2VDH-KYG2C-4RD4F</td></tr><tr><td align="center">Publisher 2013</td><td align="center">PN2WF-29XG2-T9HJ7-JQPJR-FCXK4</td></tr><tr><td align="center">Word 2013</td><td align="center">6Q7VD-NX8JD-WJ2VH-88V73-4GBJ7</td></tr></tbody></table><h3 id="Office2010系列："><a href="#Office2010系列：" class="headerlink" title="Office2010系列："></a>Office2010系列：</h3><p>来自官网<code>https://technet.microsoft.com/zh-cn/library/ee624355(v=office.14).aspx</code></p><table><thead><tr><th align="center">版本</th><th align="center">GVLK</th></tr></thead><tbody><tr><td align="center">Office Professional Plus 2010</td><td align="center">VYBBJ-TRJPB-QFQRF-QFT4D-H3GVB</td></tr><tr><td align="center">Office Standard 2010</td><td align="center">V7QKV-4XVVR-XYV4D-F7DFM-8R6BM</td></tr><tr><td align="center">Office Home and Business 2010</td><td align="center">D6QFG-VBYP2-XQHM7-J97RH-VVRCK</td></tr><tr><td align="center">Access 2010</td><td align="center">V7Y44-9T38C-R2VJK-666HK-T7DDX</td></tr><tr><td align="center">Excel 2010</td><td align="center">H62QG-HXVKF-PP4HP-66KMR-CW9BM</td></tr><tr><td align="center">SharePoint Workspace 2010</td><td align="center">QYYW6-QP4CB-MBV6G-HYMCJ-4T3J4</td></tr><tr><td align="center">InfoPath 2010</td><td align="center">K96W8-67RPQ-62T9Y-J8FQJ-BT37T</td></tr><tr><td align="center">OneNote 2010</td><td align="center">Q4Y4M-RHWJM-PY37F-MTKWH-D3XHX</td></tr><tr><td align="center">Outlook 2010</td><td align="center">7YDC2-CWM8M-RRTJC-8MDVC-X3DWQ</td></tr><tr><td align="center">PowerPoint 2010</td><td align="center">RC8FX-88JRY-3PF7C-X8P67-P4VTT</td></tr><tr><td align="center">Project Professional 2010</td><td align="center">YGX6F-PGV49-PGW3J-9BTGG-VHKC6</td></tr><tr><td align="center">Project Standard 2010</td><td align="center">4HP3K-88W3F-W2K3D-6677X-F9PGB</td></tr><tr><td align="center">Publisher 2010</td><td align="center">BFK7F-9MYHM-V68C7-DRQ66-83YTP</td></tr><tr><td align="center">Word 2010</td><td align="center">HVHB3-C6FV7-KQX9W-YQG79-CRY7T</td></tr><tr><td align="center">Visio Premium 2010</td><td align="center">D9DWC-HPYVV-JGF4P-BTWQB-WX8BJ</td></tr><tr><td align="center">Visio Professional 2010</td><td align="center">7MCW8-VRQVK-G677T-PDJCM-Q8TCP</td></tr><tr><td align="center">Visio Standard 2010</td><td align="center">767HD-QGMWX-8QTDB-9G3R2-KHFGJ</td></tr></tbody></table>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMS </tag>
            
            <tag> Windows </tag>
            
            <tag> Office </tag>
            
            <tag> GVLK </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>kms激活命令：一句命令激活Windows/Office</title>
      <link href="posts/kms.html"/>
      <url>posts/kms.html</url>
      
        <content type="html"><![CDATA[<p>对于新安装 Windows的用户而言，总是会对自己的激活状态感到惴惴不安，到底激活没？其实很简单，四种命令可以帮助您充分了解自己机器的激活状态</p><h2 id="Windows激活命令"><a href="#Windows激活命令" class="headerlink" title="Windows激活命令"></a>Windows激活命令</h2><p>1、命令：<code>slmgr.vbs -dli</code></p><p>功能：操作系统版本、部分产品密钥、许可证状态。</p><p>2、命令：<code>slmgr.vbs -dlv</code></p><p>功能：最为详尽的激活信息，包括：激活ID、安装ID、激活截止日期？ ——-显示：显示操作系统版本。</p><p>3、命令：<code>slmgr.vbs -xpr</code></p><p>功能：是否彻底激活？</p><p>4、命令：<code>winver</code></p><p>功能：显示操作系统版本。</p><p>5､命令：<code>slmgr.vbs -ipk</code></p><p>功能：安装产品密钥</p><p>6､命令：<code>slmgr.vbs -ato</code></p><p>功能：激活 Windows</p><p>7､命令：<code>slmgr.vbs -skms</code></p><p>功能：设置KMS服务器与端口</p><p>8､命令：<code>slmgr.vbs -ckms</code></p><p>功能：清除所使用KMS服务器信息</p><h3 id="激活系统"><a href="#激活系统" class="headerlink" title="激活系统"></a>激活系统</h3><p>如果你是有key，只须要使用5､6命令就可以激活系统。</p><pre class=" language-bat"><code class="language-bat">slmgr.vbs -ipk xxxx-xxxx-xxxx-xxxxslmgr.vbs -ato</code></pre><p>但你是KMS激活一般来说，只要确保的下载的是VL批量版本并且没有手动安装过任何key，</p><p>你只需要使用管理员权限运行cmd执行一句命令就足够：</p><pre class=" language-bat"><code class="language-bat">slmgr.vbs -skms xxx.xxx.xxx</code></pre><p>然后去计算机属性或者控制面板其他的什么的地方点一下激活就好了。</p><p>当然，如果你懒得点，可以多打一句命令手动激活：</p><pre class=" language-bat"><code class="language-bat">slmgr.vbs -ato</code></pre><p>这句命令的意思是，马上对当前设置的key和服务器地址等进行尝试激活操作。</p><p>kms激活的前提是你的系统是批量授权版本，即VL版，一般企业版都是VL版，专业版有零售和VL版，家庭版旗舰版OEM版等等那就肯定不能默认直接用kms激活。一般建议从msdn我告诉你上面下载系统，带有VL字样即可。</p><p>VL版本的镜像一般内置GVLK key，用于kms激活。如果你手动输过其他key，那么这个内置的key就会被替换掉，这个时候如果你想用kms，那么就需要把GVLK key输回去。对于Windows，在不太方便找到VL版本的时候，也可以用相同版本的导入GVLK key来代替，比如从微软官网下载win10专业版，然后导入GVLK key来启用kms通道。首先，</p><p>在下面的列表获取你对应版本产品用于kms激活的GVLK key。同样地，位于该列表里的产品都可以用kms激活。</p><p>另外对于Window7，如果你的bios含有slic表，会有无法使用kms的情况。</p><ul><li>所有版本GVLK <a href="https://muyun.info/posts/ipk.html">https://muyun.info/posts/ipk.html</a></li><li>office2016 <a href="https://technet.microsoft.com/zh-cn/library/dn385360(v=office.16).aspx">https://technet.microsoft.com/zh-cn/library/dn385360(v=office.16).aspx</a></li><li>office2013 <a href="https://technet.microsoft.com/ZH-CN/library/dn385360.aspx">https://technet.microsoft.com/ZH-CN/library/dn385360.aspx</a></li><li>office2010 <a href="https://technet.microsoft.com/ZH-CN/library/ee624355(v=office.14).aspx">https://technet.microsoft.com/ZH-CN/library/ee624355(v=office.14).aspx</a></li><li>Server/Windows <a href="https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys">https://docs.microsoft.com/zh-cn/windows-server/get-started/kmsclientkeys</a></li></ul><p>如果不知道自己的系统是什么版本，可以运行以下命令查看系统版本：</p><pre class=" language-bat"><code class="language-bat">wmic os get caption</code></pre><p>得到对应key之后，使用管理员权限运行cmd执行安装key：</p><pre class=" language-bat"><code class="language-bat">slmgr /ipk xxxxx-xxxxx-xxxxx-xxxxx</code></pre><p>然后跟上面说的一样设置kms服务器地址，激活。</p><h2 id="Office激活"><a href="#Office激活" class="headerlink" title="Office激活"></a>Office激活</h2><p>首先你的office必须是vol版本，否则无法激活。</p><p>找到你的office安装目录，比如C:\Program Files\Microsoft Office\Office16</p><p>64位系统安装86位Office的就是C:\Program Files (x86)\Microsoft Office\Office16</p><ul><li>office16是office2016</li><li>office15就是2013</li><li>office14就是2010</li></ul><p>然后目录对的话，该目录下面应该有个OSPP.VBS。</p><p>接下来我们就cd到这个目录下面，例如（请更改为自己的实际安装目录）：</p><pre class=" language-bat"><code class="language-bat">cd "C:\Program Files\Microsoft Office\Office16"</code></pre><p>然后执行注册kms服务器地址：</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /sethst:kms.xxx.xxx</code></pre><p>/sethst参数就是指定kms服务器地址。</p><p>一般ospp.vbs可以拖进去cmd窗口，所以也可以这么弄：</p><pre class=" language-bat"><code class="language-bat">cscript "C:\Program Files\Microsoft Office\Office16\OSPP.VBS" /sethst:kms.xxx.xxx</code></pre><p>“一句命令已经完成了”，但一般office不会马上连接kms服务器进行激活，所以我们额外补充一条手动激活命令：</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /act</code></pre><p>如果提示看到successful的字样，那么就是激活成功了，重新打开office就好。</p><h3 id="ospp-vbs命令介绍"><a href="#ospp-vbs命令介绍" class="headerlink" title="ospp.vbs命令介绍"></a>ospp.vbs命令介绍</h3><p>命令有很多，说说几个激活过程中的常用命令。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /dstatus</code></pre><p>显示当前已安装产品密钥的许可证信息。可以查看到自已安裝的版本有多少个序列号。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /unpkey:xxxxx</code></pre><p>卸载已安装的产品密钥。后面的数字是密钥的最后5位数。</p><p>此时再执行cscript ospp.vbs /dstatus发现产品密钥已经没有了，我重新进行导入。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /inpkey:xxxxx</code></pre><p>安装、替换现有的产品密钥。和上面的过程刚好相反。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /sethst:x.x.x.x</code></pre><p>设置KMS主机名。一般为IP地址。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /act</code></pre><p>激活当前安装的Office。</p><pre class=" language-bat"><code class="language-bat">cscript ospp.vbs /remhst</code></pre><p>删除KMS主机名。</p><p>一般来说掌握这么几个就可以了，如果你想要全面了解，去微软官方网站上查找命令帮助说明，慢慢学习研究吧！</p><h3 id="常见错误"><a href="#常见错误" class="headerlink" title="常见错误"></a>常见错误</h3><p>如果遇到报错，请检查：</p><ul><li>1、你的系统/office是否是批量VL版本</li><li>2、是否以管理员权限运行cmd</li><li>3、你的系统/office是否修改过key/未安装GVLK key</li><li>4、检查你的网络连接</li><li>5、本地的解析不对,或网络问题（检查服务器是否能连上）</li><li>6、根据出错代码自己搜索出错原因</li></ul><p><em>0x80070005错误</em>一般是你没用管理员权限运行CMD</p>]]></content>
      
      
      <categories>
          
          <category> 系统配置 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> KMS </tag>
            
            <tag> Windows </tag>
            
            <tag> Office </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ubuntu 16.04 硬盘分区，挂载，硬盘分区方案</title>
      <link href="posts/5.html"/>
      <url>posts/5.html</url>
      
        <content type="html"><![CDATA[<h2 id="Ubuntu-挂载硬盘分区"><a href="#Ubuntu-挂载硬盘分区" class="headerlink" title="Ubuntu 挂载硬盘分区"></a>Ubuntu 挂载硬盘分区</h2><h3 id="1-查看硬盘及所属分区情况"><a href="#1-查看硬盘及所属分区情况" class="headerlink" title="1.查看硬盘及所属分区情况"></a>1.查看硬盘及所属分区情况</h3><pre class=" language-bash"><code class="language-bash">$ lsblkNAME           MAJ:MIN RM   SIZE RO TYPE  MOUNTPOINTsda              8:0    0 465.8G  0 disk  sda1           8:1    0   512M  0 part  /boot/efisda2           8:2    0 464.3G  0 part  /sda3           8:3    0   976M  0 part    cryptswap1 252:0    0 975.5M  0 cryptsdb              8:16   0   5.5T  0 disk  sdc              8:32   0   5.5T  0 disk  <span class="token comment" spellcheck="true">#可以查看上面有三块硬盘，二块未分配</span><span class="token function">sudo</span> <span class="token function">fdisk</span> -lu</code></pre><p><img src="/medias/ubuntu/1585103977.jpg" alt="fdisk -lu"></p><p>显示当前的硬盘及所属分区的情况。如图所示：<br>图中有两块硬盘，我们要对第二块硬盘进行分区。<br>上面480G是我安装ubuntu的位置。但是2个2T的机械硬盘没有识别出来。</p><h3 id="2-对硬盘进行分区"><a href="#2-对硬盘进行分区" class="headerlink" title="2.对硬盘进行分区"></a>2.对硬盘进行分区</h3><p>我现在先分区/dev/sdb。再挂载这一块硬盘。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> /dev/sdb<span class="token comment" spellcheck="true">#输入`n`</span><span class="token comment" spellcheck="true">#输入`p`</span><span class="token comment" spellcheck="true">#完成后输入`w`保存</span></code></pre><p>GPT格式分区<br><img src="/medias/ubuntu/1585104274.jpg" alt="fdisk sdb"></p><p>如有必要可重新初始化硬盘,再格式化</p><pre class=" language-bash"><code class="language-bash">parted /dev/sdb mklabel gptmkfs.ext4 /dev/sdb</code></pre><h3 id="3-查看刚刚操作的硬盘详情。"><a href="#3-查看刚刚操作的硬盘详情。" class="headerlink" title="3.查看刚刚操作的硬盘详情。"></a>3.查看刚刚操作的硬盘详情。</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">fdisk</span> -l</code></pre><p><img src="/medias/ubuntu/1585104428.jpg" alt="fdisk l"></p><p>已经发现/dev/sdb这一块硬盘type 修改为gpt。</p><h3 id="4-格式化该分区"><a href="#4-格式化该分区" class="headerlink" title="4.格式化该分区"></a>4.格式化该分区</h3><p>将分区格式化成ext4文件系统类型，无法进入和查看。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> mkfs -t ext4 /dev/sdb1</code></pre><p><img src="/medias/ubuntu/1585104525.jpg" alt="mkfs ext4"></p><h3 id="5-挂载硬盘分区"><a href="#5-挂载硬盘分区" class="headerlink" title="5.挂载硬盘分区"></a>5.挂载硬盘分区</h3><p>新硬盘需要挂载在一个新的目录下面。且该目录应该为空。<br>我首先创建一个文件夹。</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mkdir</span> /data_1<span class="token comment" spellcheck="true">#再把该硬盘挂载在/data_1下面。</span><span class="token function">sudo</span> <span class="token function">mount</span> -t ext4 -o rw /dev/sdb1 /data_1/</code></pre><h3 id="6-配置硬盘在系统启动自动挂载"><a href="#6-配置硬盘在系统启动自动挂载" class="headerlink" title="6.配置硬盘在系统启动自动挂载"></a>6.配置硬盘在系统启动自动挂载</h3><p>查看/dev/sdb1 这个分区的UUID</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> blkid /dev/sdb1<span class="token comment" spellcheck="true">#其它方式获取 UUID </span>blkid /dev/sdb <span class="token operator">|</span><span class="token function">awk</span> <span class="token string">'&amp;#123;print <span class="token variable">$2</span>&amp;#125;'</span><span class="token operator">|</span><span class="token function">sed</span> <span class="token string">'s/"//g'</span>UUID<span class="token operator">=</span>0b238fbf-ea33-49dd-bb5c-adf7b763d9c6<span class="token comment" spellcheck="true">#打开文件/etc/fstab</span><span class="token function">sudo</span> gedit /etc/fstab<span class="token comment" spellcheck="true">#增加一行</span>UUID<span class="token operator">=</span>0b238fbf-ea33-49dd-bb5c-adf7b763d9c6 /data ext4 defaults 0 0<span class="token comment" spellcheck="true">#此处UUID为上面找到的</span></code></pre><h3 id="7-检查并挂载新添项"><a href="#7-检查并挂载新添项" class="headerlink" title="7.检查并挂载新添项"></a>7.检查并挂载新添项</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">mount</span> -a</code></pre><p>mount -a 会/etc/fstab中的项全部挂载，如果有错，则会提示错误，然后根据错误找出原因修改。</p><p>注：修改/etc/fstab 一定注意，不要修改错误，很有可能就重启进不了系统，我之前就是修改错误，没有进去系统，我也将修改错误，最后怎么修改进去系统的步骤写出来。</p><p>进入grub模式，修改/etc/fstab</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">vi</span> /etc/fstab</code></pre><p>把最后自己增加的删除掉。使用方法请自己百度VIM使用。<br>最后esc返回。输入：wq 保存。关机重启即可。</p>]]></content>
      
      
      <categories>
          
          <category> Ubuntu </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Ubuntu </tag>
            
            <tag> 硬盘分区 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Hexo各种优化</title>
      <link href="posts/632e.html"/>
      <url>posts/632e.html</url>
      
        <content type="html"><![CDATA[<h2 id="0x01-npm速度优化"><a href="#0x01-npm速度优化" class="headerlink" title="0x01 npm速度优化"></a>0x01 npm速度优化</h2><hr><blockquote><p>在国内npm的下载速度着实是有点慢。由于下面内容会安装较多的插件，建议先更改npm仓库地址，以便能更快的安装插件</p></blockquote><h3 id="使用淘宝镜像"><a href="#使用淘宝镜像" class="headerlink" title="使用淘宝镜像"></a>使用淘宝镜像</h3><ul><li><p>npm的默认仓库地址是 <code>https://registry.npmjs.org/</code></p></li><li><p>可以使用以下命令查看当前npm的仓库地址</p><pre class=" language-sh"><code class="language-sh">npm config get registry</code></pre></li><li><p>可以使用以下命令来改变默认下载地址，从而达到不安装<code>cnpm</code>就能采用淘宝镜像的目的，然后使用上面的get命令查看是否设置成功。</p><pre class=" language-sh"><code class="language-sh">npm config set registry https://registry.npm.taobao.org</code></pre></li></ul><h3 id="安装CNPM"><a href="#安装CNPM" class="headerlink" title="安装CNPM"></a>安装CNPM</h3><ul><li><p>安装cnpm，命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org</code></pre></li><li><p>安装后，使用以下命令测试是否安装成功：</p><pre class=" language-bash"><code class="language-bash">cnpm -v</code></pre></li><li><p>成功后，以后都使用 <code>cnpm</code> 代替以前 <code>npm</code> 来执行命令！</p></li></ul><h2 id="0x02-访问速度优化"><a href="#0x02-访问速度优化" class="headerlink" title="0x02 访问速度优化"></a>0x02 访问速度优化</h2><h3 id="图片加载优化"><a href="#图片加载优化" class="headerlink" title="图片加载优化"></a>图片加载优化</h3><p>什么是<code>预加载</code> 和 <code>懒加载</code></p><p><code>预加载</code>就是进入项目前提前加载资源，避免在项目中加载缓慢，影响用户体验</p><ul><li>缺点：会增加服务器压力</li></ul><p><code>懒加载</code>一般是当图片滚动进可视窗口内才加载图片，可视窗口之外的图片则不加载</p><ul><li>优点：对服务器有一定的缓解压力作用</li></ul><h4 id="懒加载法"><a href="#懒加载法" class="headerlink" title="懒加载法"></a>懒加载法</h4><p>装图片懒加载插件： <a href="https://github.com/Troy-Yang/hexo-lazyload-image">hexo-lazyload-image</a></p><p>在Hexo根目录执行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-lazyload-image --save</code></pre><p>然后在Hexo配置文件末尾加入以下代码</p><pre class=" language-yml"><code class="language-yml">lazyload:  enable: true   onlypost: false  # 是否只对文章的图片做懒加载  loadingImg: # eg ./images/loading.gif</code></pre><p>到这里就配置完了，执行<code>hexo cl&amp;&amp;hexo g&amp;&amp;hexo s</code>就有效果了，以后博客上的图片就都是懒加载了，以上步骤理论上任何主题都可以用</p><p>一般情况下懒加载会和gallery插件会发生冲突，结果可能就是点开图片，左翻右翻都是<code>loading image。matery</code>主题的解决方案是：</p><p>修改 <code>/themes/matery/source/js</code> 中的 <code>matery.js</code>文件</p><p>在第108行加上：</p><pre class=" language-js"><code class="language-js"><span class="token function">$</span><span class="token punctuation">(</span>document<span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">find</span><span class="token punctuation">(</span><span class="token string">'img[data-original]'</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">each</span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">parent</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"href"</span><span class="token punctuation">,</span> <span class="token function">$</span><span class="token punctuation">(</span><span class="token keyword">this</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">attr</span><span class="token punctuation">(</span><span class="token string">"data-original"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span></code></pre><p>做完这步之后，还有点小Bug，首页的logo点击会直接打开logo图，而不是跳到首页。</p><p>伪解决方案：打开 <code>/themes/matery/layout/_partial/header.ejs</code>文件，</p><p>在<code>img</code>和<code>span</code>的两个头加个<code>div</code>：</p><pre class=" language-html"><code class="language-html"><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>brand-logo<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>a</span> <span class="token attr-name">href</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%- url_for() %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>waves-effect waves-light<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>div</span><span class="token punctuation">></span></span>            &lt;% if (theme.logo !== undefined &amp;&amp; theme.logo.length > 0) <span class="token entity" title="&#123;">&amp;#123;</span> %>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>img</span> <span class="token attr-name">src</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>&lt;%<span class="token punctuation">=</span> theme.logo %<span class="token punctuation">></span><span class="token punctuation">"</span></span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-img<span class="token punctuation">"</span></span> <span class="token attr-name">alt</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>LOGO<span class="token punctuation">"</span></span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%</span> <span class="token attr-name">&amp;#125;</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span>            <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>span</span> <span class="token attr-name">class</span><span class="token attr-value"><span class="token punctuation">=</span><span class="token punctuation">"</span>logo-span<span class="token punctuation">"</span></span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;</span>%-</span> <span class="token attr-name">config.title</span> <span class="token attr-name">%</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>span</span><span class="token punctuation">></span></span>        <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span>    <span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>a</span><span class="token punctuation">></span></span><span class="token tag"><span class="token tag"><span class="token punctuation">&lt;/</span>div</span><span class="token punctuation">></span></span></code></pre><h4 id="自定义loading图片"><a href="#自定义loading图片" class="headerlink" title="自定义loading图片"></a>自定义loading图片</h4><p><code>hexo-lazyload-image</code> 插件提供了自定义loading图片的选项</p><p>方法就是在 <code>loadingImg</code> 后配置图片的路径就好了</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">lazyload</span><span class="token punctuation">:</span>  <span class="token key atrule">enable</span><span class="token punctuation">:</span> <span class="token boolean important">true </span>  <span class="token key atrule">onlypost</span><span class="token punctuation">:</span> <span class="token boolean important">false  </span><span class="token comment" spellcheck="true"># 是否只对文章的图片做懒加载</span>  <span class="token key atrule">loadingImg</span><span class="token punctuation">:</span> /medias/loading.gif <span class="token comment" spellcheck="true"># eg ./images/loading.gif</span></code></pre><h4 id="懒加载优化"><a href="#懒加载优化" class="headerlink" title="懒加载优化"></a>懒加载优化</h4><blockquote><p>经过以上操作就已经很完美了，以下内容可做可不做</p></blockquote><ul><li><p>其实第一次加载后本地都是有缓存的，如果每次都把loading显示出来就不那么好看</p></li><li><p>所以我们需要对插件进行魔改，让图片稍微提前加载，避开加载动画</p></li><li><p>打开 <code>Hexo根目录</code>&gt;<code>node_modules</code> &gt; <code>hexo-lazyload-image</code> &gt; <code>lib</code> &gt; <code>simple-lazyload.js</code> 文件</p></li><li><p>第9行修改为：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&amp;&amp;</span> rect<span class="token punctuation">.</span>top <span class="token operator">&lt;=</span> <span class="token punctuation">(</span>window<span class="token punctuation">.</span>innerHeight <span class="token operator">+</span><span class="token number">240</span> <span class="token operator">||</span> document<span class="token punctuation">.</span>documentElement<span class="token punctuation">.</span>clientHeight <span class="token operator">+</span><span class="token number">240</span><span class="token punctuation">)</span></code></pre><blockquote><p> 作用：提前240个像素加载图片；当然这个值也可以根据自己情况修改</p></blockquote></li></ul><h3 id="代码压缩优化"><a href="#代码压缩优化" class="headerlink" title="代码压缩优化"></a>代码压缩优化</h3><h4 id="gulp实现代码压缩"><a href="#gulp实现代码压缩" class="headerlink" title="gulp实现代码压缩"></a>gulp实现代码压缩</h4><ul><li><p>cd到Hexo根目录依次执行以下命令：</p><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 全局安装gulp模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp -g<span class="token comment" spellcheck="true"># 安装各种小功能模块  执行这步的时候，可能会提示权限的问题，最好以管理员模式执行</span><span class="token function">npm</span> <span class="token function">install</span> gulp gulp-htmlclean gulp-htmlmin gulp-minify-css gulp-uglify gulp-imagemin --save<span class="token comment" spellcheck="true"># 额外的功能模块</span><span class="token function">npm</span> <span class="token function">install</span> gulp-debug gulp-clean-css gulp-changed gulp-if gulp-plumber gulp-babel babel-preset-es2015 del @babel/core --save</code></pre></li><li><p>在Hexo根目录新建文件 <code>gulpfile.js</code>，并复制以下内容到文件中，有中文注释，可以根据自己需求修改。</p><pre class=" language-js"><code class="language-js"><span class="token keyword">var</span> gulp <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> debug <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-debug"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> cleancss <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-clean-css"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//css压缩组件</span><span class="token keyword">var</span> uglify <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-uglify"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//js压缩组件</span><span class="token keyword">var</span> htmlmin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlmin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html压缩组件</span><span class="token keyword">var</span> htmlclean <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-htmlclean"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//html清理组件</span><span class="token keyword">var</span> imagemin <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-imagemin"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//图片压缩组件</span><span class="token keyword">var</span> changed <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-changed"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//文件更改校验组件</span><span class="token keyword">var</span> gulpif <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-if"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//任务 帮助调用组件</span><span class="token keyword">var</span> plumber <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-plumber"</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//容错组件（发生错误不跳出任务，并报出错误内容）</span><span class="token keyword">var</span> isScriptAll <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否处理所有文件，(true|处理所有文件)(false|只处理有更改的文件)</span><span class="token keyword">var</span> isDebug <span class="token operator">=</span> <span class="token boolean">true</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">//是否调试显示 编译通过的文件</span><span class="token keyword">var</span> gulpBabel <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"gulp-babel"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> es2015Preset <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"babel-preset-es2015"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> del <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"del"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> Hexo <span class="token operator">=</span> <span class="token function">require</span><span class="token punctuation">(</span><span class="token string">"hexo"</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token keyword">var</span> hexo <span class="token operator">=</span> <span class="token keyword">new</span> <span class="token class-name">Hexo</span><span class="token punctuation">(</span>process<span class="token punctuation">.</span><span class="token function">cwd</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token comment" spellcheck="true">// 初始化一个hexo对象</span><span class="token comment" spellcheck="true">// 清除public文件夹</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"clean"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> <span class="token function">del</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"public/**/*"</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 下面几个跟hexo有关的操作，主要通过hexo.call()去执行，注意return</span><span class="token comment" spellcheck="true">// 创建静态页面 （等同 hexo generate）</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"generate"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 启动Hexo服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo        <span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"server"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>            console<span class="token punctuation">.</span><span class="token function">log</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>        <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">init</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        <span class="token keyword">return</span> hexo            <span class="token punctuation">.</span><span class="token function">call</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">,</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                watch<span class="token punctuation">:</span> <span class="token boolean">false</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token function">then</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>            <span class="token punctuation">.</span><span class="token keyword">catch</span><span class="token punctuation">(</span><span class="token keyword">function</span> <span class="token punctuation">(</span>err<span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                <span class="token keyword">return</span> hexo<span class="token punctuation">.</span><span class="token function">exit</span><span class="token punctuation">(</span>err<span class="token punctuation">)</span><span class="token punctuation">;</span>            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的js文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressJs"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.js"</span><span class="token punctuation">,</span> <span class="token string">"!./public/libs/**"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span>排除的js        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress JS:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>            <span class="token function">gulpBabel</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>                presets<span class="token punctuation">:</span> <span class="token punctuation">[</span>es2015Preset<span class="token punctuation">]</span> <span class="token operator">/</span><span class="token operator">/</span> es5检查机制            <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span><span class="token operator">/</span><span class="token function">调用压缩组件方法uglify</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>对合并的文件进行压缩        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span> <span class="token operator">/</span><span class="token operator">/</span>输出到目标目录<span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">/</span><span class="token operator">/</span> 压缩<span class="token keyword">public</span>目录下的css文件gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        rebase<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span>        <span class="token operator">/</span><span class="token operator">/</span>advanced<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">true</span> <span class="token punctuation">[</span>是否开启高级优化（合并选择器等）<span class="token punctuation">]</span>        compatibility<span class="token punctuation">:</span> <span class="token string">"ie7"</span> <span class="token operator">/</span><span class="token operator">/</span>保留ie7及以下兼容写法 类型：String 默认：<span class="token string">''</span>or<span class="token string">'*'</span> <span class="token punctuation">[</span>启用兼容模式； <span class="token string">'ie7'</span>：IE7兼容模式，<span class="token string">'ie8'</span>：IE8兼容模式，<span class="token string">'*'</span>：IE9<span class="token operator">+</span>兼容模式<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepBreaks<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token operator">/</span><span class="token operator">/</span>类型：Boolean 默认：<span class="token boolean">false</span> <span class="token punctuation">[</span>是否保留换行<span class="token punctuation">]</span>        <span class="token operator">/</span><span class="token operator">/</span>keepSpecialComments<span class="token punctuation">:</span> <span class="token string">'*'</span> <span class="token operator">/</span><span class="token operator">/</span>保留所有特殊前缀 当你用autoprefixer生成的浏览器前缀，如果不加这个参数，有可能将会删除你的部分前缀    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">"./public/**/*.css"</span><span class="token punctuation">,</span> <span class="token string">"!./public/**/*.min.css"</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true">//排除的css</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress CSS:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">cleancss</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩public目录下的html文件</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> cleanOptions <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        protect<span class="token punctuation">:</span> <span class="token regex">/&lt;\!--%fooTemplate\b.*?%-->/g</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//忽略处理</span>        unprotect<span class="token punctuation">:</span> <span class="token operator">/</span><span class="token operator">&lt;</span>script <span class="token punctuation">[</span><span class="token operator">^</span><span class="token operator">></span><span class="token punctuation">]</span><span class="token operator">*</span>\btype<span class="token operator">=</span><span class="token string">"text\/x-handlebars-template"</span><span class="token punctuation">[</span>\s\S<span class="token punctuation">]</span><span class="token operator">+</span><span class="token operator">?</span><span class="token operator">&lt;</span>\<span class="token operator">/</span>script<span class="token operator">></span><span class="token operator">/</span>gi <span class="token comment" spellcheck="true">//特殊处理</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> minOption <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        collapseWhitespace<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩HTML</span>        collapseBooleanAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//省略布尔属性的值 &lt;input checked="true"/> ==> &lt;input /></span>        removeEmptyAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除所有空格作属性值 &lt;input id="" /> ==> &lt;input /></span>        removeScriptTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;script>的type="text/javascript"</span>        removeStyleLinkTypeAttributes<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//删除&lt;style>和&lt;link>的type="text/css"</span>        removeComments<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//清除HTML注释</span>        minifyJS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面JS</span>        minifyCSS<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//压缩页面CSS</span>        minifyURLs<span class="token punctuation">:</span> <span class="token boolean">true</span> <span class="token comment" spellcheck="true">//替换页面URL</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/**/*.html"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress HTML:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlclean</span><span class="token punctuation">(</span>cleanOptions<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">htmlmin</span><span class="token punctuation">(</span>minOption<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 压缩 public/medias 目录内图片</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span><span class="token string">"compressImage"</span><span class="token punctuation">,</span> <span class="token keyword">function</span> <span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> option <span class="token operator">=</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        optimizationLevel<span class="token punctuation">:</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Number 默认：3 取值范围：0-7（优化等级）</span>        progressive<span class="token punctuation">:</span> <span class="token boolean">true</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 无损压缩jpg图片</span>        interlaced<span class="token punctuation">:</span> <span class="token boolean">false</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 隔行扫描gif进行渲染</span>        multipass<span class="token punctuation">:</span> <span class="token boolean">false</span> <span class="token comment" spellcheck="true">//类型：Boolean 默认：false 多次优化svg直到完全优化</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">;</span>    <span class="token keyword">return</span> gulp        <span class="token punctuation">.</span><span class="token function">src</span><span class="token punctuation">(</span><span class="token string">"./public/medias/**/*.*"</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span><span class="token operator">!</span>isScriptAll<span class="token punctuation">,</span> <span class="token function">changed</span><span class="token punctuation">(</span><span class="token string">"./public/medias"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">gulpif</span><span class="token punctuation">(</span>isDebug<span class="token punctuation">,</span> <span class="token function">debug</span><span class="token punctuation">(</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span> title<span class="token punctuation">:</span> <span class="token string">"Compress Images:"</span> <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">plumber</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span><span class="token function">imagemin</span><span class="token punctuation">(</span>option<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token punctuation">.</span><span class="token function">pipe</span><span class="token punctuation">(</span>gulp<span class="token punctuation">.</span><span class="token function">dest</span><span class="token punctuation">(</span><span class="token string">"./public"</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 执行顺序： 清除public目录 -> 产生原始博客内容 -> 执行压缩混淆 -> 部署到服务器</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"build"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        <span class="token string">"compressHtml"</span><span class="token punctuation">,</span>        <span class="token string">"compressCss"</span><span class="token punctuation">,</span>        <span class="token string">"compressJs"</span><span class="token punctuation">,</span>        <span class="token string">"compressImage"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"deploy"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">// 默认任务</span>gulp<span class="token punctuation">.</span><span class="token function">task</span><span class="token punctuation">(</span>    <span class="token string">"default"</span><span class="token punctuation">,</span>    gulp<span class="token punctuation">.</span><span class="token function">series</span><span class="token punctuation">(</span>        <span class="token string">"clean"</span><span class="token punctuation">,</span>        <span class="token string">"generate"</span><span class="token punctuation">,</span>        gulp<span class="token punctuation">.</span><span class="token function">parallel</span><span class="token punctuation">(</span><span class="token string">"compressHtml"</span><span class="token punctuation">,</span> <span class="token string">"compressCss"</span><span class="token punctuation">,</span> <span class="token string">"compressJs"</span><span class="token punctuation">,</span><span class="token string">"compressImage"</span><span class="token punctuation">)</span>    <span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment" spellcheck="true">//Gulp4最大的一个改变就是gulp.task函数现在只支持两个参数，分别是任务名和运行任务的函数</span></code></pre></li><li><p>以后的执行方式有两种：</p><ol><li>直接在Hexo根目录执行 <code>gulp</code>或者 <code>gulp default</code> ，这个命令相当于 <code>hexo cl&amp;&amp;hexo g</code> 并且再把代码和图片压缩。</li><li>在Hexo根目录执行 <code>gulp build</code> ，这个命令与第1种相比是：在最后又加了个 <code>hexo d</code> ，等于说生成、压缩文件后又帮你自动部署了。</li></ol></li><li><p>值得注意的是：这个加入了图片压缩，如果不想用图片压缩可以把第154行的 <code>&quot;compressImage&quot;,</code> 和第165行的 <code>,&quot;compressImage&quot;</code> 去掉即可</p></li></ul><h4 id="hexo-neat插件实现代码压缩"><a href="#hexo-neat插件实现代码压缩" class="headerlink" title="hexo-neat插件实现代码压缩"></a>hexo-neat插件实现代码压缩</h4><ul><li><p>可能以上方法比较复杂，来介绍个简单的，<a href="https://github.com/rozbo/hexo-neat">hexo-neat</a>插件也是用来压缩代码的，底层也是通过gulp来实现的。</p></li><li><p>但是这个插件是有Bug的：</p><ul><li>压缩 md 文件会使 markdown 语法的代码块消失</li><li>会删除全角空格</li></ul></li><li><p>Hexo根目录执行安装代码：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-neat --save</code></pre></li><li><p>在Hexo配置文件<code>_config.yml</code> 末尾加入以下配置：</p><pre class=" language-yml"><code class="language-yml">neat_enable: trueneat_html:  enable: true  exclude:neat_css:  enable: true  exclude:    - '*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '*.min.js'</code></pre></li><li><p>然后直接 <code>hexo cl&amp;&amp;hexo g</code> 就可以了，会自动压缩文件 。</p></li><li><p><strong>补充</strong>：为了解决以上Bug，<strong>对于matery主题</strong>（其他主题自行解决）需要将以上默认配置修改为：</p><pre class=" language-yml"><code class="language-yml">#hexo-neat 优化提速插件（去掉HTML、css、js的blank字符）neat_enable: trueneat_html:  enable: true  exclude:    - '**/*.md'neat_css:  enable: true  exclude:    - '**/*.min.css'neat_js:  enable: true  mangle: true  output:  compress:  exclude:    - '**/*.min.js'    - '**/**/instantpage.js'    - '**/matery.js'</code></pre></li></ul><h3 id="全站CDN加速"><a href="#全站CDN加速" class="headerlink" title="全站CDN加速"></a>全站CDN加速</h3><p>放在Github的资源在国内加载速度比较慢，因此需要使用CDN加速来优化网站打开速度，<a href="https://www.jsdelivr.com/">jsDelivr</a> + Github便是免费且好用的CDN，非常适合博客网站使用。</p><p><strong>用法：</strong></p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/你的用户名/你的仓库名@发布的版本号/文件路径</code></pre><p><strong>例如：</strong></p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//cdn.jsdelivr.net/gh/jeremysvn/muyun/medias/loading.gif</code></pre><p>注意：版本号不是必需的，是为了区分新旧资源，如果不使用版本号，将会直接引用最新资源</p><p>还可以配合<code>PicGo</code>图床上传工具的<strong>自定义域名前缀</strong>来上传图片，使用极其方便。</p><h3 id="向百度推送自己的资源"><a href="#向百度推送自己的资源" class="headerlink" title="向百度推送自己的资源"></a>向百度推送自己的资源</h3><h5 id="使用sitemap方式推送"><a href="#使用sitemap方式推送" class="headerlink" title="使用sitemap方式推送"></a>使用sitemap方式推送</h5><p><strong>安装sitemap插件</strong></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-generator-sitemap --save <span class="token function">npm</span> <span class="token function">install</span> hexo-generator-baidu-sitemap --save</code></pre><p>这两个插件是用来生成 <code>Sitemap文件</code> 的插件，而 <code>Sitemap</code> 是用来告知搜索引擎我们的网站上有哪些可供抓取的网页的。</p><p><strong>注意一点：</strong></p><blockquote><p>hexo配置文件中的url一定要改成你的域名，这两个插件是根据你的url生成站点地图的。</p></blockquote><p>安装后直接执行<code>hexo cl&amp;&amp;hexo g</code>命令，然后就会在网站根目录生成<code>sitemap.xml</code>文件和<code>baidusitemap.xml文件</code>，其中<code>sitemap.xml</code>文件是搜索引擎通用的文件，<code>baidusitemap.xml</code>是百度专用的<code>sitemap</code>文件。</p><p>有<code>sitemap文件</code>之后，再将生成的<code>sitemap文件</code>提交给百度或者其他搜索引擎</p><p>百度方式：在自动提交的sitemap那里填写自己<code>sitemap文件</code>的URL地址即可</p><pre class=" language-http"><code class="language-http"><span class="token header-name keyword">https:</span>//你的域名/baidusitemap.xml</code></pre><h5 id="自动推送方式"><a href="#自动推送方式" class="headerlink" title="自动推送方式"></a>自动推送方式</h5><p>只要每个需要被百度爬取的HTML页面中加入一段JS代码即可：</p><pre class=" language-js"><code class="language-js"><span class="token operator">&lt;</span>script<span class="token operator">></span><span class="token punctuation">(</span><span class="token keyword">function</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> bp <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">createElement</span><span class="token punctuation">(</span><span class="token string">'script'</span><span class="token punctuation">)</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> curProtocol <span class="token operator">=</span> window<span class="token punctuation">.</span>location<span class="token punctuation">.</span>protocol<span class="token punctuation">.</span><span class="token function">split</span><span class="token punctuation">(</span><span class="token string">':'</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>curProtocol <span class="token operator">===</span> <span class="token string">'https'</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'https://zz.bdstatic.com/linksubmit/push.js'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">else</span> <span class="token operator">&amp;</span>#<span class="token number">123</span><span class="token punctuation">;</span>        bp<span class="token punctuation">.</span>src <span class="token operator">=</span> <span class="token string">'http://push.zhanzhang.baidu.com/push.js'</span><span class="token punctuation">;</span>    <span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span>    <span class="token keyword">var</span> s <span class="token operator">=</span> document<span class="token punctuation">.</span><span class="token function">getElementsByTagName</span><span class="token punctuation">(</span><span class="token string">"script"</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">;</span>    s<span class="token punctuation">.</span>parentNode<span class="token punctuation">.</span><span class="token function">insertBefore</span><span class="token punctuation">(</span>bp<span class="token punctuation">,</span> s<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&amp;</span>#<span class="token number">125</span><span class="token punctuation">;</span><span class="token punctuation">)</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token operator">&lt;</span><span class="token operator">/</span>script<span class="token operator">></span></code></pre><p>我所使用的matery主题可以自动给每个页面加上这段代码，只需在主题配置文件中配置：</p><pre class=" language-yml"><code class="language-yml"># 百度搜索资源平台提交链接baiduPush: true</code></pre><p>即可！</p><p>其他主题一般都有这个功能的实现，如果没有的话，想办法在每个页面加入以上JS代码即可，原理是一样。</p><h5 id="主动推送方式"><a href="#主动推送方式" class="headerlink" title="主动推送方式"></a>主动推送方式</h5><p>安装主动推送插件：<a href="https://github.com/huiwang/hexo-baidu-url-submit">hexo-baidu-url-submit</a></p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-baidu-url-submit --save</code></pre><p>然后打开<code>hexo配置文件</code>，在末尾加入以下配置：</p><pre class=" language-yml"><code class="language-yml"># hexo-baidu-url-submit  百度主动推送baidu_url_submit:  count: 80 # 提交最新的一个链接  host: blog.sky03.cn # 在百度站长平台中注册的域名  token: xxxxxxx # 请注意这是您的秘钥， 所以请不要把博客源代码发布在公众仓库里!  path: baidu_urls.txt # 文本文档的地址， 新链接会保存在此文本文档里</code></pre><p>密匙的获取是在百度的自动提交的主动推送那里。</p><p>再加入新的<code>deploy</code>：</p><pre class=" language-yml"><code class="language-yml">deploy:- type: baidu_url_submitter</code></pre><p>这样每次执行 <code>hexo d</code> 的时候，新的链接就会被推送了。<br>推送成功时,会有如下终端提示!</p><p>一般来说，推送失败基本都是地址不相符造成的，我们只需对比<code>baidu_url_submit</code>在<code>public</code>中生成的<code>baidu_urls.txt</code>的地址,与自己填写在<code>host</code>字段中的地址对比看是否一样即可。</p><h3 id="提交-robots-txt"><a href="#提交-robots-txt" class="headerlink" title="提交 robots.txt"></a>提交 robots.txt</h3><p><code>robots.txt</code> 是一种存放于网站根目录下的 <code>ASCII</code> 编码的文本文件，它的作用是告诉搜索引擎此网站中哪些内容是可以被爬取的，哪些是禁止爬取的。</p><p>每个人站点目录可能不太一样，可以参考下我的 <code>robots.txt</code> 文件，内容如下：</p><pre class=" language-yaml"><code class="language-yaml"><span class="token key atrule">User-agent</span><span class="token punctuation">:</span> *<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /<span class="token key atrule">Allow</span><span class="token punctuation">:</span> /posts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /about/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /archives/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /js/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /css/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /contact/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /fonts/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /friends/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /libs/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /medias/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /page/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /tags/<span class="token key atrule">Disallow</span><span class="token punctuation">:</span> /categories/</code></pre><p>编写完以上内容再重新部署一下，然后到百度资源平台的<code>数据监控</code>-&gt;<code>Robots</code>点击<code>检测并更新</code> 看能不能检测到。</p><p>同样注意：刚添加的站点没有进行 <code>HTTPS认证</code>，直接检测有可能会报301错误。</p><h3 id="配置-Nofollow"><a href="#配置-Nofollow" class="headerlink" title="配置 Nofollow"></a>配置 Nofollow</h3><ul><li>nofollow 是HTML页面中 <code>a标签</code> 的 属性值。</li><li>这个属性的作用是：告诉搜索引擎的爬虫不要追踪该链接，为了对抗博客垃圾留言信息</li></ul><h3 id="URL优化"><a href="#URL优化" class="headerlink" title="URL优化"></a>URL优化</h3><p>一般来说，SEO搜索引擎优化认为，网站的最佳结构是 <strong>用户从首页点击三次就可以到达任何一个页面</strong>，但是我们使用<code>Hexo</code>编译的站点结构的<code>URL</code>是：<code>域名/年/月/日/文章标题</code>四层的结构，这样的<code>URL</code>结构很不利于<code>SEO</code>，爬虫就会经常爬不到我们的文章，于是，我们需要优化一下网站文章的<code>URL</code></p><p><strong>方案一</strong>：</p><p>直接改成<code>域名/文章标题</code>的形式，在<code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://muyun.inforoot: /permalink: :title.htmlpermalink_defaults:</code></pre><p><strong>这个方式有个不好的地方：</strong></p><p>直接以<code>文章的标题</code>作为URL，而我们所写的文章的标题一般都是中文，但是URL只能用字母数字和标点符号表示，所以中文的URL只能被转义成一堆符号，而且还特别长。</p><p><strong>方案二</strong>：</p><p>安装固定链接插件：<a href="https://github.com/rozbo/hexo-abbrlink">hexo-abbrlink</a></p><p>插件作用：自动为每篇文章生成一串数字作每篇文章的URI地址。每篇文章的<code>Front-matter</code>中会自动增加一个配置项：<code>abbrlink: xxxxx</code>，该项的值就是当前文章的URI地址。</p><ol><li><p>Hexo根目录执行：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-abbrlink --save</code></pre></li><li><p><code>Hexo配置文件</code>末尾加入以下配置：</p><pre class=" language-yml"><code class="language-yml"># hexo-abbrlink config 、固定文章地址插件abbrlink:  alg: crc16  #算法选项：crc16、crc32，区别见之前的文章，这里默认为crc16丨crc32比crc16复杂一点，长一点  rep: dec    #输出进制：十进制和十六进制，默认为10进制。丨dec为十进制，hex为十六进制</code></pre></li><li><p><code>Hexo配置文件</code>中修改<code>permalink</code>如下：</p><pre class=" language-yml"><code class="language-yml"># URL## If your site is put in a subdirectory, set url as 'http://yoursite.com/child' and root as '/child/'url: https://muyun.inforoot: /permalink: posts/:abbrlink.htmlpermalink_defaults:</code></pre></li></ol><p>这样站点结构就变成了：<code>域名/posts/xxx.html</code></p>]]></content>
      
      
      <categories>
          
          <category> 网站优化 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> npm </tag>
            
            <tag> hexo </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux iostat命令详解</title>
      <link href="posts/3.html"/>
      <url>posts/3.html</url>
      
        <content type="html"><![CDATA[<p>iostat是I/O statistics（输入/输出统计）的缩写，iostat工具将对系统的磁盘操作活动进行监视。它的特点是汇报磁盘活动统计情况，同时也会汇报出CPU使用情况。iostat也有一个弱点，就是它不能对某个进程进行深入分析，仅对系统的整体情况进行分析</p><h2 id="常见命令展示"><a href="#常见命令展示" class="headerlink" title="常见命令展示"></a>常见命令展示</h2><h3 id="iostat-安装"><a href="#iostat-安装" class="headerlink" title="iostat 安装"></a>iostat 安装</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># iostat属于sysstat软件包。可以直接安装。</span>yum <span class="token function">install</span> sysstat</code></pre><h3 id="显示所有设备负载情况"><a href="#显示所有设备负载情况" class="headerlink" title="显示所有设备负载情况"></a>显示所有设备负载情况</h3><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span>root@i-003F281E ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iostat</span>Linux 3.10.0-1062.4.1.el7.x86_64 <span class="token punctuation">(</span>i-003F281E<span class="token punctuation">)</span>     2020年03月05日     _x86_64_    <span class="token punctuation">(</span>4 CPU<span class="token punctuation">)</span>avg-cpu:  %user   %nice %system %iowait  %steal   %idle           1.65    0.00    0.58    0.38    0.01   97.38Device:            tps    kB_read/s    kB_wrtn/s    kB_read    kB_wrtnvda              10.84       126.28      1034.29     317347    2599151dm-0             11.81       120.22      1011.98     302106    2543083dm-1              0.05         1.29         0.00       3236          0dm-2              0.03         0.43         0.81       1090       2048</code></pre><p>cpu属性值说明：</p><p>%user：CPU处在用户模式下的时间百分比。</p><p>%nice：CPU处在带NICE值的用户模式下的时间百分比。</p><p>%system：CPU处在系统模式下的时间百分比。</p><p>%iowait：CPU等待输入输出完成时间的百分比。</p><p>%steal：管理程序维护另一个虚拟处理器时，虚拟CPU的无意识等待时间百分比。</p><p>%idle：CPU空闲时间百分比。</p><p>备注：</p><p>如果%iowait的值过高，表示硬盘存在I/O瓶颈</p><p>如果%idle值高，表示CPU较空闲</p><p>如果%idle值高但系统响应慢时，可能是CPU等待分配内存，应加大内存容量。</p><p>如果%idle值持续低于10，表明CPU处理能力相对较低，系统中最需要解决的资源是CPU。</p><p>cpu属性值说明:</p><p>tps：该设备每秒的传输次数</p><p>kB_read/s：每秒从设备（drive expressed）读取的数据量；</p><p>kB_wrtn/s：每秒向设备（drive expressed）写入的数据量；</p><p>kB_read：  读取的总数据量；</p><p>kB_wrtn：写入的总数量数据量；</p><h3 id="定时显示所有信息"><a href="#定时显示所有信息" class="headerlink" title="定时显示所有信息"></a>定时显示所有信息</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#【每隔2秒刷新显示，且显示3次】</span>iostat 2  3</code></pre><h3 id="显示指定磁盘信息"><a href="#显示指定磁盘信息" class="headerlink" title="显示指定磁盘信息"></a>显示指定磁盘信息</h3><pre class=" language-bash"><code class="language-bash">iostat -d /dev/sda</code></pre><h3 id="显示tty和Cpu信息"><a href="#显示tty和Cpu信息" class="headerlink" title="显示tty和Cpu信息"></a>显示tty和Cpu信息</h3><pre class=" language-bash"><code class="language-bash">iostat -t</code></pre><h3 id="以M为单位显示所有信息"><a href="#以M为单位显示所有信息" class="headerlink" title="以M为单位显示所有信息"></a>以M为单位显示所有信息</h3><pre class=" language-bash"><code class="language-bash">iostat -m</code></pre><h3 id="查看设备使用率（-util）、响应时间（await）"><a href="#查看设备使用率（-util）、响应时间（await）" class="headerlink" title="查看设备使用率（%util）、响应时间（await）"></a>查看设备使用率（%util）、响应时间（await）</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#  【-d 显示磁盘使用情况，-x 显示详细信息】</span><span class="token comment" spellcheck="true">#  d: detail</span>iostat -d -x -k 1 1<span class="token punctuation">[</span>root@i-003F281E ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iostat -d -x -k 1 1</span>Linux 3.10.0-1062.4.1.el7.x86_64 <span class="token punctuation">(</span>i-003F281E<span class="token punctuation">)</span>     2020年03月05日     _x86_64_    <span class="token punctuation">(</span>4 CPU<span class="token punctuation">)</span>Device:         rrqm/s   wrqm/s     r/s     w/s    rkB/s    wkB/s avgrq-sz avgqu-sz   await r_await w_await  svctm  %utilvda               0.01     1.86    4.47    6.09   123.00  1007.42   214.01     0.70   92.65    5.20  156.86   2.58   2.72dm-0              0.00     0.00    4.21    7.31   117.09   985.69   191.59     1.30  112.62    5.71  174.19   2.33   2.68dm-1              0.00     0.00    0.05    0.00     1.25     0.00    50.96     0.00    1.35    1.35    0.00   0.96   0.00dm-2              0.00     0.00    0.03    0.00     0.42     0.79    72.98     0.00   10.29    2.84  131.00   3.81   0.01</code></pre><p>说明：</p><p>rrqm/s：  每秒进行 merge 的读操作数目.即 delta(rmerge)/s</p><p>wrqm/s： 每秒进行 merge 的写操作数目.即 delta(wmerge)/s</p><p>%util： 一秒中有百分之多少的时间用于 I/O</p><p>如果%util接近100%，说明产生的I/O请求太多，I/O系统已经满负荷</p><p>   idle小于70% IO压力就较大了，一般读取速度有较多的wait。</p><h3 id="查看cpu状态"><a href="#查看cpu状态" class="headerlink" title="查看cpu状态"></a>查看cpu状态</h3><pre class=" language-bash"><code class="language-bash">iostat -c 1 1<span class="token punctuation">[</span>root@i-003F281E ~<span class="token punctuation">]</span><span class="token comment" spellcheck="true"># iostat -c 1 1</span>Linux 3.10.0-1062.4.1.el7.x86_64 <span class="token punctuation">(</span>i-003F281E<span class="token punctuation">)</span>     2020年03月05日     _x86_64_    <span class="token punctuation">(</span>4 CPU<span class="token punctuation">)</span>avg-cpu:  %user   %nice %system %iowait  %steal   %idle           1.57    0.00    0.55    0.36    0.01   97.51</code></pre>]]></content>
      
      
      <categories>
          
          <category> Linux命令 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> iostat </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS上搭建GitLab的详细过程</title>
      <link href="posts/2.html"/>
      <url>posts/2.html</url>
      
        <content type="html"><![CDATA[<h2 id="Git的优点和缺点介绍"><a href="#Git的优点和缺点介绍" class="headerlink" title="Git的优点和缺点介绍"></a>Git的优点和缺点介绍</h2><h3 id="Git优点"><a href="#Git优点" class="headerlink" title="Git优点"></a>Git优点</h3><ul><li>1、适合分布式开发，强调个体</li><li>2、公共服务器压力和数据量都不会太大</li><li>3、速度快、灵活</li><li>4、任意两个开发者之间可以很容易的解决冲突</li><li>5、离线可以正常提交代码和工作</li></ul><h3 id="Git缺点"><a href="#Git缺点" class="headerlink" title="Git缺点"></a>Git缺点</h3><ul><li>1、学习周期相对而言比较长</li><li>2、不符合常规思维</li><li>3、代码保密性差，一旦开发者把整个库克隆下来就可以完全公开所有代码和版本信息</li></ul><h2 id="1-准备环境"><a href="#1-准备环境" class="headerlink" title="1.准备环境"></a>1.准备环境</h2><p>操作系统： CentOS 8 （搞清楚自己的环境，如果不知道 请输入以下命令）：</p><pre class=" language-bash"><code class="language-bash">CentOS:<span class="token comment" spellcheck="true">#  cat /etc/redhat-release</span>CentOS Linux release 8.1.1911 <span class="token punctuation">(</span>Core<span class="token punctuation">)</span></code></pre><p>Ubuntu 系统命令</p><pre class=" language-bash"><code class="language-bash">Ubuntu:<span class="token comment" spellcheck="true"># lsb_release -a</span>No LSB modules are available.Distributor ID: UbuntuDescription:    Ubuntu 18.04</code></pre><h3 id="1-安装依赖包："><a href="#1-安装依赖包：" class="headerlink" title="1.安装依赖包："></a>1.安装依赖包：</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf <span class="token function">install</span> curl openssh-server ca-certificates postfix<span class="token comment" spellcheck="true"># Ubuntu 命令为 apt</span></code></pre><p>注：执行完成后，出现邮件配置，选择Internet那一项（不带Smarthost的）,选择完后，后面的东西，随便填吧，没啥卵用~</p><h3 id="2-修改镜像源地址"><a href="#2-修改镜像源地址" class="headerlink" title="2.修改镜像源地址"></a>2.修改镜像源地址</h3><p>常用的国内源地址</p><ul><li>阿里源： <a href="http://mirrors.aliyun.com/" title="阿里云源">http://mirrors.aliyun.com/</a></li><li>清华大学：<a href="https://mirrors.tuna.tsinghua.edu.cn/" title="清华大学源">https://mirrors.tuna.tsinghua.edu.cn/</a></li><li>中科大：<a href="https://mirrors.ustc.edu.cn/" title="中科大源">https://mirrors.ustc.edu.cn/</a></li></ul><p>我们利用清华大学的镜像</p><pre class=" language-txt"><code class="language-txt">https://mirror.tuna.tsinghua.edu.cn/help/gitlab-ce/</code></pre><p>来进行主程序的安装。首先信任 GitLab 的 GPG 公钥：</p><pre class=" language-bash"><code class="language-bash">curl https://packages.gitlab.com/gpg.key 2<span class="token operator">></span> /dev/null <span class="token operator">|</span> <span class="token function">sudo</span> apt-key add - <span class="token operator">&amp;</span><span class="token operator">></span>/dev/null<span class="token comment" spellcheck="true"># 查看修改源地址</span><span class="token function">sudo</span>  <span class="token function">vi</span> /etc/yum.repos.d/gitlab_gitlab-ee.repo<span class="token punctuation">[</span>gitlab_gitlab-ee<span class="token punctuation">]</span>name<span class="token operator">=</span>gitlab_gitlab-eebaseurl<span class="token operator">=</span>https://packages.gitlab.com/gitlab/gitlab-ee/el/8/<span class="token variable">$basearch</span>repo_gpgcheck<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey       https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.pub.gpgsslverify<span class="token operator">=</span>1sslcacert<span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crtmetadata_expire<span class="token operator">=</span>300<span class="token punctuation">[</span>gitlab_gitlab-ee-source<span class="token punctuation">]</span>name<span class="token operator">=</span>gitlab_gitlab-ee-sourcebaseurl<span class="token operator">=</span>https://packages.gitlab.com/gitlab/gitlab-ee/el/8/SRPMSrepo_gpgcheck<span class="token operator">=</span>1gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey       https://packages.gitlab.com/gitlab/gitlab-ee/gpgkey/gitlab-gitlab-ee-3D645A26AB9FBD22.pub.gpgsslverify<span class="token operator">=</span>1sslcacert<span class="token operator">=</span>/etc/pki/tls/certs/ca-bundle.crtmetadata_expire<span class="token operator">=</span>300</code></pre><p>安装 gitlab-ce:</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> dnf update<span class="token function">sudo</span> dnf <span class="token function">install</span> gitlab-ce</code></pre><p>注： 有点慢 耐心等吧~<br>修改配置 ：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/gitlab/gitlab.rb<span class="token comment" spellcheck="true"># 更改 external_url</span>external_url <span class="token operator">=</span>http://192.168.1.10 <span class="token comment" spellcheck="true"># (IP换成你本机的IP地址)</span></code></pre><h3 id="3-启动sshd和postfix服务"><a href="#3-启动sshd和postfix服务" class="headerlink" title="3.启动sshd和postfix服务"></a>3.启动sshd和postfix服务</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> systemctl start sshd<span class="token function">sudo</span> systemctl start postfix</code></pre><h3 id="4-添加防火墙规则"><a href="#4-添加防火墙规则" class="headerlink" title="4.添加防火墙规则"></a>4.添加防火墙规则</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> iptables -A INPUT -p tcp -m tcp --dport 80 -j ACCEPT</code></pre><h3 id="5-启动各项服务"><a href="#5-启动各项服务" class="headerlink" title="5.启动各项服务"></a>5.启动各项服务</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl reconfigure</code></pre><p>有点慢，须要稍等下。</p><p>上面这一步可能会失败，报错如下：</p><pre class=" language-txt"><code class="language-txt">ERROR: user[git] (gitlab''users line 34) ......</code></pre><p>解决办法：进入到文件： /etc/gitlab/gitlab.rb，找到下面他们俩：</p><pre class=" language-bash"><code class="language-bash">user<span class="token punctuation">[</span>‘username’<span class="token punctuation">]</span><span class="token operator">=</span>’git’User<span class="token punctuation">[</span>‘group’<span class="token punctuation">]</span><span class="token operator">=</span>’git’<span class="token comment" spellcheck="true"># 讲git改为gitlab。然后初始化配置</span><span class="token function">sudo</span> gitlab-ctl reconfigure</code></pre><p>这时又报错，查了下说是至少大于等于2G CPU运行内存，修改内存后解决</p><h3 id="6-查看安装是否成功"><a href="#6-查看安装是否成功" class="headerlink" title="6.查看安装是否成功"></a>6.查看安装是否成功</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl status</code></pre><p>出现一下画面就OK了：</p><pre class=" language-bash"><code class="language-bash"><span class="token function">sudo</span> gitlab-ctl statusrun: alertmanager: <span class="token punctuation">(</span>pid 22060<span class="token punctuation">)</span> 15s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22146<span class="token punctuation">)</span> 15srun: gitaly: <span class="token punctuation">(</span>pid 21990<span class="token punctuation">)</span> 17s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22003<span class="token punctuation">)</span> 16srun: gitlab-monitor: <span class="token punctuation">(</span>pid 22026<span class="token punctuation">)</span> 16s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22030<span class="token punctuation">)</span> 16srun: gitlab-workhorse: <span class="token punctuation">(</span>pid 21973<span class="token punctuation">)</span> 17s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21981<span class="token punctuation">)</span> 17srun: logrotate: <span class="token punctuation">(</span>pid 21526<span class="token punctuation">)</span> 64s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21983<span class="token punctuation">)</span> 17srun: nginx: <span class="token punctuation">(</span>pid 21498<span class="token punctuation">)</span> 66s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21982<span class="token punctuation">)</span> 17srun: node-exporter: <span class="token punctuation">(</span>pid 21753<span class="token punctuation">)</span> 52s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22004<span class="token punctuation">)</span> 16srun: postgres-exporter: <span class="token punctuation">(</span>pid 22153<span class="token punctuation">)</span> 15s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22161<span class="token punctuation">)</span> 14srun: postgresql: <span class="token punctuation">(</span>pid 21187<span class="token punctuation">)</span> 201s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21964<span class="token punctuation">)</span> 17srun: prometheus: <span class="token punctuation">(</span>pid 22039<span class="token punctuation">)</span> 15s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22053<span class="token punctuation">)</span> 15srun: redis: <span class="token punctuation">(</span>pid 21117<span class="token punctuation">)</span> 207s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21963<span class="token punctuation">)</span> 17srun: redis-exporter: <span class="token punctuation">(</span>pid 21791<span class="token punctuation">)</span> 44s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 22031<span class="token punctuation">)</span> 16srun: sidekiq: <span class="token punctuation">(</span>pid 21465<span class="token punctuation">)</span> 73s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21966<span class="token punctuation">)</span> 17srun: unicorn: <span class="token punctuation">(</span>pid 21428<span class="token punctuation">)</span> 79s<span class="token punctuation">;</span> run: log: <span class="token punctuation">(</span>pid 21965<span class="token punctuation">)</span> 17s</code></pre><p>登陆地址 ，就是刚才你刚才添加到配置文件的那个地址登陆访问（无需输入端口）：</p><pre class=" language-txt"><code class="language-txt">http://192.168.1.10</code></pre><p>上来先让你初始化密码，剩下的就是界面画操作。 (帐号密码在上面gitlab.rb中有设置)<br>安装到此结束~</p><p>注：gitlab在服务器中的默认代码存放的位置是 /var/opt/gitlab/git-data/repositories</p>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> CentOS </tag>
            
            <tag> GitLab </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Sublime Text 3写Markdown</title>
      <link href="posts/1.html"/>
      <url>posts/1.html</url>
      
        <content type="html"><![CDATA[<h2 id="首先介绍几个Markdown语法说明"><a href="#首先介绍几个Markdown语法说明" class="headerlink" title="首先介绍几个Markdown语法说明"></a>首先介绍几个Markdown语法说明</h2><ul><li>1：Markdown 语法说明（详解版）</li><li>2：Markdown 语法说明 (简体中文版)</li><li>3：GitHub 风格的 Markdown 语法</li><li>4：GitHub 上的书写方式</li></ul><p>目前Sublime Text 3已经支持高亮显示原始Markdown和MultiMarkdown语法，如果不需要预览功能或是GitHub Flavored Markdown支持，可以直接使用。</p><p>安装中需要使用Package Control，没有安装的可以看这边。</p><h2 id="安装Markdown-Preview-插件"><a href="#安装Markdown-Preview-插件" class="headerlink" title="安装Markdown Preview 插件"></a>安装Markdown Preview 插件</h2><p>Mardown Preview不仅支持在浏览器中预览markdown文件，还可以导出html代码。下面我们通过Package Control安装。</p><h3 id="1-安装"><a href="#1-安装" class="headerlink" title="1.安装"></a>1.安装</h3><p>通过按组合键Ctrl+Shift+P或是点击Preference-&gt;Package Control调出命令面板，然后再输入 install，选择 Package Control: install package。</p><p><img src="/medias/sublime/sublime-install.png" alt="install package"></p><p>在插件安装面板输入markdown找到Markdown Preview并点击安装即可。</p><p><img src="/medias/sublime/sublime-markdown.png" alt="install markdown" title="安装MarkdownPreview"></p><h3 id="2-使用"><a href="#2-使用" class="headerlink" title="2.使用"></a>2.使用</h3><p>通过按组合键Ctrl+Shift+P或是点击Preference-&gt;Package Control调出命令面板，输入mdp，下图中红框圈出的就是在浏览器中预览markdown文件。</p><p><img src="/medias/sublime/sublime-mdp.png" alt="运行 markdown" title="运行MarkdownPreview"></p><p>选中后，你将见到两个选项：GitHub和Mardown。GitHub选项意味着使用GitHub的在线API来解析.md文件。它的解析速度取决于你的联网速度。据称有每天60次访问的限制。[2]但能免费获得GFM格式的语法支持和EMOJI表情的支持。</p><p>另外一个常用功能是图中第五个，Export HTML in Sublime Text，即导出html文件到sublime text。</p><h3 id="3-快捷键设置"><a href="#3-快捷键设置" class="headerlink" title="3.快捷键设置"></a>3.快捷键设置</h3><p>Sublime Text支持自定义快捷键，markdown preview默认没有快捷键，我们可以自己为preview in browser设置快捷键。方法是在Preferences -&gt; Key Bindings User打开的文件的中括号中添加以下代码(可在Key Bindings Default找到格式)：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123; "keys": ["alt+m"], "command": "markdown_preview", "args": &amp;#123;"target": "browser", "parser":"markdown"&amp;#125; &amp;#125;</span></code></pre><p>这里：<br>“alt+m”可设置为自己喜欢的按键。<br>“parser”:”markdown”也可设置为”parser”:”github”，改为使用Github在线API解析markdown。</p><h3 id="4-设置语法高亮和mathjax支持"><a href="#4-设置语法高亮和mathjax支持" class="headerlink" title="4.设置语法高亮和mathjax支持"></a>4.设置语法高亮和mathjax支持</h3><p>语法高亮跟编辑器的主题有关，可以在Preferences -&gt;Color Scheme找自己喜欢的主题。</p><p>关于目录生成，只要文章是按照markdown语法写作的。在需要生成目录的地方写[TOC]即可。</p><p>设置mathjax支持需要在Preferences -&gt;Package Settings-&gt;Markdown Preview-&gt;Setting User中增加如下代码[5]：</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    /*        Enable or not mathjax support.    */    <span class="token string">"enable_mathjax"</span><span class="token keyword">:</span> true,    /*        Enable or not highlight.js support <span class="token keyword">for</span> syntax highlighting.    */    <span class="token string">"enable_highlight"</span><span class="token keyword">:</span> true,<span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;</span></code></pre><h3 id="打印成pdf"><a href="#打印成pdf" class="headerlink" title="打印成pdf"></a>打印成pdf</h3><p>将markdown转换为pdf应该有很多种方法的。可直接用谷歌浏览器虚拟打印功能生成。[3]<br>利用Markdown Preview的Preview in Browser功能可以在浏览器上看到htm效果。在页面右键-&gt;打印-&gt;另存为pdf-&gt;调节页边距即可将pdf文件下载下来。</p><h2 id="安装使用Markdown-Editing"><a href="#安装使用Markdown-Editing" class="headerlink" title="安装使用Markdown Editing"></a>安装使用Markdown Editing</h2><p>Github项目地址：SublimeText-Markdown/MarkdownEditing</p><h3 id="1-安装-1"><a href="#1-安装-1" class="headerlink" title="1.安装"></a>1.安装</h3><p>如果Sublime安装了Package Control,直接使用组合键Command+Shift+P调出命令面板，输入 “package install” 从列表中选择 “install Package” 然后回车。再输入MarkdownEditing，找到后点击即可自行安装，重启便可使用。</p><h3 id="2-使用-1"><a href="#2-使用-1" class="headerlink" title="2.使用"></a>2.使用</h3><p>除了高亮显示语法，MarkdownEditing 还提供了一些快捷键用于快速插入markdown 标记。引用6中有比较详细的使用方式，这里仅作简要介绍。<br>常用的(更多的快捷键请参阅其官方文档)有：</p><p>插入链接：Ctrl + Win + K<br>插入图片：Shift + Win + K</p><h3 id="3-code-snippet"><a href="#3-code-snippet" class="headerlink" title="3.code snippet"></a>3.code snippet</h3><p>输入 “mdi + tab” 会自动插入下面的图片标记</p><pre class=" language-bash"><code class="language-bash"><span class="token operator">!</span><span class="token punctuation">[</span>Alt text<span class="token punctuation">]</span><span class="token punctuation">(</span>/path/to/img.jpg <span class="token string">"Optional title"</span><span class="token punctuation">)</span><span class="token operator">!</span><span class="token punctuation">[</span>图片alt<span class="token punctuation">]</span><span class="token punctuation">(</span>图片地址 <span class="token string">''</span>图片title<span class="token string">''</span><span class="token punctuation">)</span>图片alt就是显示在图片下面的文字，相当于对图片内容的解释。图片title是图片的标题，当鼠标移到图片上时显示的内容。title可加可不加</code></pre><p>输入 “mdl + tab” 会自动生成下面的链接标记</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>link<span class="token punctuation">)</span><span class="token punctuation">[</span>超链接名<span class="token punctuation">]</span><span class="token punctuation">(</span>超链接地址 <span class="token string">"超链接title"</span><span class="token punctuation">)</span>title可加可不加</code></pre><h2 id="另外的插件：OmniMarkupPreviewer"><a href="#另外的插件：OmniMarkupPreviewer" class="headerlink" title="另外的插件：OmniMarkupPreviewer"></a>另外的插件：OmniMarkupPreviewer</h2><p>这个插件貌似功能很强大，用于markdown这是其中的一种功能。因为上两种插件已经够用，就不再研究它了，仅仅Mark下。</p>]]></content>
      
      
      <categories>
          
          <category> 软件工具 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Sublime Text </tag>
            
            <tag> Markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用Hexo与GitHub搭建独立域名博客</title>
      <link href="posts/3eeb.html"/>
      <url>posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><ul><li>Git</li><li>Nodejs</li><li>安装Hexo及代码提交托管需要以上两个条件</li></ul><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><h4 id="Windows平台下安装"><a href="#Windows平台下安装" class="headerlink" title="Windows平台下安装"></a>Windows平台下安装</h4><p>Windows平台下安装相关要简单，下载安装包一路下一步便是。因此不在多叙述。<a href="https://git-scm.com/">Git官网下载</a>  <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.25.0.windows.1/Git-2.25.0-32-bit.exe">淘宝镜像下载</a></p><h4 id="CentOS平台安装"><a href="#CentOS平台安装" class="headerlink" title="CentOS平台安装"></a>CentOS平台安装</h4><p>在CentOS平台安装最好是先更新为国内Yum源，并更新系统软件等包为最新。这样速度较快，支持较好。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="Ubuntu平台安装"><a href="#Ubuntu平台安装" class="headerlink" title="Ubuntu平台安装"></a>Ubuntu平台安装</h4><p>在Ubuntu平台安装与在CentOS相差不大</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="Mac平台安装"><a href="#Mac平台安装" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><p>在Mac平台安装既可以通过GUI的方式来安装也可以通过Command的方式来安装，使用Homebrew进行安装：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>如果没有安装HomBrew， <a href="https://brew.sh/index_zh-cn">可以参考</a></p><h3 id="Git-配置命令"><a href="#Git-配置命令" class="headerlink" title="Git 配置命令"></a>Git 配置命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用前配置全局信息</span><span class="token function">git</span> config --global user.name <span class="token string">'你的名字'</span><span class="token function">git</span> config --global user.email <span class="token string">'你的邮箱'</span><span class="token comment" spellcheck="true">#查看是否已配置成功</span><span class="token function">git</span> config --list --global<span class="token comment" spellcheck="true">#在你需要使用Git的文件夹下运行</span><span class="token function">git</span> init                        <span class="token comment" spellcheck="true">#初始化</span><span class="token function">git</span> add <span class="token keyword">.</span>                        <span class="token comment" spellcheck="true">#添加变更文件到暂存区</span><span class="token function">git</span> status                        <span class="token comment" spellcheck="true">#查看变更信息</span><span class="token function">git</span> commit -m <span class="token string">'你需要写的信息'</span>        <span class="token comment" spellcheck="true">#提交到工作区</span><span class="token function">git</span> remote add origin https://github.com/用户名/仓库名.git    <span class="token comment" spellcheck="true">#添加Github远程连接</span><span class="token function">git</span> push origin                 <span class="token comment" spellcheck="true">#上传到GitHub</span><span class="token function">git</span> push origin -f                <span class="token comment" spellcheck="true">#强制上传到GitHub</span></code></pre><h4 id="Git代理相关"><a href="#Git代理相关" class="headerlink" title="Git代理相关"></a>Git代理相关</h4><p>查看当前的代理设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy<span class="token function">git</span> config --global https.proxy</code></pre><p>设置当前代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token string">'http://127.0.0.1:1080'</span><span class="token function">git</span> config --global https.proxy <span class="token string">'http://127.0.0.1:1080'</span></code></pre><p>或</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token string">'socks5://127.0.0.1:1080'</span><span class="token function">git</span> config --global https.proxy <span class="token string">'socks5://127.0.0.1:1080'</span></code></pre><p>删除代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy</code></pre><p>其它Git用法请参考<a href="https://git-scm.com/book/zh/v2">文档</a></p><h3 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h3><h4 id="Windows平台安装"><a href="#Windows平台安装" class="headerlink" title="Windows平台安装"></a>Windows平台安装</h4><p>Windows平台安装Node较简单，不再多叙述。 <a href="http://nodejs.cn/download/">Node下载</a></p><p>安装完后输入 node -v 查询版本信息</p><h4 id="CentOS平台"><a href="#CentOS平台" class="headerlink" title="CentOS平台"></a>CentOS平台</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> nodejs <span class="token function">npm</span></code></pre><p>源码安装,先下载 Node源码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">tar</span> -xvf node-v10.16.0-linux-x64.tar.xz$ <span class="token function">sudo</span> <span class="token function">mv</span> node-v10.16.0 /home/blue/applications$ <span class="token function">ln</span> -s /home/blue/applications/node /home/blue/applications/node$ <span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /home/blue/applications/node-v10.16.0$ <span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /home/blue/applications/node$ <span class="token function">cd</span> /home/blue/applications/node$ <span class="token function">sudo</span> ./configure$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>$ <span class="token function">sudo</span> node --versionv10.16.0</code></pre><h4 id="Ubnutu平台安装"><a href="#Ubnutu平台安装" class="headerlink" title="Ubnutu平台安装"></a>Ubnutu平台安装</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs <span class="token function">npm</span></code></pre><h4 id="Mac平台安装-1"><a href="#Mac平台安装-1" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> node <span class="token function">npm</span></code></pre><h4 id="设置国内NPM源"><a href="#设置国内NPM源" class="headerlink" title="设置国内NPM源"></a>设置国内NPM源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 永久设置全局淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org --global<span class="token function">npm</span> config <span class="token keyword">set</span> disturl https://npm.taobao.org/dist --global<span class="token comment" spellcheck="true"># 临时修改镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 查看npm的配置</span><span class="token function">npm</span> config list</code></pre><h4 id="安装-Yarn-非必须）"><a href="#安装-Yarn-非必须）" class="headerlink" title="安装 Yarn (非必须）"></a>安装 Yarn (非必须）</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yarn<span class="token comment" spellcheck="true"># 配置yarn淘宝源</span>yarn config <span class="token keyword">set</span> registry <span class="token string">'https://registry.npm.taobao.org'</span><span class="token comment" spellcheck="true"># 设置 npm 缓存</span><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"/home/blue/applications/cache/node/prefix"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"/home/blue/applications/cache/node/cache"</span></code></pre><p>还需要将/home/blue/applications/cache/node/prefix添加到PATH环境变量</p><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo   <span class="token comment" spellcheck="true">#安装hexo</span><span class="token function">npm</span> <span class="token function">install</span>           <span class="token comment" spellcheck="true">#安装博客需要的依赖文件</span><span class="token comment" spellcheck="true"># 配置国内淘宝 cnpm ( 使用npm较慢时可改用)</span>$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org$ <span class="token function">sudo</span> cnpm <span class="token function">install</span> -g hexo</code></pre><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><p>创建一个hexo仓库文件夹，进入文件夹初始化hexo</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /home/hexo$ hexo initINFO Cloning hexo-starter <span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><p>初始化完成后，在hexo目录下生成相关文件</p><p>hexo 目录结构</p><ul><li>_config.yml          配置文件</li><li>_public            生成的静态文件，这个目录最终会发布到服务器</li><li>_scaffolds         通用模板</li><li>_source         保存编写的markdown文件</li><li>drafts            草稿文件</li><li>themes             博客主题</li><li>node_modules     类库</li></ul><h3 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h3><p>在hexo目录中运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/matery<span class="token comment" spellcheck="true"># 启用主题</span>$ <span class="token function">vi</span> _config.yml<span class="token comment" spellcheck="true"># 修改文件中的 theme</span>theme: matery</code></pre><p>克隆完成后，在/Hexo/themes目录下，可以看到 landscape和matery 两个文件夹。<br>我们所要使用的主题都是放在这个目录下，Hexo默认使用的是landscape主题，NexT主题用的比较多且更多样化，我们这一步克隆了next主题，接下来会使用next主题进行演示。<br>想获取更多主题，可在网站：<a href="https://hexo.io/themes/">此处</a>选择自己喜欢的主题，按照此步的步骤clone下来。</p><h3 id="hexo目录中-confit-yml文件配置"><a href="#hexo目录中-confit-yml文件配置" class="headerlink" title="hexo目录中_confit.yml文件配置"></a>hexo目录中_confit.yml文件配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Site</span><span class="token comment" spellcheck="true"># 博客名称</span>title: aiotlab<span class="token comment" spellcheck="true"># 副标题 </span>subtitle: aiotlab blog<span class="token comment" spellcheck="true"># 个人简介</span>description: 这是 aiotlab blogkeywords: aiotlab,lag,aiotlab<span class="token comment" spellcheck="true"># 博主</span>author: Jeremy Peng<span class="token comment" spellcheck="true"># 语言</span>language: zh-CN<span class="token comment" spellcheck="true"># 时区</span>timezone: Asia/Shanghaiurl    :网址    root :网站根目录    permalink: 文章的永久链接格式 :year/:month/:day/:title/permalink_defaults:    永久链接中各部分的默认值    pretty_urls: 改写 permalink 的值来美化 URL    pretty_urls.trailing_index: 是否在永久链接中保留尾部的 index.html，设置为 false时去除pretty_urls.trailing_html: 是否在永久链接中保留尾部的 .html, 设置为 <span class="token boolean">false</span> 时去除<span class="token comment" spellcheck="true"># 目录(基本不需改)</span>source_dir        资源文件夹，这个文件夹用来存放内容public_dir        公共文件夹，这个文件夹用于存放chang生成的站点文件tag_dir            标签文件夹archive_dir        归档文件夹category_dir    分类文件夹code_dir        Include code 文件夹，source_dir 下的子目录i18n_dir        国际化（i18n）文件夹skip_render        跳过指定文件的渲染。<span class="token punctuation">(</span>常用于跳过GitHub的README.md渲染<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分页</span>per_page        每页显示的文章量 <span class="token punctuation">(</span>0 关闭分页功能,默认10<span class="token punctuation">)</span>pagination_dir    分页目录<span class="token comment" spellcheck="true"># 主题,当前主题名称</span>theme: matery<span class="token comment" spellcheck="true"># 发布</span>deploy:  type: <span class="token function">git</span>  repo: 仓库  branch: 分支</code></pre><h4 id="新建分类categories页"><a href="#新建分类categories页" class="headerlink" title="新建分类categories页"></a>新建分类categories页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑文件 /source/categories/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2020-03-01type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑文件 /source/tags/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2020-03-01 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑文件 /source/about/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2020-03-01 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑文件 /source/friends/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2020-03-01 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#123;</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://cdn.jsdelivr.net/gh/jeremysvn/aiotlab/medias/avatar.jpg"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"AiotLab"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"这是我的博客"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://aiotlab.info/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去学习"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;, &amp;#123;</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://s2.ax1x.com/2020/02/13/1q6iAs.th.png"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"AiotLab"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"这是我的其他博客"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"http://aiotlab.cc/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去查看"</span><span class="token operator">&amp;</span><span class="token comment" spellcheck="true">#125;]</span></code></pre><h4 id="新建留言contact页"><a href="#新建留言contact页" class="headerlink" title="新建留言contact页"></a>新建留言contact页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑文件 /source/contact/infex.md 内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: contactdate: 2020-03-01 21:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---</code></pre><h3 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h3><h4 id="本地发布测试"><a href="#本地发布测试" class="headerlink" title="本地发布测试"></a>本地发布测试</h4><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span class="token punctuation">..</span>.INFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>访问 <a href="http://localhost:4000/">http://localhost:4000/</a> 即可看到博客效果</p><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>访问 <a href="https://github.com/">https://github.com/</a> ，申请注册账号，并创建一个仓库</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:帐号/仓库名.git  branch: master</code></pre><h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h3><h4 id="创建-ssh-key"><a href="#创建-ssh-key" class="headerlink" title="创建 ssh key"></a>创建 ssh key</h4><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C “aiotlab@126.com”</code></pre><p>连续三个或四个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub</p><h5 id="添加密钥到ssh-agent"><a href="#添加密钥到ssh-agent" class="headerlink" title="添加密钥到ssh-agent"></a>添加密钥到ssh-agent</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span>"</span></code></pre><h5 id="添加生成的SSH-key到ssh-agent"><a href="#添加生成的SSH-key到ssh-agent" class="headerlink" title="添加生成的SSH key到ssh-agent"></a>添加生成的SSH key到ssh-agent</h5><pre class=" language-bash"><code class="language-bash">ssh-add ~/.ssh/id_rsa</code></pre><p>登录Github，点击头像下的settings，选择右边的ssh and GPG keys 添加ssh<br>新建一个new ssh key,将生成的id_rsa.pub文件里内容粘贴上面就行啦</p><p>测试是不否添加成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>如果看到后面显示的是你的git用户名，说明添加成功。</p><p>配置Deployment，在其文件夹中，找到_config.yml文件，修改deploy中的repo值（在末尾）<br>repo值是你的github项目中右边Clone or download可以看到</p><h2 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h2><p>安装自动部署发布工具</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>发布命令</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre><p>发布时会提示输入github帐号和密码（未添加ssh key），提示发布完成</p><h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：</p><pre class=" language-bash"><code class="language-bash">muyun.info</code></pre><p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。</p><p>打开你添加的域名，是否发布成功。</p>]]></content>
      
      
      <categories>
          
          <category> 环境部署 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
