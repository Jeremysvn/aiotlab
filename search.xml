<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>使用Hexo与GitHub搭建独立域名博客</title>
      <link href="/posts/3eeb.html"/>
      <url>/posts/3eeb.html</url>
      
        <content type="html"><![CDATA[<h2 id="环境要求"><a href="#环境要求" class="headerlink" title="环境要求"></a>环境要求</h2><p>Git<br>Nodejs<br>安装Hexo及代码提交托管需要以上两个条件</p><h3 id="安装-Git"><a href="#安装-Git" class="headerlink" title="安装 Git"></a>安装 Git</h3><h4 id="Windows平台下安装"><a href="#Windows平台下安装" class="headerlink" title="Windows平台下安装"></a>Windows平台下安装</h4><p>Windows平台下安装相关要简单，下载安装包一路下一步便是。因此不在多叙述。<a href="https://git-scm.com/" target="_blank" rel="noopener">Git官网下载</a>  <a href="https://npm.taobao.org/mirrors/git-for-windows/v2.25.0.windows.1/Git-2.25.0-32-bit.exe" target="_blank" rel="noopener">淘宝镜像下载</a></p><h4 id="CentOS平台安装"><a href="#CentOS平台安装" class="headerlink" title="CentOS平台安装"></a>CentOS平台安装</h4><p>在CentOS平台安装最好是先更新为国内Yum源，并更新系统软件等包为最新。这样速度较快，支持较好。</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="Ubuntu平台安装"><a href="#Ubuntu平台安装" class="headerlink" title="Ubuntu平台安装"></a>Ubuntu平台安装</h4><p>在Ubuntu平台安装与在CentOS相差不大</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> apt <span class="token function">install</span> <span class="token function">git</span></code></pre><h4 id="Mac平台安装"><a href="#Mac平台安装" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><p>在Mac平台安装既可以通过GUI的方式来安装也可以通过Command的方式来安装，使用Homebrew进行安装：</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> <span class="token function">git</span></code></pre><p>如果没有安装HomBrew， <a href="https://brew.sh/index_zh-cn" target="_blank" rel="noopener">可以参考</a></p><h3 id="Git-配置命令"><a href="#Git-配置命令" class="headerlink" title="Git 配置命令"></a>Git 配置命令</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true">#使用前配置全局信息</span><span class="token function">git</span> config --global user.name <span class="token string">'你的名字'</span><span class="token function">git</span> config --global user.email <span class="token string">'你的邮箱'</span><span class="token comment" spellcheck="true">#查看是否已配置成功</span><span class="token function">git</span> config --list --global<span class="token comment" spellcheck="true">#在你需要使用Git的文件夹下运行</span><span class="token function">git</span> init                        <span class="token comment" spellcheck="true">#初始化</span><span class="token function">git</span> add <span class="token keyword">.</span>                        <span class="token comment" spellcheck="true">#添加变更文件到暂存区</span><span class="token function">git</span> status                        <span class="token comment" spellcheck="true">#查看变更信息</span><span class="token function">git</span> commit -m <span class="token string">'你需要写的信息'</span>        <span class="token comment" spellcheck="true">#提交到工作区</span><span class="token function">git</span> remote add origin https://github.com/用户名/仓库名.git    <span class="token comment" spellcheck="true">#添加Github远程连接</span><span class="token function">git</span> push origin                 <span class="token comment" spellcheck="true">#上传到GitHub</span><span class="token function">git</span> push origin -f                <span class="token comment" spellcheck="true">#强制上传到GitHub</span></code></pre><h4 id="Git代理相关"><a href="#Git代理相关" class="headerlink" title="Git代理相关"></a>Git代理相关</h4><p>查看当前的代理设置</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy<span class="token function">git</span> config --global https.proxy</code></pre><p>设置当前代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token string">'http://127.0.0.1:1080'</span><span class="token function">git</span> config --global https.proxy <span class="token string">'http://127.0.0.1:1080'</span></code></pre><p>或</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global http.proxy <span class="token string">'socks5://127.0.0.1:1080'</span><span class="token function">git</span> config --global https.proxy <span class="token string">'socks5://127.0.0.1:1080'</span></code></pre><p>删除代理</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> config --global --unset http.proxy<span class="token function">git</span> config --global --unset https.proxy</code></pre><p>其它Git用法请参考<a href="https://git-scm.com/book/zh/v2" target="_blank" rel="noopener">文档</a></p><h3 id="安装-Node"><a href="#安装-Node" class="headerlink" title="安装 Node"></a>安装 Node</h3><h4 id="Windows平台安装"><a href="#Windows平台安装" class="headerlink" title="Windows平台安装"></a>Windows平台安装</h4><p>Windows平台安装Node较简单，不再多叙述。 <a href="http://nodejs.cn/download/" target="_blank" rel="noopener">Node下载</a></p><p>安装完后输入 node -v 查询版本信息</p><h4 id="CentOS平台"><a href="#CentOS平台" class="headerlink" title="CentOS平台"></a>CentOS平台</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> yum <span class="token function">install</span> nodejs <span class="token function">npm</span></code></pre><p>源码安装,先下载 Node源码</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">tar</span> -xvf node-v10.16.0-linux-x64.tar.xz$ <span class="token function">sudo</span> <span class="token function">mv</span> node-v10.16.0 /home/blue/applications$ <span class="token function">ln</span> -s /home/blue/applications/node /home/blue/applications/node$ <span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /home/blue/applications/node-v10.16.0$ <span class="token function">sudo</span> <span class="token function">chmod</span> -R 755 /home/blue/applications/node$ <span class="token function">cd</span> /home/blue/applications/node$ <span class="token function">sudo</span> ./configure$ <span class="token function">sudo</span> <span class="token function">make</span> <span class="token operator">&amp;&amp;</span> <span class="token function">make</span> <span class="token function">install</span>$ <span class="token function">sudo</span> node --versionv10.16.0</code></pre><h4 id="Ubnutu平台安装"><a href="#Ubnutu平台安装" class="headerlink" title="Ubnutu平台安装"></a>Ubnutu平台安装</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> <span class="token function">apt-get</span> <span class="token function">install</span> nodejs <span class="token function">npm</span></code></pre><h4 id="Mac平台安装-1"><a href="#Mac平台安装-1" class="headerlink" title="Mac平台安装"></a>Mac平台安装</h4><pre class=" language-bash"><code class="language-bash">$ <span class="token function">sudo</span> brew <span class="token function">install</span> node <span class="token function">npm</span></code></pre><h4 id="设置国内NPM源"><a href="#设置国内NPM源" class="headerlink" title="设置国内NPM源"></a>设置国内NPM源</h4><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># 永久设置全局淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org --global<span class="token function">npm</span> config <span class="token keyword">set</span> disturl https://npm.taobao.org/dist --global<span class="token comment" spellcheck="true"># 临时修改镜像源</span><span class="token function">npm</span> --registry<span class="token operator">=</span>https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 永久设置为淘宝镜像源</span><span class="token function">npm</span> config <span class="token keyword">set</span> registry https://registry.npm.taobao.org<span class="token comment" spellcheck="true"># 查看npm的配置</span><span class="token function">npm</span> config list</code></pre><h4 id="安装-Yarn-非必须）"><a href="#安装-Yarn-非必须）" class="headerlink" title="安装 Yarn (非必须）"></a>安装 Yarn (非必须）</h4><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g yarn<span class="token comment" spellcheck="true"># 配置yarn淘宝源</span>yarn config <span class="token keyword">set</span> registry <span class="token string">'https://registry.npm.taobao.org'</span><span class="token comment" spellcheck="true"># 设置 npm 缓存</span><span class="token function">npm</span> config <span class="token keyword">set</span> prefix <span class="token string">"/home/blue/applications/cache/node/prefix"</span><span class="token function">npm</span> config <span class="token keyword">set</span> cache <span class="token string">"/home/blue/applications/cache/node/cache"</span></code></pre><p>还需要将/home/blue/applications/cache/node/prefix添加到PATH环境变量</p><h2 id="博客搭建"><a href="#博客搭建" class="headerlink" title="博客搭建"></a>博客搭建</h2><h3 id="安装-Hexo"><a href="#安装-Hexo" class="headerlink" title="安装 Hexo"></a>安装 Hexo</h3><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> -g hexo   <span class="token comment" spellcheck="true">#安装hexo</span><span class="token function">npm</span> <span class="token function">install</span>           <span class="token comment" spellcheck="true">#安装博客需要的依赖文件</span><span class="token comment" spellcheck="true"># 配置国内淘宝 cnpm ( 使用npm较慢时可改用)</span>$ <span class="token function">npm</span> <span class="token function">install</span> -g cnpm --registry<span class="token operator">=</span>https://registry.npm.taobao.org$ <span class="token function">sudo</span> cnpm <span class="token function">install</span> -g hexo</code></pre><h3 id="Hexo-初始化"><a href="#Hexo-初始化" class="headerlink" title="Hexo 初始化"></a>Hexo 初始化</h3><p>创建一个hexo仓库文件夹，进入文件夹初始化hexo</p><pre class=" language-bash"><code class="language-bash">$ <span class="token function">cd</span> /home/hexo$ hexo initINFO Cloning hexo-starter <span class="token punctuation">..</span><span class="token punctuation">..</span>.</code></pre><p>初始化完成后，在hexo目录下生成相关文件</p><p>hexo 目录结构<br>_config.yml          配置文件<br>_public            生成的静态文件，这个目录最终会发布到服务器<br>_scaffolds         通用模板<br>_source         保存编写的markdown文件<br>drafts            草稿文件<br>themes             博客主题<br>node_modules     类库</p><h3 id="安装博客主题"><a href="#安装博客主题" class="headerlink" title="安装博客主题"></a>安装博客主题</h3><p>在hexo目录中运行</p><pre class=" language-bash"><code class="language-bash"><span class="token function">git</span> clone https://github.com/blinkfox/hexo-theme-matery themes/matery<span class="token comment" spellcheck="true"># 启用主题</span>$ <span class="token function">vi</span> _config.yml<span class="token comment" spellcheck="true"># 修改文件中的 theme</span>theme: matery</code></pre><p>克隆完成后，在/Hexo/themes目录下，可以看到 landscape和matery 两个文件夹。<br>我们所要使用的主题都是放在这个目录下，Hexo默认使用的是landscape主题，NexT主题用的比较多且更多样化，我们这一步克隆了next主题，接下来会使用next主题进行演示。<br>想获取更多主题，可在网站：<a href="https://hexo.io/themes/" target="_blank" rel="noopener">此处</a>选择自己喜欢的主题，按照此步的步骤clone下来。</p><h3 id="hexo目录中-confit-yml文件配置"><a href="#hexo目录中-confit-yml文件配置" class="headerlink" title="hexo目录中_confit.yml文件配置"></a>hexo目录中_confit.yml文件配置</h3><pre class=" language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># Site</span><span class="token comment" spellcheck="true"># 博客名称</span>title: aiotlab<span class="token comment" spellcheck="true"># 副标题 </span>subtitle: aiotlab blog<span class="token comment" spellcheck="true"># 个人简介</span>description: 这是 aiotlab blogkeywords: aiotlab,lag,aiotlab<span class="token comment" spellcheck="true"># 博主</span>author: Jeremy Peng<span class="token comment" spellcheck="true"># 语言</span>language: zh-CN<span class="token comment" spellcheck="true"># 时区</span>timezone: Asia/Shanghaiurl    :网址    root :网站根目录    permalink: 文章的永久链接格式 :year/:month/:day/:title/permalink_defaults:    永久链接中各部分的默认值    pretty_urls: 改写 permalink 的值来美化 URL    pretty_urls.trailing_index: 是否在永久链接中保留尾部的 index.html，设置为 false时去除pretty_urls.trailing_html: 是否在永久链接中保留尾部的 .html, 设置为 <span class="token boolean">false</span> 时去除<span class="token comment" spellcheck="true"># 目录(基本不需改)</span>source_dir        资源文件夹，这个文件夹用来存放内容public_dir        公共文件夹，这个文件夹用于存放chang生成的站点文件tag_dir            标签文件夹archive_dir        归档文件夹category_dir    分类文件夹code_dir        Include code 文件夹，source_dir 下的子目录i18n_dir        国际化（i18n）文件夹skip_render        跳过指定文件的渲染。<span class="token punctuation">(</span>常用于跳过GitHub的README.md渲染<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 分页</span>per_page        每页显示的文章量 <span class="token punctuation">(</span>0 关闭分页功能,默认10<span class="token punctuation">)</span>pagination_dir    分页目录<span class="token comment" spellcheck="true"># 主题,当前主题名称</span>theme: matery<span class="token comment" spellcheck="true"># 发布</span>deploy:  type: <span class="token function">git</span>  repo: 仓库  branch: 分支</code></pre><h4 id="新建分类categories页"><a href="#新建分类categories页" class="headerlink" title="新建分类categories页"></a>新建分类categories页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"categories"</span></code></pre><p>编辑文件 /source/categories/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: categoriesdate: 2020-03-01type: <span class="token string">"categories"</span>layout: <span class="token string">"categories"</span>---</code></pre><h4 id="新建标签-tags-页"><a href="#新建标签-tags-页" class="headerlink" title="新建标签 tags 页"></a>新建标签 tags 页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"tags"</span></code></pre><p>编辑文件 /source/tags/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: tagsdate: 2020-03-01 18:23:38type: <span class="token string">"tags"</span>layout: <span class="token string">"tags"</span>---</code></pre><h4 id="新建关于我-about-页"><a href="#新建关于我-about-页" class="headerlink" title="新建关于我 about 页"></a>新建关于我 about 页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"about"</span></code></pre><p>编辑文件 /source/about/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: aboutdate: 2020-03-01 17:25:30type: <span class="token string">"about"</span>layout: <span class="token string">"about"</span>---</code></pre><h4 id="新建友情连接-friends-页（可选的）"><a href="#新建友情连接-friends-页（可选的）" class="headerlink" title="新建友情连接 friends 页（可选的）"></a>新建友情连接 friends 页（可选的）</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"friends"</span></code></pre><p>编辑文件 /source/friends/index.md，内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: friendsdate: 2020-03-01 21:25:30type: <span class="token string">"friends"</span>layout: <span class="token string">"friends"</span>---</code></pre><p>同时，在你的博客 source 目录下新建 _data 目录，在 _data 目录中新建 friends.json 文件，文件内容如下所示：</p><pre class=" language-bash"><code class="language-bash"><span class="token punctuation">[</span><span class="token punctuation">{</span>    <span class="token string">"avatar"</span><span class="token keyword">:</span> <span class="token string">"https://s2.ax1x.com/2020/02/13/1q6iAs.th.png"</span>,    <span class="token string">"name"</span><span class="token keyword">:</span> <span class="token string">"AiotLab"</span>,    <span class="token string">"introduction"</span><span class="token keyword">:</span> <span class="token string">"这是我的博客"</span>,    <span class="token string">"url"</span><span class="token keyword">:</span> <span class="token string">"https://aiotlab.info/"</span>,    <span class="token string">"title"</span><span class="token keyword">:</span> <span class="token string">"前去查看"</span><span class="token punctuation">}</span><span class="token punctuation">]</span></code></pre><h4 id="新建留言contact页"><a href="#新建留言contact页" class="headerlink" title="新建留言contact页"></a>新建留言contact页</h4><pre class=" language-bash"><code class="language-bash">hexo new page <span class="token string">"contact"</span></code></pre><p>编辑文件 /source/contact/infex.md 内容如下：</p><pre class=" language-bash"><code class="language-bash">---title: contactdate: 2020-03-01 21:25:30type: <span class="token string">"contact"</span>layout: <span class="token string">"contact"</span>---</code></pre><h3 id="发布测试"><a href="#发布测试" class="headerlink" title="发布测试"></a>发布测试</h3><h4 id="本地发布测试"><a href="#本地发布测试" class="headerlink" title="本地发布测试"></a>本地发布测试</h4><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo s<span class="token punctuation">..</span>.INFO  Start processingINFO  Hexo is running at http://localhost:4000/. Press Ctrl+C to stop.</code></pre><p>访问 <a href="http://localhost:4000/" target="_blank" rel="noopener">http://localhost:4000/</a> 即可看到博客效果</p><h2 id="博客部署"><a href="#博客部署" class="headerlink" title="博客部署"></a>博客部署</h2><h3 id="创建Github仓库"><a href="#创建Github仓库" class="headerlink" title="创建Github仓库"></a>创建Github仓库</h3><p>访问 <a href="https://github.com/" target="_blank" rel="noopener">https://github.com/</a> ，申请注册账号，并创建一个仓库</p><h3 id="配置-config-yml"><a href="#配置-config-yml" class="headerlink" title="配置_config.yml"></a>配置_config.yml</h3><pre class=" language-bash"><code class="language-bash">deploy:  type: <span class="token function">git</span>  repository: git@github.com:帐号/仓库名.git  branch: master</code></pre><h3 id="配置-ssh-key"><a href="#配置-ssh-key" class="headerlink" title="配置 ssh key"></a>配置 ssh key</h3><h4 id="创建-ssh-key"><a href="#创建-ssh-key" class="headerlink" title="创建 ssh key"></a>创建 ssh key</h4><pre class=" language-bash"><code class="language-bash">ssh-keygen -t rsa -C “aiotlab@126.com”</code></pre><p>连续三个或四个回车，生成密钥，最后得到了两个文件：id_rsa和id_rsa.pub</p><h5 id="添加密钥到ssh-agent"><a href="#添加密钥到ssh-agent" class="headerlink" title="添加密钥到ssh-agent"></a>添加密钥到ssh-agent</h5><pre class=" language-bash"><code class="language-bash"><span class="token function">eval</span> <span class="token string">"<span class="token variable"><span class="token variable">$(</span>ssh-agent -s<span class="token variable">)</span></span>"</span></code></pre><h5 id="添加生成的SSH-key到ssh-agent"><a href="#添加生成的SSH-key到ssh-agent" class="headerlink" title="添加生成的SSH key到ssh-agent"></a>添加生成的SSH key到ssh-agent</h5><pre class=" language-bash"><code class="language-bash">ssh-add ~/.ssh/id_rsa</code></pre><p>登录Github，点击头像下的settings，选择右边的ssh and GPG keys 添加ssh<br>新建一个new ssh key,将生成的id_rsa.pub文件里内容粘贴上面就行啦</p><p>测试是不否添加成功</p><pre class=" language-bash"><code class="language-bash"><span class="token function">ssh</span> -T git@github.com</code></pre><p>如果看到后面显示的是你的git用户名，说明添加成功。</p><p>配置Deployment，在其文件夹中，找到_config.yml文件，修改deploy中的repo值（在末尾）<br>repo值是你的github项目中右边Clone or download可以看到</p><h2 id="发布项目"><a href="#发布项目" class="headerlink" title="发布项目"></a>发布项目</h2><p>安装自动部署发布工具</p><pre class=" language-bash"><code class="language-bash"><span class="token function">npm</span> <span class="token function">install</span> hexo-deployer-git --save</code></pre><p>发布命令</p><pre class=" language-bash"><code class="language-bash">hexo clean <span class="token operator">&amp;&amp;</span> hexo g <span class="token operator">&amp;&amp;</span> hexo d</code></pre><p>发布时会提示输入github帐号和密码（未添加ssh key），提示发布完成</p><h3 id="设置CNAME"><a href="#设置CNAME" class="headerlink" title="设置CNAME"></a>设置CNAME</h3><p>在 hexo 项目下，source 文件夹下面创建 CNAME 文件（没有后缀名的），在里面写上购买的域名。比如：</p><pre class=" language-bash"><code class="language-bash">aiotlab.info</code></pre><p>在 github 上面，打开 username.github.io 项目的（Settings）设置，然后在 GitHub Pages的 Custom domain设置里填上购买的域名。</p><p>打开你添加的域名，是否发布成功。</p>]]></content>
      
      
      <categories>
          
          <category> 环境搭建 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Hexo </tag>
            
            <tag> GitHub </tag>
            
            <tag> 博客 </tag>
            
            <tag> 域名 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
